/*! jsTree - v3.3.7 - 2018-11-06 - (MIT) */
!function(a){"use strict";"function"==typeof define&&define.amd?define(["jquery"],a):"undefined"!=typeof module&&module.exports?module.exports=a(require("jquery")):a(jQuery)}(function(a,b){"use strict";if(!a.jstree){var c=0,d=!1,e=!1,f=!1,g=[],h=a("script:last").attr("src"),i=window.document;a.jstree={version:"3.3.7",defaults:{plugins:[]},plugins:{},path:h&&-1!==h.indexOf("/")?h.replace(/\/[^\/]+$/,""):"",idregex:/[\\:&!^|()\[\]<>@*'+~#";.,=\- \/${}%?`]/g,root:"#"},a.jstree.create=function(b,d){var e=new a.jstree.core(++c),f=d;return d=a.extend(!0,{},a.jstree.defaults,d),f&&f.plugins&&(d.plugins=f.plugins),a.each(d.plugins,function(a,b){"core"!==a&&(e=e.plugin(b,d[b]))}),a(b).data("jstree",e),e.init(b,d),e},a.jstree.destroy=function(){a(".jstree:jstree").jstree("destroy"),a(i).off(".jstree")},a.jstree.core=function(a){this._id=a,this._cnt=0,this._wrk=null,this._data={core:{themes:{name:!1,dots:!1,icons:!1,ellipsis:!1},selected:[],last_error:{},working:!1,worker_queue:[],focused:null}}},a.jstree.reference=function(b){var c=null,d=null;if(!b||!b.id||b.tagName&&b.nodeType||(b=b.id),!d||!d.length)try{d=a(b)}catch(e){}if(!d||!d.length)try{d=a("#"+b.replace(a.jstree.idregex,"\\$&"))}catch(e){}return d&&d.length&&(d=d.closest(".jstree")).length&&(d=d.data("jstree"))?c=d:a(".jstree").each(function(){var d=a(this).data("jstree");return d&&d._model.data[b]?(c=d,!1):void 0}),c},a.fn.jstree=function(c){var d="string"==typeof c,e=Array.prototype.slice.call(arguments,1),f=null;return c!==!0||this.length?(this.each(function(){var g=a.jstree.reference(this),h=d&&g?g[c]:null;return f=d&&h?h.apply(g,e):null,g||d||c!==b&&!a.isPlainObject(c)||a.jstree.create(this,c),(g&&!d||c===!0)&&(f=g||!1),null!==f&&f!==b?!1:void 0}),null!==f&&f!==b?f:this):!1},a.expr.pseudos.jstree=a.expr.createPseudo(function(c){return function(c){return a(c).hasClass("jstree")&&a(c).data("jstree")!==b}}),a.jstree.defaults.core={data:!1,strings:!1,check_callback:!1,error:a.noop,animation:200,multiple:!0,themes:{name:!1,url:!1,dir:!1,dots:!0,icons:!0,ellipsis:!1,stripes:!1,variant:!1,responsive:!1},expand_selected_onload:!0,worker:!0,force_text:!1,dblclick_toggle:!0,loaded_state:!1,restore_focus:!0,keyboard:{"ctrl-space":function(b){b.type="click",a(b.currentTarget).trigger(b)},enter:function(b){b.type="click",a(b.currentTarget).trigger(b)},left:function(b){if(b.preventDefault(),this.is_open(b.currentTarget))this.close_node(b.currentTarget);else{var c=this.get_parent(b.currentTarget);c&&c.id!==a.jstree.root&&this.get_node(c,!0).children(".jstree-anchor").focus()}},up:function(a){a.preventDefault();var b=this.get_prev_dom(a.currentTarget);b&&b.length&&b.children(".jstree-anchor").focus()},right:function(b){if(b.preventDefault(),this.is_closed(b.currentTarget))this.open_node(b.currentTarget,function(a){this.get_node(a,!0).children(".jstree-anchor").focus()});else if(this.is_open(b.currentTarget)){var c=this.get_node(b.currentTarget,!0).children(".jstree-children")[0];c&&a(this._firstChild(c)).children(".jstree-anchor").focus()}},down:function(a){a.preventDefault();var b=this.get_next_dom(a.currentTarget);b&&b.length&&b.children(".jstree-anchor").focus()},"*":function(a){this.open_all()},home:function(b){b.preventDefault();var c=this._firstChild(this.get_container_ul()[0]);c&&a(c).children(".jstree-anchor").filter(":visible").focus()},end:function(a){a.preventDefault(),this.element.find(".jstree-anchor").filter(":visible").last().focus()},f2:function(a){a.preventDefault(),this.edit(a.currentTarget)}}},a.jstree.core.prototype={plugin:function(b,c){var d=a.jstree.plugins[b];return d?(this._data[b]={},d.prototype=this,new d(c,this)):this},init:function(b,c){this._model={data:{},changed:[],force_full_redraw:!1,redraw_timeout:!1,default_state:{loaded:!0,opened:!1,selected:!1,disabled:!1}},this._model.data[a.jstree.root]={id:a.jstree.root,parent:null,parents:[],children:[],children_d:[],state:{loaded:!1}},this.element=a(b).addClass("jstree jstree-"+this._id),this.settings=c,this._data.core.ready=!1,this._data.core.loaded=!1,this._data.core.rtl="rtl"===this.element.css("direction"),this.element[this._data.core.rtl?"addClass":"removeClass"]("jstree-rtl"),this.element.attr("role","tree"),this.settings.core.multiple&&this.element.attr("aria-multiselectable",!0),this.element.attr("tabindex")||this.element.attr("tabindex","0"),this.bind(),this.trigger("init"),this._data.core.original_container_html=this.element.find(" > ul > li").clone(!0),this._data.core.original_container_html.find("li").addBack().contents().filter(function(){return 3===this.nodeType&&(!this.nodeValue||/^\s+$/.test(this.nodeValue))}).remove(),this.element.html("<ul class='jstree-container-ul jstree-children' role='group'><li id='j"+this._id+"_loading' class='jstree-initial-node jstree-loading jstree-leaf jstree-last' role='tree-item'><i class='jstree-icon jstree-ocl'></i><a class='jstree-anchor' href='#'><i class='jstree-icon jstree-themeicon-hidden'></i>"+this.get_string("Loading ...")+"</a></li></ul>"),this.element.attr("aria-activedescendant","j"+this._id+"_loading"),this._data.core.li_height=this.get_container_ul().children("li").first().outerHeight()||24,this._data.core.node=this._create_prototype_node(),this.trigger("loading"),this.load_node(a.jstree.root)},destroy:function(a){if(this.trigger("destroy"),this._wrk)try{window.URL.revokeObjectURL(this._wrk),this._wrk=null}catch(b){}a||this.element.empty(),this.teardown()},_create_prototype_node:function(){var a=i.createElement("LI"),b,c;return a.setAttribute("role","treeitem"),b=i.createElement("I"),b.className="jstree-icon jstree-ocl",b.setAttribute("role","presentation"),a.appendChild(b),b=i.createElement("A"),b.className="jstree-anchor",b.setAttribute("href","#"),b.setAttribute("tabindex","-1"),c=i.createElement("I"),c.className="jstree-icon jstree-themeicon",c.setAttribute("role","presentation"),b.appendChild(c),a.appendChild(b),b=c=null,a},_kbevent_to_func:function(a){var b={8:"Backspace",9:"Tab",13:"Return",19:"Pause",27:"Esc",32:"Space",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"Left",38:"Up",39:"Right",40:"Down",44:"Print",45:"Insert",46:"Delete",96:"Numpad0",97:"Numpad1",98:"Numpad2",99:"Numpad3",100:"Numpad4",101:"Numpad5",102:"Numpad6",103:"Numpad7",104:"Numpad8",105:"Numpad9","-13":"NumpadEnter",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"Numlock",145:"Scrolllock",16:"Shift",17:"Ctrl",18:"Alt",48:"0",49:"1",50:"2",51:"3",52:"4",53:"5",54:"6",55:"7",56:"8",57:"9",59:";",61:"=",65:"a",66:"b",67:"c",68:"d",69:"e",70:"f",71:"g",72:"h",73:"i",74:"j",75:"k",76:"l",77:"m",78:"n",79:"o",80:"p",81:"q",82:"r",83:"s",84:"t",85:"u",86:"v",87:"w",88:"x",89:"y",90:"z",107:"+",109:"-",110:".",186:";",187:"=",188:",",189:"-",190:".",191:"/",192:"`",219:"[",220:"\\",221:"]",222:"'",111:"/",106:"*",173:"-"},c=[];a.ctrlKey&&c.push("ctrl"),a.altKey&&c.push("alt"),a.shiftKey&&c.push("shift"),c.push(b[a.which]||a.which),c=c.sort().join("-").toLowerCase();var d=this.settings.core.keyboard,e,f;for(e in d)if(d.hasOwnProperty(e)&&(f=e,"-"!==f&&"+"!==f&&(f=f.replace("--","-MINUS").replace("+-","-MINUS").replace("++","-PLUS").replace("-+","-PLUS"),f=f.split(/-|\+/).sort().join("-").replace("MINUS","-").replace("PLUS","+").toLowerCase()),f===c))return d[e];return null},teardown:function(){this.unbind(),this.element.removeClass("jstree").removeData("jstree").find("[class^='jstree']").addBack().attr("class",function(){return this.className.replace(/jstree[^ ]*|$/gi,"")}),this.element=null},bind:function(){var b="",c=null,d=0;this.element.on("dblclick.jstree",function(a){if(a.target.tagName&&"input"===a.target.tagName.toLowerCase())return!0;if(i.selection&&i.selection.empty)i.selection.empty();else if(window.getSelection){var b=window.getSelection();try{b.removeAllRanges(),b.collapse()}catch(c){}}}).on("mousedown.jstree",a.proxy(function(a){a.target===this.element[0]&&(a.preventDefault(),d=+new Date)},this)).on("mousedown.jstree",".jstree-ocl",function(a){a.preventDefault()}).on("click.jstree",".jstree-ocl",a.proxy(function(a){this.toggle_node(a.target)},this)).on("dblclick.jstree",".jstree-anchor",a.proxy(function(a){return a.target.tagName&&"input"===a.target.tagName.toLowerCase()?!0:void(this.settings.core.dblclick_toggle&&this.toggle_node(a.target))},this)).on("click.jstree",".jstree-anchor",a.proxy(function(b){b.preventDefault(),b.currentTarget!==i.activeElement&&a(b.currentTarget).focus(),this.activate_node(b.currentTarget,b)},this)).on("keydown.jstree",".jstree-anchor",a.proxy(function(a){if(a.target.tagName&&"input"===a.target.tagName.toLowerCase())return!0;this._data.core.rtl&&(37===a.which?a.which=39:39===a.which&&(a.which=37));var b=this._kbevent_to_func(a);if(b){var c=b.call(this,a);if(c===!1||c===!0)return c}},this)).on("load_node.jstree",a.proxy(function(b,c){c.status&&(c.node.id!==a.jstree.root||this._data.core.loaded||(this._data.core.loaded=!0,this._firstChild(this.get_container_ul()[0])&&this.element.attr("aria-activedescendant",this._firstChild(this.get_container_ul()[0]).id),this.trigger("loaded")),this._data.core.ready||setTimeout(a.proxy(function(){if(this.element&&!this.get_container_ul().find(".jstree-loading").length){if(this._data.core.ready=!0,this._data.core.selected.length){if(this.settings.core.expand_selected_onload){var b=[],c,d;for(c=0,d=this._data.core.selected.length;d>c;c++)b=b.concat(this._model.data[this._data.core.selected[c]].parents);for(b=a.vakata.array_unique(b),c=0,d=b.length;d>c;c++)this.open_node(b[c],!1,0)}this.trigger("changed",{action:"ready",selected:this._data.core.selected})}this.trigger("ready")}},this),0))},this)).on("keypress.jstree",a.proxy(function(d){if(d.target.tagName&&"input"===d.target.tagName.toLowerCase())return!0;c&&clearTimeout(c),c=setTimeout(function(){b=""},500);var e=String.fromCharCode(d.which).toLowerCase(),f=this.element.find(".jstree-anchor").filter(":visible"),g=f.index(i.activeElement)||0,h=!1;if(b+=e,b.length>1){if(f.slice(g).each(a.proxy(function(c,d){return 0===a(d).text().toLowerCase().indexOf(b)?(a(d).focus(),h=!0,!1):void 0},this)),h)return;if(f.slice(0,g).each(a.proxy(function(c,d){return 0===a(d).text().toLowerCase().indexOf(b)?(a(d).focus(),h=!0,!1):void 0},this)),h)return}if(new RegExp("^"+e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")+"+$").test(b)){if(f.slice(g+1).each(a.proxy(function(b,c){return a(c).text().toLowerCase().charAt(0)===e?(a(c).focus(),h=!0,!1):void 0},this)),h)return;if(f.slice(0,g+1).each(a.proxy(function(b,c){return a(c).text().toLowerCase().charAt(0)===e?(a(c).focus(),h=!0,!1):void 0},this)),h)return}},this)).on("init.jstree",a.proxy(function(){var a=this.settings.core.themes;this._data.core.themes.dots=a.dots,this._data.core.themes.stripes=a.stripes,this._data.core.themes.icons=a.icons,this._data.core.themes.ellipsis=a.ellipsis,this.set_theme(a.name||"default",a.url),this.set_theme_variant(a.variant)},this)).on("loading.jstree",a.proxy(function(){this[this._data.core.themes.dots?"show_dots":"hide_dots"](),this[this._data.core.themes.icons?"show_icons":"hide_icons"](),this[this._data.core.themes.stripes?"show_stripes":"hide_stripes"](),this[this._data.core.themes.ellipsis?"show_ellipsis":"hide_ellipsis"]()},this)).on("blur.jstree",".jstree-anchor",a.proxy(function(b){this._data.core.focused=null,a(b.currentTarget).filter(".jstree-hovered").mouseleave(),this.element.attr("tabindex","0")},this)).on("focus.jstree",".jstree-anchor",a.proxy(function(b){var c=this.get_node(b.currentTarget);c&&c.id&&(this._data.core.focused=c.id),this.element.find(".jstree-hovered").not(b.currentTarget).mouseleave(),a(b.currentTarget).mouseenter(),this.element.attr("tabindex","-1")},this)).on("focus.jstree",a.proxy(function(){if(+new Date-d>500&&!this._data.core.focused&&this.settings.core.restore_focus){d=0;var a=this.get_node(this.element.attr("aria-activedescendant"),!0);a&&a.find("> .jstree-anchor").focus()}},this)).on("mouseenter.jstree",".jstree-anchor",a.proxy(function(a){this.hover_node(a.currentTarget)},this)).on("mouseleave.jstree",".jstree-anchor",a.proxy(function(a){this.dehover_node(a.currentTarget)},this))},unbind:function(){this.element.off(".jstree"),a(i).off(".jstree-"+this._id)},trigger:function(a,b){b||(b={}),b.instance=this,this.element.triggerHandler(a.replace(".jstree","")+".jstree",b)},get_container:function(){return this.element},get_container_ul:function(){return this.element.children(".jstree-children").first()},get_string:function(b){var c=this.settings.core.strings;return a.isFunction(c)?c.call(this,b):c&&c[b]?c[b]:b},_firstChild:function(a){a=a?a.firstChild:null;while(null!==a&&1!==a.nodeType)a=a.nextSibling;return a},_nextSibling:function(a){a=a?a.nextSibling:null;while(null!==a&&1!==a.nodeType)a=a.nextSibling;return a},_previousSibling:function(a){a=a?a.previousSibling:null;while(null!==a&&1!==a.nodeType)a=a.previousSibling;return a},get_node:function(b,c){b&&b.id&&(b=b.id),b instanceof jQuery&&b.length&&b[0].id&&(b=b[0].id);var d;try{if(this._model.data[b])b=this._model.data[b];else if("string"==typeof b&&this._model.data[b.replace(/^#/,"")])b=this._model.data[b.replace(/^#/,"")];else if("string"==typeof b&&(d=a("#"+b.replace(a.jstree.idregex,"\\$&"),this.element)).length&&this._model.data[d.closest(".jstree-node").attr("id")])b=this._model.data[d.closest(".jstree-node").attr("id")];else if((d=this.element.find(b)).length&&this._model.data[d.closest(".jstree-node").attr("id")])b=this._model.data[d.closest(".jstree-node").attr("id")];else{if(!(d=this.element.find(b)).length||!d.hasClass("jstree"))return!1;b=this._model.data[a.jstree.root]}return c&&(b=b.id===a.jstree.root?this.element:a("#"+b.id.replace(a.jstree.idregex,"\\$&"),this.element)),b}catch(e){return!1}},get_path:function(b,c,d){if(b=b.parents?b:this.get_node(b),!b||b.id===a.jstree.root||!b.parents)return!1;var e,f,g=[];for(g.push(d?b.id:b.text),e=0,f=b.parents.length;f>e;e++)g.push(d?b.parents[e]:this.get_text(b.parents[e]));return g=g.reverse().slice(1),c?g.join(c):g},get_next_dom:function(b,c){var d;if(b=this.get_node(b,!0),b[0]===this.element[0]){d=this._firstChild(this.get_container_ul()[0]);while(d&&0===d.offsetHeight)d=this._nextSibling(d);return d?a(d):!1}if(!b||!b.length)return!1;if(c){d=b[0];do d=this._nextSibling(d);while(d&&0===d.offsetHeight);return d?a(d):!1}if(b.hasClass("jstree-open")){d=this._firstChild(b.children(".jstree-children")[0]);while(d&&0===d.offsetHeight)d=this._nextSibling(d);if(null!==d)return a(d)}d=b[0];do d=this._nextSibling(d);while(d&&0===d.offsetHeight);return null!==d?a(d):b.parentsUntil(".jstree",".jstree-node").nextAll(".jstree-node:visible").first()},get_prev_dom:function(b,c){var d;if(b=this.get_node(b,!0),b[0]===this.element[0]){d=this.get_container_ul()[0].lastChild;while(d&&0===d.offsetHeight)d=this._previousSibling(d);return d?a(d):!1}if(!b||!b.length)return!1;if(c){d=b[0];do d=this._previousSibling(d);while(d&&0===d.offsetHeight);return d?a(d):!1}d=b[0];do d=this._previousSibling(d);while(d&&0===d.offsetHeight);if(null!==d){b=a(d);while(b.hasClass("jstree-open"))b=b.children(".jstree-children").first().children(".jstree-node:visible:last");return b}return d=b[0].parentNode.parentNode,d&&d.className&&-1!==d.className.indexOf("jstree-node")?a(d):!1},get_parent:function(b){return b=this.get_node(b),b&&b.id!==a.jstree.root?b.parent:!1},get_children_dom:function(a){return a=this.get_node(a,!0),a[0]===this.element[0]?this.get_container_ul().children(".jstree-node"):a&&a.length?a.children(".jstree-children").children(".jstree-node"):!1},is_parent:function(a){return a=this.get_node(a),a&&(a.state.loaded===!1||a.children.length>0)},is_loaded:function(a){return a=this.get_node(a),a&&a.state.loaded},is_loading:function(a){return a=this.get_node(a),a&&a.state&&a.state.loading},is_open:function(a){return a=this.get_node(a),a&&a.state.opened},is_closed:function(a){return a=this.get_node(a),a&&this.is_parent(a)&&!a.state.opened},is_leaf:function(a){return!this.is_parent(a)},load_node:function(b,c){var d,e,f,g,h;if(a.isArray(b))return this._load_nodes(b.slice(),c),!0;if(b=this.get_node(b),!b)return c&&c.call(this,b,!1),!1;if(b.state.loaded){for(b.state.loaded=!1,f=0,g=b.parents.length;g>f;f++)this._model.data[b.parents[f]].children_d=a.vakata.array_filter(this._model.data[b.parents[f]].children_d,function(c){return-1===a.inArray(c,b.children_d)});for(d=0,e=b.children_d.length;e>d;d++)this._model.data[b.children_d[d]].state.selected&&(h=!0),delete this._model.data[b.children_d[d]];h&&(this._data.core.selected=a.vakata.array_filter(this._data.core.selected,function(c){return-1===a.inArray(c,b.children_d)})),b.children=[],b.children_d=[],h&&this.trigger("changed",{action:"load_node",node:b,selected:this._data.core.selected})}return b.state.failed=!1,b.state.loading=!0,this.get_node(b,!0).addClass("jstree-loading").attr("aria-busy",!0),this._load_node(b,a.proxy(function(a){b=this._model.data[b.id],b.state.loading=!1,b.state.loaded=a,b.state.failed=!b.state.loaded;var d=this.get_node(b,!0),e=0,f=0,g=this._model.data,h=!1;for(e=0,f=b.children.length;f>e;e++)if(g[b.children[e]]&&!g[b.children[e]].state.hidden){h=!0;break}b.state.loaded&&d&&d.length&&(d.removeClass("jstree-closed jstree-open jstree-leaf"),h?"#"!==b.id&&d.addClass(b.state.opened?"jstree-open":"jstree-closed"):d.addClass("jstree-leaf")),d.removeClass("jstree-loading").attr("aria-busy",!1),this.trigger("load_node",{node:b,status:a}),c&&c.call(this,b,a)},this)),!0},_load_nodes:function(a,b,c,d){var e=!0,f=function(){this._load_nodes(a,b,!0)},g=this._model.data,h,i,j=[];for(h=0,i=a.length;i>h;h++)g[a[h]]&&(!g[a[h]].state.loaded&&!g[a[h]].state.failed||!c&&d)&&(this.is_loading(a[h])||this.load_node(a[h],f),e=!1);if(e){for(h=0,i=a.length;i>h;h++)g[a[h]]&&g[a[h]].state.loaded&&j.push(a[h]);b&&!b.done&&(b.call(this,j),b.done=!0)}},load_all:function(b,c){if(b||(b=a.jstree.root),b=this.get_node(b),!b)return!1;var d=[],e=this._model.data,f=e[b.id].children_d,g,h;for(b.state&&!b.state.loaded&&d.push(b.id),g=0,h=f.length;h>g;g++)e[f[g]]&&e[f[g]].state&&!e[f[g]].state.loaded&&d.push(f[g]);d.length?this._load_nodes(d,function(){this.load_all(b,c)}):(c&&c.call(this,b),this.trigger("load_all",{node:b}))},_load_node:function(b,c){var d=this.settings.core.data,e,f=function g(){return 3!==this.nodeType&&8!==this.nodeType};return d?a.isFunction(d)?d.call(this,b,a.proxy(function(d){d===!1?c.call(this,!1):this["string"==typeof d?"_append_html_data":"_append_json_data"](b,"string"==typeof d?a(a.parseHTML(d)).filter(f):d,function(a){c.call(this,a)})},this)):"object"==typeof d?d.url?(d=a.extend(!0,{},d),a.isFunction(d.url)&&(d.url=d.url.call(this,b)),a.isFunction(d.data)&&(d.data=d.data.call(this,b)),a.ajax(d).done(a.proxy(function(d,e,g){var h=g.getResponseHeader("Content-Type");return h&&-1!==h.indexOf("json")||"object"==typeof d?this._append_json_data(b,d,function(a){c.call(this,a)}):h&&-1!==h.indexOf("html")||"string"==typeof d?this._append_html_data(b,a(a.parseHTML(d)).filter(f),function(a){c.call(this,a)}):(this._data.core.last_error={error:"ajax",plugin:"core",id:"core_04",reason:"Could not load node",data:JSON.stringify({id:b.id,xhr:g})},this.settings.core.error.call(this,this._data.core.last_error),c.call(this,!1))},this)).fail(a.proxy(function(a){this._data.core.last_error={error:"ajax",plugin:"core",id:"core_04",reason:"Could not load node",data:JSON.stringify({id:b.id,xhr:a})},c.call(this,!1),this.settings.core.error.call(this,this._data.core.last_error)},this))):(e=a.isArray(d)?a.extend(!0,[],d):a.isPlainObject(d)?a.extend(!0,{},d):d,b.id===a.jstree.root?this._append_json_data(b,e,function(a){c.call(this,a)}):(this._data.core.last_error={error:"nodata",plugin:"core",id:"core_05",reason:"Could not load node",data:JSON.stringify({id:b.id})},this.settings.core.error.call(this,this._data.core.last_error),c.call(this,!1))):"string"==typeof d?b.id===a.jstree.root?this._append_html_data(b,a(a.parseHTML(d)).filter(f),function(a){c.call(this,a)}):(this._data.core.last_error={error:"nodata",plugin:"core",id:"core_06",reason:"Could not load node",data:JSON.stringify({id:b.id})},this.settings.core.error.call(this,this._data.core.last_error),c.call(this,!1)):c.call(this,!1):b.id===a.jstree.root?this._append_html_data(b,this._data.core.original_container_html.clone(!0),function(a){c.call(this,a)}):c.call(this,!1)},_node_changed:function(b){b=this.get_node(b),b&&-1===a.inArray(b.id,this._model.changed)&&this._model.changed.push(b.id)},_append_html_data:function(b,c,d){b=this.get_node(b),b.children=[],b.children_d=[];var e=c.is("ul")?c.children():c,f=b.id,g=[],h=[],i=this._model.data,j=i[f],k=this._data.core.selected.length,l,m,n;for(e.each(a.proxy(function(b,c){l=this._parse_model_from_html(a(c),f,j.parents.concat()),l&&(g.push(l),h.push(l),i[l].children_d.length&&(h=h.concat(i[l].children_d)))},this)),j.children=g,j.children_d=h,m=0,n=j.parents.length;n>m;m++)i[j.parents[m]].children_d=i[j.parents[m]].children_d.concat(h);this.trigger("model",{nodes:h,parent:f}),f!==a.jstree.root?(this._node_changed(f),this.redraw()):(this.get_container_ul().children(".jstree-initial-node").remove(),this.redraw(!0)),this._data.core.selected.length!==k&&this.trigger("changed",{action:"model",selected:this._data.core.selected}),d.call(this,!0)},_append_json_data:function(b,c,d,e){if(null!==this.element){b=this.get_node(b),b.children=[],b.children_d=[],c.d&&(c=c.d,"string"==typeof c&&(c=JSON.parse(c))),a.isArray(c)||(c=[c]);var f=null,g={df:this._model.default_state,dat:c,par:b.id,m:this._model.data,t_id:this._id,t_cnt:this._cnt,sel:this._data.core.selected},h=function(a,b){a.data&&(a=a.data);var c=a.dat,d=a.par,e=[],f=[],g=[],h=a.df,i=a.t_id,j=a.t_cnt,k=a.m,l=k[d],m=a.sel,n,o,p,q,r=function(a,c,d){d=d?d.concat():[],c&&d.unshift(c);var e=a.id.toString(),f,i,j,l,m={id:e,text:a.text||"",icon:a.icon!==b?a.icon:!0,parent:c,parents:d,children:a.children||[],children_d:a.children_d||[],data:a.data,state:{},li_attr:{id:!1},a_attr:{href:"#"},original:!1};for(f in h)h.hasOwnProperty(f)&&(m.state[f]=h[f]);if(a&&a.data&&a.data.jstree&&a.data.jstree.icon&&(m.icon=a.data.jstree.icon),(m.icon===b||null===m.icon||""===m.icon)&&(m.icon=!0),a&&a.data&&(m.data=a.data,a.data.jstree))for(f in a.data.jstree)a.data.jstree.hasOwnProperty(f)&&(m.state[f]=a.data.jstree[f]);if(a&&"object"==typeof a.state)for(f in a.state)a.state.hasOwnProperty(f)&&(m.state[f]=a.state[f]);if(a&&"object"==typeof a.li_attr)for(f in a.li_attr)a.li_attr.hasOwnProperty(f)&&(m.li_attr[f]=a.li_attr[f]);if(m.li_attr.id||(m.li_attr.id=e),a&&"object"==typeof a.a_attr)for(f in a.a_attr)a.a_attr.hasOwnProperty(f)&&(m.a_attr[f]=a.a_attr[f]);for(a&&a.children&&a.children===!0&&(m.state.loaded=!1,m.children=[],m.children_d=[]),k[m.id]=m,f=0,i=m.children.length;i>f;f++)j=r(k[m.children[f]],m.id,d),l=k[j],m.children_d.push(j),l.children_d.length&&(m.children_d=m.children_d.concat(l.children_d));return delete a.data,delete a.children,k[m.id].original=a,m.state.selected&&g.push(m.id),m.id},s=function(a,c,d){d=d?d.concat():[],c&&d.unshift(c);var e=!1,f,l,m,n,o;do e="j"+i+"_"+ ++j;while(k[e]);o={id:!1,text:"string"==typeof a?a:"",icon:"object"==typeof a&&a.icon!==b?a.icon:!0,parent:c,parents:d,children:[],children_d:[],data:null,state:{},li_attr:{id:!1},a_attr:{href:"#"},original:!1};for(f in h)h.hasOwnProperty(f)&&(o.state[f]=h[f]);if(a&&a.id&&(o.id=a.id.toString()),a&&a.text&&(o.text=a.text),a&&a.data&&a.data.jstree&&a.data.jstree.icon&&(o.icon=a.data.jstree.icon),(o.icon===b||null===o.icon||""===o.icon)&&(o.icon=!0),a&&a.data&&(o.data=a.data,a.data.jstree))for(f in a.data.jstree)a.data.jstree.hasOwnProperty(f)&&(o.state[f]=a.data.jstree[f]);if(a&&"object"==typeof a.state)for(f in a.state)a.state.hasOwnProperty(f)&&(o.state[f]=a.state[f]);if(a&&"object"==typeof a.li_attr)for(f in a.li_attr)a.li_attr.hasOwnProperty(f)&&(o.li_attr[f]=a.li_attr[f]);if(o.li_attr.id&&!o.id&&(o.id=o.li_attr.id.toString()),o.id||(o.id=e),o.li_attr.id||(o.li_attr.id=o.id),a&&"object"==typeof a.a_attr)for(f in a.a_attr)a.a_attr.hasOwnProperty(f)&&(o.a_attr[f]=a.a_attr[f]);if(a&&a.children&&a.children.length){for(f=0,l=a.children.length;l>f;f++)m=s(a.children[f],o.id,d),n=k[m],o.children.push(m),n.children_d.length&&(o.children_d=o.children_d.concat(n.children_d));o.children_d=o.children_d.concat(o.children)}return a&&a.children&&a.children===!0&&(o.state.loaded=!1,o.children=[],o.children_d=[]),delete a.data,delete a.children,o.original=a,k[o.id]=o,o.state.selected&&g.push(o.id),o.id};if(c.length&&c[0].id!==b&&c[0].parent!==b){for(o=0,p=c.length;p>o;o++)c[o].children||(c[o].children=[]),c[o].state||(c[o].state={}),k[c[o].id.toString()]=c[o];for(o=0,p=c.length;p>o;o++)k[c[o].parent.toString()]?(k[c[o].parent.toString()].children.push(c[o].id.toString()),l.children_d.push(c[o].id.toString())):(this._data.core.last_error={error:"parse",plugin:"core",id:"core_07",reason:"Node with invalid parent",data:JSON.stringify({id:c[o].id.toString(),parent:c[o].parent.toString()})},this.settings.core.error.call(this,this._data.core.last_error));for(o=0,p=l.children.length;p>o;o++)n=r(k[l.children[o]],d,l.parents.concat()),f.push(n),k[n].children_d.length&&(f=f.concat(k[n].children_d));for(o=0,p=l.parents.length;p>o;o++)k[l.parents[o]].children_d=k[l.parents[o]].children_d.concat(f);q={cnt:j,mod:k,sel:m,par:d,dpc:f,add:g}}else{for(o=0,p=c.length;p>o;o++)n=s(c[o],d,l.parents.concat()),n&&(e.push(n),f.push(n),k[n].children_d.length&&(f=f.concat(k[n].children_d)));for(l.children=e,l.children_d=f,o=0,p=l.parents.length;p>o;o++)k[l.parents[o]].children_d=k[l.parents[o]].children_d.concat(f);q={cnt:j,mod:k,sel:m,par:d,dpc:f,add:g}}return"undefined"!=typeof window&&"undefined"!=typeof window.document?q:void postMessage(q)},i=function(b,c){if(null!==this.element){this._cnt=b.cnt;var e,f=this._model.data;for(e in f)f.hasOwnProperty(e)&&f[e].state&&f[e].state.loading&&b.mod[e]&&(b.mod[e].state.loading=!0);if(this._model.data=b.mod,c){var g,h=b.add,i=b.sel,j=this._data.core.selected.slice();if(f=this._model.data,i.length!==j.length||a.vakata.array_unique(i.concat(j)).length!==i.length){for(e=0,g=i.length;g>e;e++)-1===a.inArray(i[e],h)&&-1===a.inArray(i[e],j)&&(f[i[e]].state.selected=!1);for(e=0,g=j.length;g>e;e++)-1===a.inArray(j[e],i)&&(f[j[e]].state.selected=!0)}}b.add.length&&(this._data.core.selected=this._data.core.selected.concat(b.add)),this.trigger("model",{nodes:b.dpc,parent:b.par}),b.par!==a.jstree.root?(this._node_changed(b.par),this.redraw()):this.redraw(!0),b.add.length&&this.trigger("changed",{action:"model",selected:this._data.core.selected}),d.call(this,!0)}};if(this.settings.core.worker&&window.Blob&&window.URL&&window.Worker)try{null===this._wrk&&(this._wrk=window.URL.createObjectURL(new window.Blob(["self.onmessage = "+h.toString()],{type:"text/javascript"}))),!this._data.core.working||e?(this._data.core.working=!0,f=new window.Worker(this._wrk),f.onmessage=a.proxy(function(a){i.call(this,a.data,!0);try{f.terminate(),f=null}catch(b){}this._data.core.worker_queue.length?this._append_json_data.apply(this,this._data.core.worker_queue.shift()):this._data.core.working=!1},this),g.par?f.postMessage(g):this._data.core.worker_queue.length?this._append_json_data.apply(this,this._data.core.worker_queue.shift()):this._data.core.working=!1):this._data.core.worker_queue.push([b,c,d,!0])}catch(j){i.call(this,h(g),!1),this._data.core.worker_queue.length?this._append_json_data.apply(this,this._data.core.worker_queue.shift()):this._data.core.working=!1}else i.call(this,h(g),!1)}},_parse_model_from_html:function(c,d,e){e=e?[].concat(e):[],d&&e.unshift(d);var f,g,h=this._model.data,i={id:!1,text:!1,icon:!0,parent:d,parents:e,children:[],children_d:[],data:null,state:{},li_attr:{id:!1},a_attr:{href:"#"},original:!1},j,k,l;for(j in this._model.default_state)this._model.default_state.hasOwnProperty(j)&&(i.state[j]=this._model.default_state[j]);if(k=a.vakata.attributes(c,!0),a.each(k,function(b,c){return c=a.trim(c),c.length?(i.li_attr[b]=c,void("id"===b&&(i.id=c.toString()))):!0}),k=c.children("a").first(),k.length&&(k=a.vakata.attributes(k,!0),a.each(k,function(b,c){c=a.trim(c),c.length&&(i.a_attr[b]=c)})),k=c.children("a").first().length?c.children("a").first().clone():c.clone(),k.children("ins, i, ul").remove(),k=k.html(),k=a("<div />").html(k),i.text=this.settings.core.force_text?k.text():k.html(),k=c.data(),i.data=k?a.extend(!0,{},k):null,i.state.opened=c.hasClass("jstree-open"),i.state.selected=c.children("a").hasClass("jstree-clicked"),i.state.disabled=c.children("a").hasClass("jstree-disabled"),i.data&&i.data.jstree)for(j in i.data.jstree)i.data.jstree.hasOwnProperty(j)&&(i.state[j]=i.data.jstree[j]);k=c.children("a").children(".jstree-themeicon"),k.length&&(i.icon=k.hasClass("jstree-themeicon-hidden")?!1:k.attr("rel")),i.state.icon!==b&&(i.icon=i.state.icon),(i.icon===b||null===i.icon||""===i.icon)&&(i.icon=!0),k=c.children("ul").children("li");do l="j"+this._id+"_"+ ++this._cnt;while(h[l]);return i.id=i.li_attr.id?i.li_attr.id.toString():l,k.length?(k.each(a.proxy(function(b,c){f=this._parse_model_from_html(a(c),i.id,e),g=this._model.data[f],i.children.push(f),g.children_d.length&&(i.children_d=i.children_d.concat(g.children_d))},this)),i.children_d=i.children_d.concat(i.children)):c.hasClass("jstree-closed")&&(i.state.loaded=!1),i.li_attr["class"]&&(i.li_attr["class"]=i.li_attr["class"].replace("jstree-closed","").replace("jstree-open","")),i.a_attr["class"]&&(i.a_attr["class"]=i.a_attr["class"].replace("jstree-clicked","").replace("jstree-disabled","")),h[i.id]=i,i.state.selected&&this._data.core.selected.push(i.id),i.id},_parse_model_from_flat_json:function(a,c,d){d=d?d.concat():[],c&&d.unshift(c);var e=a.id.toString(),f=this._model.data,g=this._model.default_state,h,i,j,k,l={id:e,text:a.text||"",icon:a.icon!==b?a.icon:!0,parent:c,parents:d,children:a.children||[],children_d:a.children_d||[],data:a.data,state:{},li_attr:{id:!1},a_attr:{href:"#"},original:!1};for(h in g)g.hasOwnProperty(h)&&(l.state[h]=g[h]);if(a&&a.data&&a.data.jstree&&a.data.jstree.icon&&(l.icon=a.data.jstree.icon),(l.icon===b||null===l.icon||""===l.icon)&&(l.icon=!0),a&&a.data&&(l.data=a.data,a.data.jstree))for(h in a.data.jstree)a.data.jstree.hasOwnProperty(h)&&(l.state[h]=a.data.jstree[h]);if(a&&"object"==typeof a.state)for(h in a.state)a.state.hasOwnProperty(h)&&(l.state[h]=a.state[h]);if(a&&"object"==typeof a.li_attr)for(h in a.li_attr)a.li_attr.hasOwnProperty(h)&&(l.li_attr[h]=a.li_attr[h]);if(l.li_attr.id||(l.li_attr.id=e),a&&"object"==typeof a.a_attr)for(h in a.a_attr)a.a_attr.hasOwnProperty(h)&&(l.a_attr[h]=a.a_attr[h]);for(a&&a.children&&a.children===!0&&(l.state.loaded=!1,l.children=[],l.children_d=[]),f[l.id]=l,h=0,i=l.children.length;i>h;h++)j=this._parse_model_from_flat_json(f[l.children[h]],l.id,d),k=f[j],l.children_d.push(j),k.children_d.length&&(l.children_d=l.children_d.concat(k.children_d));return delete a.data,delete a.children,f[l.id].original=a,l.state.selected&&this._data.core.selected.push(l.id),l.id},_parse_model_from_json:function(a,c,d){d=d?d.concat():[],c&&d.unshift(c);var e=!1,f,g,h,i,j=this._model.data,k=this._model.default_state,l;do e="j"+this._id+"_"+ ++this._cnt;while(j[e]);l={id:!1,text:"string"==typeof a?a:"",icon:"object"==typeof a&&a.icon!==b?a.icon:!0,parent:c,parents:d,children:[],children_d:[],data:null,state:{},li_attr:{id:!1},a_attr:{href:"#"},original:!1};for(f in k)k.hasOwnProperty(f)&&(l.state[f]=k[f]);if(a&&a.id&&(l.id=a.id.toString()),a&&a.text&&(l.text=a.text),a&&a.data&&a.data.jstree&&a.data.jstree.icon&&(l.icon=a.data.jstree.icon),(l.icon===b||null===l.icon||""===l.icon)&&(l.icon=!0),a&&a.data&&(l.data=a.data,a.data.jstree))for(f in a.data.jstree)a.data.jstree.hasOwnProperty(f)&&(l.state[f]=a.data.jstree[f]);if(a&&"object"==typeof a.state)for(f in a.state)a.state.hasOwnProperty(f)&&(l.state[f]=a.state[f]);if(a&&"object"==typeof a.li_attr)for(f in a.li_attr)a.li_attr.hasOwnProperty(f)&&(l.li_attr[f]=a.li_attr[f]);if(l.li_attr.id&&!l.id&&(l.id=l.li_attr.id.toString()),
l.id||(l.id=e),l.li_attr.id||(l.li_attr.id=l.id),a&&"object"==typeof a.a_attr)for(f in a.a_attr)a.a_attr.hasOwnProperty(f)&&(l.a_attr[f]=a.a_attr[f]);if(a&&a.children&&a.children.length){for(f=0,g=a.children.length;g>f;f++)h=this._parse_model_from_json(a.children[f],l.id,d),i=j[h],l.children.push(h),i.children_d.length&&(l.children_d=l.children_d.concat(i.children_d));l.children_d=l.children_d.concat(l.children)}return a&&a.children&&a.children===!0&&(l.state.loaded=!1,l.children=[],l.children_d=[]),delete a.data,delete a.children,l.original=a,j[l.id]=l,l.state.selected&&this._data.core.selected.push(l.id),l.id},_redraw:function(){var b=this._model.force_full_redraw?this._model.data[a.jstree.root].children.concat([]):this._model.changed.concat([]),c=i.createElement("UL"),d,e,f,g=this._data.core.focused;for(e=0,f=b.length;f>e;e++)d=this.redraw_node(b[e],!0,this._model.force_full_redraw),d&&this._model.force_full_redraw&&c.appendChild(d);this._model.force_full_redraw&&(c.className=this.get_container_ul()[0].className,c.setAttribute("role","group"),this.element.empty().append(c)),null!==g&&this.settings.core.restore_focus&&(d=this.get_node(g,!0),d&&d.length&&d.children(".jstree-anchor")[0]!==i.activeElement?d.children(".jstree-anchor").focus():this._data.core.focused=null),this._model.force_full_redraw=!1,this._model.changed=[],this.trigger("redraw",{nodes:b})},redraw:function(a){a&&(this._model.force_full_redraw=!0),this._redraw()},draw_children:function(b){var c=this.get_node(b),d=!1,e=!1,f=!1,g=i;if(!c)return!1;if(c.id===a.jstree.root)return this.redraw(!0);if(b=this.get_node(b,!0),!b||!b.length)return!1;if(b.children(".jstree-children").remove(),b=b[0],c.children.length&&c.state.loaded){for(f=g.createElement("UL"),f.setAttribute("role","group"),f.className="jstree-children",d=0,e=c.children.length;e>d;d++)f.appendChild(this.redraw_node(c.children[d],!0,!0));b.appendChild(f)}},redraw_node:function(b,c,d,e){var f=this.get_node(b),g=!1,h=!1,j=!1,k=!1,l=!1,m=!1,n="",o=i,p=this._model.data,q=!1,r=!1,s=null,t=0,u=0,v=!1,w=!1;if(!f)return!1;if(f.id===a.jstree.root)return this.redraw(!0);if(c=c||0===f.children.length,b=i.querySelector?this.element[0].querySelector("#"+(-1!=="0123456789".indexOf(f.id[0])?"\\3"+f.id[0]+" "+f.id.substr(1).replace(a.jstree.idregex,"\\$&"):f.id.replace(a.jstree.idregex,"\\$&"))):i.getElementById(f.id))b=a(b),d||(g=b.parent().parent()[0],g===this.element[0]&&(g=null),h=b.index()),c||!f.children.length||b.children(".jstree-children").length||(c=!0),c||(j=b.children(".jstree-children")[0]),q=b.children(".jstree-anchor")[0]===i.activeElement,b.remove();else if(c=!0,!d){if(g=f.parent!==a.jstree.root?a("#"+f.parent.replace(a.jstree.idregex,"\\$&"),this.element)[0]:null,!(null===g||g&&p[f.parent].state.opened))return!1;h=a.inArray(f.id,null===g?p[a.jstree.root].children:p[f.parent].children)}b=this._data.core.node.cloneNode(!0),n="jstree-node ";for(k in f.li_attr)if(f.li_attr.hasOwnProperty(k)){if("id"===k)continue;"class"!==k?b.setAttribute(k,f.li_attr[k]):n+=f.li_attr[k]}for(f.a_attr.id||(f.a_attr.id=f.id+"_anchor"),b.setAttribute("aria-selected",!!f.state.selected),b.setAttribute("aria-level",f.parents.length),b.setAttribute("aria-labelledby",f.a_attr.id),f.state.disabled&&b.setAttribute("aria-disabled",!0),k=0,l=f.children.length;l>k;k++)if(!p[f.children[k]].state.hidden){v=!0;break}if(null!==f.parent&&p[f.parent]&&!f.state.hidden&&(k=a.inArray(f.id,p[f.parent].children),w=f.id,-1!==k))for(k++,l=p[f.parent].children.length;l>k;k++)if(p[p[f.parent].children[k]].state.hidden||(w=p[f.parent].children[k]),w!==f.id)break;f.state.hidden&&(n+=" jstree-hidden"),f.state.loading&&(n+=" jstree-loading"),f.state.loaded&&!v?n+=" jstree-leaf":(n+=f.state.opened&&f.state.loaded?" jstree-open":" jstree-closed",b.setAttribute("aria-expanded",f.state.opened&&f.state.loaded)),w===f.id&&(n+=" jstree-last"),b.id=f.id,b.className=n,n=(f.state.selected?" jstree-clicked":"")+(f.state.disabled?" jstree-disabled":"");for(l in f.a_attr)if(f.a_attr.hasOwnProperty(l)){if("href"===l&&"#"===f.a_attr[l])continue;"class"!==l?b.childNodes[1].setAttribute(l,f.a_attr[l]):n+=" "+f.a_attr[l]}if(n.length&&(b.childNodes[1].className="jstree-anchor "+n),(f.icon&&f.icon!==!0||f.icon===!1)&&(f.icon===!1?b.childNodes[1].childNodes[0].className+=" jstree-themeicon-hidden":-1===f.icon.indexOf("/")&&-1===f.icon.indexOf(".")?b.childNodes[1].childNodes[0].className+=" "+f.icon+" jstree-themeicon-custom":(b.childNodes[1].childNodes[0].style.backgroundImage='url("'+f.icon+'")',b.childNodes[1].childNodes[0].style.backgroundPosition="center center",b.childNodes[1].childNodes[0].style.backgroundSize="auto",b.childNodes[1].childNodes[0].className+=" jstree-themeicon-custom")),this.settings.core.force_text?b.childNodes[1].appendChild(o.createTextNode(f.text)):b.childNodes[1].innerHTML+=f.text,c&&f.children.length&&(f.state.opened||e)&&f.state.loaded){for(m=o.createElement("UL"),m.setAttribute("role","group"),m.className="jstree-children",k=0,l=f.children.length;l>k;k++)m.appendChild(this.redraw_node(f.children[k],c,!0));b.appendChild(m)}if(j&&b.appendChild(j),!d){for(g||(g=this.element[0]),k=0,l=g.childNodes.length;l>k;k++)if(g.childNodes[k]&&g.childNodes[k].className&&-1!==g.childNodes[k].className.indexOf("jstree-children")){s=g.childNodes[k];break}s||(s=o.createElement("UL"),s.setAttribute("role","group"),s.className="jstree-children",g.appendChild(s)),g=s,h<g.childNodes.length?g.insertBefore(b,g.childNodes[h]):g.appendChild(b),q&&(t=this.element[0].scrollTop,u=this.element[0].scrollLeft,b.childNodes[1].focus(),this.element[0].scrollTop=t,this.element[0].scrollLeft=u)}return f.state.opened&&!f.state.loaded&&(f.state.opened=!1,setTimeout(a.proxy(function(){this.open_node(f.id,!1,0)},this),0)),b},open_node:function(c,d,e){var f,g,h,i;if(a.isArray(c)){for(c=c.slice(),f=0,g=c.length;g>f;f++)this.open_node(c[f],d,e);return!0}return c=this.get_node(c),c&&c.id!==a.jstree.root?(e=e===b?this.settings.core.animation:e,this.is_closed(c)?this.is_loaded(c)?(h=this.get_node(c,!0),i=this,h.length&&(e&&h.children(".jstree-children").length&&h.children(".jstree-children").stop(!0,!0),c.children.length&&!this._firstChild(h.children(".jstree-children")[0])&&this.draw_children(c),e?(this.trigger("before_open",{node:c}),h.children(".jstree-children").css("display","none").end().removeClass("jstree-closed").addClass("jstree-open").attr("aria-expanded",!0).children(".jstree-children").stop(!0,!0).slideDown(e,function(){this.style.display="",i.element&&i.trigger("after_open",{node:c})})):(this.trigger("before_open",{node:c}),h[0].className=h[0].className.replace("jstree-closed","jstree-open"),h[0].setAttribute("aria-expanded",!0))),c.state.opened=!0,d&&d.call(this,c,!0),h.length||this.trigger("before_open",{node:c}),this.trigger("open_node",{node:c}),e&&h.length||this.trigger("after_open",{node:c}),!0):this.is_loading(c)?setTimeout(a.proxy(function(){this.open_node(c,d,e)},this),500):void this.load_node(c,function(a,b){return b?this.open_node(a,d,e):d?d.call(this,a,!1):!1}):(d&&d.call(this,c,!1),!1)):!1},_open_to:function(b){if(b=this.get_node(b),!b||b.id===a.jstree.root)return!1;var c,d,e=b.parents;for(c=0,d=e.length;d>c;c+=1)c!==a.jstree.root&&this.open_node(e[c],!1,0);return a("#"+b.id.replace(a.jstree.idregex,"\\$&"),this.element)},close_node:function(c,d){var e,f,g,h;if(a.isArray(c)){for(c=c.slice(),e=0,f=c.length;f>e;e++)this.close_node(c[e],d);return!0}return c=this.get_node(c),c&&c.id!==a.jstree.root?this.is_closed(c)?!1:(d=d===b?this.settings.core.animation:d,g=this,h=this.get_node(c,!0),c.state.opened=!1,this.trigger("close_node",{node:c}),void(h.length?d?h.children(".jstree-children").attr("style","display:block !important").end().removeClass("jstree-open").addClass("jstree-closed").attr("aria-expanded",!1).children(".jstree-children").stop(!0,!0).slideUp(d,function(){this.style.display="",h.children(".jstree-children").remove(),g.element&&g.trigger("after_close",{node:c})}):(h[0].className=h[0].className.replace("jstree-open","jstree-closed"),h.attr("aria-expanded",!1).children(".jstree-children").remove(),this.trigger("after_close",{node:c})):this.trigger("after_close",{node:c}))):!1},toggle_node:function(b){var c,d;if(a.isArray(b)){for(b=b.slice(),c=0,d=b.length;d>c;c++)this.toggle_node(b[c]);return!0}return this.is_closed(b)?this.open_node(b):this.is_open(b)?this.close_node(b):void 0},open_all:function(b,c,d){if(b||(b=a.jstree.root),b=this.get_node(b),!b)return!1;var e=b.id===a.jstree.root?this.get_container_ul():this.get_node(b,!0),f,g,h;if(!e.length){for(f=0,g=b.children_d.length;g>f;f++)this.is_closed(this._model.data[b.children_d[f]])&&(this._model.data[b.children_d[f]].state.opened=!0);return this.trigger("open_all",{node:b})}d=d||e,h=this,e=this.is_closed(b)?e.find(".jstree-closed").addBack():e.find(".jstree-closed"),e.each(function(){h.open_node(this,function(a,b){b&&this.is_parent(a)&&this.open_all(a,c,d)},c||0)}),0===d.find(".jstree-closed").length&&this.trigger("open_all",{node:this.get_node(d)})},close_all:function(b,c){if(b||(b=a.jstree.root),b=this.get_node(b),!b)return!1;var d=b.id===a.jstree.root?this.get_container_ul():this.get_node(b,!0),e=this,f,g;for(d.length&&(d=this.is_open(b)?d.find(".jstree-open").addBack():d.find(".jstree-open"),a(d.get().reverse()).each(function(){e.close_node(this,c||0)})),f=0,g=b.children_d.length;g>f;f++)this._model.data[b.children_d[f]].state.opened=!1;this.trigger("close_all",{node:b})},is_disabled:function(a){return a=this.get_node(a),a&&a.state&&a.state.disabled},enable_node:function(b){var c,d;if(a.isArray(b)){for(b=b.slice(),c=0,d=b.length;d>c;c++)this.enable_node(b[c]);return!0}return b=this.get_node(b),b&&b.id!==a.jstree.root?(b.state.disabled=!1,this.get_node(b,!0).children(".jstree-anchor").removeClass("jstree-disabled").attr("aria-disabled",!1),void this.trigger("enable_node",{node:b})):!1},disable_node:function(b){var c,d;if(a.isArray(b)){for(b=b.slice(),c=0,d=b.length;d>c;c++)this.disable_node(b[c]);return!0}return b=this.get_node(b),b&&b.id!==a.jstree.root?(b.state.disabled=!0,this.get_node(b,!0).children(".jstree-anchor").addClass("jstree-disabled").attr("aria-disabled",!0),void this.trigger("disable_node",{node:b})):!1},is_hidden:function(a){return a=this.get_node(a),a.state.hidden===!0},hide_node:function(b,c){var d,e;if(a.isArray(b)){for(b=b.slice(),d=0,e=b.length;e>d;d++)this.hide_node(b[d],!0);return c||this.redraw(),!0}return b=this.get_node(b),b&&b.id!==a.jstree.root?void(b.state.hidden||(b.state.hidden=!0,this._node_changed(b.parent),c||this.redraw(),this.trigger("hide_node",{node:b}))):!1},show_node:function(b,c){var d,e;if(a.isArray(b)){for(b=b.slice(),d=0,e=b.length;e>d;d++)this.show_node(b[d],!0);return c||this.redraw(),!0}return b=this.get_node(b),b&&b.id!==a.jstree.root?void(b.state.hidden&&(b.state.hidden=!1,this._node_changed(b.parent),c||this.redraw(),this.trigger("show_node",{node:b}))):!1},hide_all:function(b){var c,d=this._model.data,e=[];for(c in d)d.hasOwnProperty(c)&&c!==a.jstree.root&&!d[c].state.hidden&&(d[c].state.hidden=!0,e.push(c));return this._model.force_full_redraw=!0,b||this.redraw(),this.trigger("hide_all",{nodes:e}),e},show_all:function(b){var c,d=this._model.data,e=[];for(c in d)d.hasOwnProperty(c)&&c!==a.jstree.root&&d[c].state.hidden&&(d[c].state.hidden=!1,e.push(c));return this._model.force_full_redraw=!0,b||this.redraw(),this.trigger("show_all",{nodes:e}),e},activate_node:function(a,c){if(this.is_disabled(a))return!1;if(c&&"object"==typeof c||(c={}),this._data.core.last_clicked=this._data.core.last_clicked&&this._data.core.last_clicked.id!==b?this.get_node(this._data.core.last_clicked.id):null,this._data.core.last_clicked&&!this._data.core.last_clicked.state.selected&&(this._data.core.last_clicked=null),!this._data.core.last_clicked&&this._data.core.selected.length&&(this._data.core.last_clicked=this.get_node(this._data.core.selected[this._data.core.selected.length-1])),this.settings.core.multiple&&(c.metaKey||c.ctrlKey||c.shiftKey)&&(!c.shiftKey||this._data.core.last_clicked&&this.get_parent(a)&&this.get_parent(a)===this._data.core.last_clicked.parent))if(c.shiftKey){var d=this.get_node(a).id,e=this._data.core.last_clicked.id,f=this.get_node(this._data.core.last_clicked.parent).children,g=!1,h,i;for(h=0,i=f.length;i>h;h+=1)f[h]===d&&(g=!g),f[h]===e&&(g=!g),this.is_disabled(f[h])||!g&&f[h]!==d&&f[h]!==e?this.deselect_node(f[h],!0,c):this.is_hidden(f[h])||this.select_node(f[h],!0,!1,c);this.trigger("changed",{action:"select_node",node:this.get_node(a),selected:this._data.core.selected,event:c})}else this.is_selected(a)?this.deselect_node(a,!1,c):this.select_node(a,!1,!1,c);else!this.settings.core.multiple&&(c.metaKey||c.ctrlKey||c.shiftKey)&&this.is_selected(a)?this.deselect_node(a,!1,c):(this.deselect_all(!0),this.select_node(a,!1,!1,c),this._data.core.last_clicked=this.get_node(a));this.trigger("activate_node",{node:this.get_node(a),event:c})},hover_node:function(a){if(a=this.get_node(a,!0),!a||!a.length||a.children(".jstree-hovered").length)return!1;var b=this.element.find(".jstree-hovered"),c=this.element;b&&b.length&&this.dehover_node(b),a.children(".jstree-anchor").addClass("jstree-hovered"),this.trigger("hover_node",{node:this.get_node(a)}),setTimeout(function(){c.attr("aria-activedescendant",a[0].id)},0)},dehover_node:function(a){return a=this.get_node(a,!0),a&&a.length&&a.children(".jstree-hovered").length?(a.children(".jstree-anchor").removeClass("jstree-hovered"),void this.trigger("dehover_node",{node:this.get_node(a)})):!1},select_node:function(b,c,d,e){var f,g,h,i;if(a.isArray(b)){for(b=b.slice(),g=0,h=b.length;h>g;g++)this.select_node(b[g],c,d,e);return!0}return b=this.get_node(b),b&&b.id!==a.jstree.root?(f=this.get_node(b,!0),void(b.state.selected||(b.state.selected=!0,this._data.core.selected.push(b.id),d||(f=this._open_to(b)),f&&f.length&&f.attr("aria-selected",!0).children(".jstree-anchor").addClass("jstree-clicked"),this.trigger("select_node",{node:b,selected:this._data.core.selected,event:e}),c||this.trigger("changed",{action:"select_node",node:b,selected:this._data.core.selected,event:e})))):!1},deselect_node:function(b,c,d){var e,f,g;if(a.isArray(b)){for(b=b.slice(),e=0,f=b.length;f>e;e++)this.deselect_node(b[e],c,d);return!0}return b=this.get_node(b),b&&b.id!==a.jstree.root?(g=this.get_node(b,!0),void(b.state.selected&&(b.state.selected=!1,this._data.core.selected=a.vakata.array_remove_item(this._data.core.selected,b.id),g.length&&g.attr("aria-selected",!1).children(".jstree-anchor").removeClass("jstree-clicked"),this.trigger("deselect_node",{node:b,selected:this._data.core.selected,event:d}),c||this.trigger("changed",{action:"deselect_node",node:b,selected:this._data.core.selected,event:d})))):!1},select_all:function(b){var c=this._data.core.selected.concat([]),d,e;for(this._data.core.selected=this._model.data[a.jstree.root].children_d.concat(),d=0,e=this._data.core.selected.length;e>d;d++)this._model.data[this._data.core.selected[d]]&&(this._model.data[this._data.core.selected[d]].state.selected=!0);this.redraw(!0),this.trigger("select_all",{selected:this._data.core.selected}),b||this.trigger("changed",{action:"select_all",selected:this._data.core.selected,old_selection:c})},deselect_all:function(a){var b=this._data.core.selected.concat([]),c,d;for(c=0,d=this._data.core.selected.length;d>c;c++)this._model.data[this._data.core.selected[c]]&&(this._model.data[this._data.core.selected[c]].state.selected=!1);this._data.core.selected=[],this.element.find(".jstree-clicked").removeClass("jstree-clicked").parent().attr("aria-selected",!1),this.trigger("deselect_all",{selected:this._data.core.selected,node:b}),a||this.trigger("changed",{action:"deselect_all",selected:this._data.core.selected,old_selection:b})},is_selected:function(b){return b=this.get_node(b),b&&b.id!==a.jstree.root?b.state.selected:!1},get_selected:function(b){return b?a.map(this._data.core.selected,a.proxy(function(a){return this.get_node(a)},this)):this._data.core.selected.slice()},get_top_selected:function(b){var c=this.get_selected(!0),d={},e,f,g,h;for(e=0,f=c.length;f>e;e++)d[c[e].id]=c[e];for(e=0,f=c.length;f>e;e++)for(g=0,h=c[e].children_d.length;h>g;g++)d[c[e].children_d[g]]&&delete d[c[e].children_d[g]];c=[];for(e in d)d.hasOwnProperty(e)&&c.push(e);return b?a.map(c,a.proxy(function(a){return this.get_node(a)},this)):c},get_bottom_selected:function(b){var c=this.get_selected(!0),d=[],e,f;for(e=0,f=c.length;f>e;e++)c[e].children.length||d.push(c[e].id);return b?a.map(d,a.proxy(function(a){return this.get_node(a)},this)):d},get_state:function(){var b={core:{open:[],loaded:[],scroll:{left:this.element.scrollLeft(),top:this.element.scrollTop()},selected:[]}},c;for(c in this._model.data)this._model.data.hasOwnProperty(c)&&c!==a.jstree.root&&(this._model.data[c].state.loaded&&this.settings.core.loaded_state&&b.core.loaded.push(c),this._model.data[c].state.opened&&b.core.open.push(c),this._model.data[c].state.selected&&b.core.selected.push(c));return b},set_state:function(c,d){if(c){if(c.core&&c.core.selected&&c.core.initial_selection===b&&(c.core.initial_selection=this._data.core.selected.concat([]).sort().join(",")),c.core){var e,f,g,h,i;if(c.core.loaded)return this.settings.core.loaded_state&&a.isArray(c.core.loaded)&&c.core.loaded.length?this._load_nodes(c.core.loaded,function(a){delete c.core.loaded,this.set_state(c,d)}):(delete c.core.loaded,this.set_state(c,d)),!1;if(c.core.open)return a.isArray(c.core.open)&&c.core.open.length?this._load_nodes(c.core.open,function(a){this.open_node(a,!1,0),delete c.core.open,this.set_state(c,d)}):(delete c.core.open,this.set_state(c,d)),!1;if(c.core.scroll)return c.core.scroll&&c.core.scroll.left!==b&&this.element.scrollLeft(c.core.scroll.left),c.core.scroll&&c.core.scroll.top!==b&&this.element.scrollTop(c.core.scroll.top),delete c.core.scroll,this.set_state(c,d),!1;if(c.core.selected)return h=this,(c.core.initial_selection===b||c.core.initial_selection===this._data.core.selected.concat([]).sort().join(","))&&(this.deselect_all(),a.each(c.core.selected,function(a,b){h.select_node(b,!1,!0)})),delete c.core.initial_selection,delete c.core.selected,this.set_state(c,d),!1;for(i in c)c.hasOwnProperty(i)&&"core"!==i&&-1===a.inArray(i,this.settings.plugins)&&delete c[i];if(a.isEmptyObject(c.core))return delete c.core,this.set_state(c,d),!1}return a.isEmptyObject(c)?(c=null,d&&d.call(this),this.trigger("set_state"),!1):!0}return!1},refresh:function(b,c){this._data.core.state=c===!0?{}:this.get_state(),c&&a.isFunction(c)&&(this._data.core.state=c.call(this,this._data.core.state)),this._cnt=0,this._model.data={},this._model.data[a.jstree.root]={id:a.jstree.root,parent:null,parents:[],children:[],children_d:[],state:{loaded:!1}},this._data.core.selected=[],this._data.core.last_clicked=null,this._data.core.focused=null;var d=this.get_container_ul()[0].className;b||(this.element.html("<ul class='"+d+"' role='group'><li class='jstree-initial-node jstree-loading jstree-leaf jstree-last' role='treeitem' id='j"+this._id+"_loading'><i class='jstree-icon jstree-ocl'></i><a class='jstree-anchor' href='#'><i class='jstree-icon jstree-themeicon-hidden'></i>"+this.get_string("Loading ...")+"</a></li></ul>"),this.element.attr("aria-activedescendant","j"+this._id+"_loading")),this.load_node(a.jstree.root,function(b,c){c&&(this.get_container_ul()[0].className=d,this._firstChild(this.get_container_ul()[0])&&this.element.attr("aria-activedescendant",this._firstChild(this.get_container_ul()[0]).id),this.set_state(a.extend(!0,{},this._data.core.state),function(){this.trigger("refresh")})),this._data.core.state=null})},refresh_node:function(b){if(b=this.get_node(b),!b||b.id===a.jstree.root)return!1;var c=[],d=[],e=this._data.core.selected.concat([]);d.push(b.id),b.state.opened===!0&&c.push(b.id),this.get_node(b,!0).find(".jstree-open").each(function(){d.push(this.id),c.push(this.id)}),this._load_nodes(d,a.proxy(function(a){this.open_node(c,!1,0),this.select_node(e),this.trigger("refresh_node",{node:b,nodes:a})},this),!1,!0)},set_id:function(b,c){if(b=this.get_node(b),!b||b.id===a.jstree.root)return!1;var d,e,f=this._model.data,g=b.id;for(c=c.toString(),f[b.parent].children[a.inArray(b.id,f[b.parent].children)]=c,d=0,e=b.parents.length;e>d;d++)f[b.parents[d]].children_d[a.inArray(b.id,f[b.parents[d]].children_d)]=c;for(d=0,e=b.children.length;e>d;d++)f[b.children[d]].parent=c;for(d=0,e=b.children_d.length;e>d;d++)f[b.children_d[d]].parents[a.inArray(b.id,f[b.children_d[d]].parents)]=c;return d=a.inArray(b.id,this._data.core.selected),-1!==d&&(this._data.core.selected[d]=c),d=this.get_node(b.id,!0),d&&(d.attr("id",c),this.element.attr("aria-activedescendant")===b.id&&this.element.attr("aria-activedescendant",c)),delete f[b.id],b.id=c,b.li_attr.id=c,f[c]=b,this.trigger("set_id",{node:b,"new":b.id,old:g}),!0},get_text:function(b){return b=this.get_node(b),b&&b.id!==a.jstree.root?b.text:!1},set_text:function(b,c){var d,e;if(a.isArray(b)){for(b=b.slice(),d=0,e=b.length;e>d;d++)this.set_text(b[d],c);return!0}return b=this.get_node(b),b&&b.id!==a.jstree.root?(b.text=c,this.get_node(b,!0).length&&this.redraw_node(b.id),this.trigger("set_text",{obj:b,text:c}),!0):!1},get_json:function(b,c,d){if(b=this.get_node(b||a.jstree.root),!b)return!1;c&&c.flat&&!d&&(d=[]);var e={id:b.id,text:b.text,icon:this.get_icon(b),li_attr:a.extend(!0,{},b.li_attr),a_attr:a.extend(!0,{},b.a_attr),state:{},data:c&&c.no_data?!1:a.extend(!0,a.isArray(b.data)?[]:{},b.data)},f,g;if(c&&c.flat?e.parent=b.parent:e.children=[],c&&c.no_state)delete e.state;else for(f in b.state)b.state.hasOwnProperty(f)&&(e.state[f]=b.state[f]);if(c&&c.no_li_attr&&delete e.li_attr,c&&c.no_a_attr&&delete e.a_attr,c&&c.no_id&&(delete e.id,e.li_attr&&e.li_attr.id&&delete e.li_attr.id,e.a_attr&&e.a_attr.id&&delete e.a_attr.id),c&&c.flat&&b.id!==a.jstree.root&&d.push(e),!c||!c.no_children)for(f=0,g=b.children.length;g>f;f++)c&&c.flat?this.get_json(b.children[f],c,d):e.children.push(this.get_json(b.children[f],c));return c&&c.flat?d:b.id===a.jstree.root?e.children:e},create_node:function(c,d,e,f,g){if(null===c&&(c=a.jstree.root),c=this.get_node(c),!c)return!1;if(e=e===b?"last":e,!e.toString().match(/^(before|after)$/)&&!g&&!this.is_loaded(c))return this.load_node(c,function(){this.create_node(c,d,e,f,!0)});d||(d={text:this.get_string("New node")}),d="string"==typeof d?{text:d}:a.extend(!0,{},d),d.text===b&&(d.text=this.get_string("New node"));var h,i,j,k;switch(c.id===a.jstree.root&&("before"===e&&(e="first"),"after"===e&&(e="last")),e){case"before":h=this.get_node(c.parent),e=a.inArray(c.id,h.children),c=h;break;case"after":h=this.get_node(c.parent),e=a.inArray(c.id,h.children)+1,c=h;break;case"inside":case"first":e=0;break;case"last":e=c.children.length;break;default:e||(e=0)}if(e>c.children.length&&(e=c.children.length),d.id||(d.id=!0),!this.check("create_node",d,c,e))return this.settings.core.error.call(this,this._data.core.last_error),!1;if(d.id===!0&&delete d.id,d=this._parse_model_from_json(d,c.id,c.parents.concat()),!d)return!1;for(h=this.get_node(d),i=[],i.push(d),i=i.concat(h.children_d),this.trigger("model",{nodes:i,parent:c.id}),c.children_d=c.children_d.concat(i),j=0,k=c.parents.length;k>j;j++)this._model.data[c.parents[j]].children_d=this._model.data[c.parents[j]].children_d.concat(i);for(d=h,h=[],j=0,k=c.children.length;k>j;j++)h[j>=e?j+1:j]=c.children[j];return h[e]=d.id,c.children=h,this.redraw_node(c,!0),this.trigger("create_node",{node:this.get_node(d),parent:c.id,position:e}),f&&f.call(this,this.get_node(d)),d.id},rename_node:function(b,c){var d,e,f;if(a.isArray(b)){for(b=b.slice(),d=0,e=b.length;e>d;d++)this.rename_node(b[d],c);return!0}return b=this.get_node(b),b&&b.id!==a.jstree.root?(f=b.text,this.check("rename_node",b,this.get_parent(b),c)?(this.set_text(b,c),this.trigger("rename_node",{node:b,text:c,old:f}),!0):(this.settings.core.error.call(this,this._data.core.last_error),!1)):!1},delete_node:function(b){var c,d,e,f,g,h,i,j,k,l,m,n;if(a.isArray(b)){for(b=b.slice(),c=0,d=b.length;d>c;c++)this.delete_node(b[c]);return!0}if(b=this.get_node(b),!b||b.id===a.jstree.root)return!1;if(e=this.get_node(b.parent),f=a.inArray(b.id,e.children),l=!1,!this.check("delete_node",b,e,f))return this.settings.core.error.call(this,this._data.core.last_error),!1;for(-1!==f&&(e.children=a.vakata.array_remove(e.children,f)),g=b.children_d.concat([]),g.push(b.id),h=0,i=b.parents.length;i>h;h++)this._model.data[b.parents[h]].children_d=a.vakata.array_filter(this._model.data[b.parents[h]].children_d,function(b){return-1===a.inArray(b,g)});for(j=0,k=g.length;k>j;j++)if(this._model.data[g[j]].state.selected){l=!0;break}for(l&&(this._data.core.selected=a.vakata.array_filter(this._data.core.selected,function(b){return-1===a.inArray(b,g)})),this.trigger("delete_node",{node:b,parent:e.id}),l&&this.trigger("changed",{action:"delete_node",node:b,selected:this._data.core.selected,parent:e.id}),j=0,k=g.length;k>j;j++)delete this._model.data[g[j]];return-1!==a.inArray(this._data.core.focused,g)&&(this._data.core.focused=null,m=this.element[0].scrollTop,n=this.element[0].scrollLeft,e.id===a.jstree.root?this._model.data[a.jstree.root].children[0]&&this.get_node(this._model.data[a.jstree.root].children[0],!0).children(".jstree-anchor").focus():this.get_node(e,!0).children(".jstree-anchor").focus(),this.element[0].scrollTop=m,this.element[0].scrollLeft=n),this.redraw_node(e,!0),!0},check:function(b,c,d,e,f){c=c&&c.id?c:this.get_node(c),d=d&&d.id?d:this.get_node(d);var g=b.match(/^move_node|copy_node|create_node$/i)?d:c,h=this.settings.core.check_callback;return"move_node"!==b&&"copy_node"!==b||f&&f.is_multi||c.id!==d.id&&("move_node"!==b||a.inArray(c.id,d.children)!==e)&&-1===a.inArray(d.id,c.children_d)?(g&&g.data&&(g=g.data),g&&g.functions&&(g.functions[b]===!1||g.functions[b]===!0)?(g.functions[b]===!1&&(this._data.core.last_error={error:"check",plugin:"core",id:"core_02",reason:"Node data prevents function: "+b,data:JSON.stringify({chk:b,pos:e,obj:c&&c.id?c.id:!1,par:d&&d.id?d.id:!1})}),g.functions[b]):h===!1||a.isFunction(h)&&h.call(this,b,c,d,e,f)===!1||h&&h[b]===!1?(this._data.core.last_error={error:"check",plugin:"core",id:"core_03",reason:"User config for core.check_callback prevents function: "+b,data:JSON.stringify({chk:b,pos:e,obj:c&&c.id?c.id:!1,par:d&&d.id?d.id:!1})},!1):!0):(this._data.core.last_error={error:"check",plugin:"core",id:"core_01",reason:"Moving parent inside child",data:JSON.stringify({chk:b,pos:e,obj:c&&c.id?c.id:!1,par:d&&d.id?d.id:!1})},!1)},last_error:function(){return this._data.core.last_error},move_node:function(c,d,e,f,g,h,i){var j,k,l,m,n,o,p,q,r,s,t,u,v,w;if(d=this.get_node(d),e=e===b?0:e,!d)return!1;if(!e.toString().match(/^(before|after)$/)&&!g&&!this.is_loaded(d))return this.load_node(d,function(){this.move_node(c,d,e,f,!0,!1,i)});if(a.isArray(c)){if(1!==c.length){for(j=0,k=c.length;k>j;j++)(r=this.move_node(c[j],d,e,f,g,!1,i))&&(d=r,e="after");return this.redraw(),!0}c=c[0]}if(c=c&&c.id?c:this.get_node(c),!c||c.id===a.jstree.root)return!1;if(l=(c.parent||a.jstree.root).toString(),n=e.toString().match(/^(before|after)$/)&&d.id!==a.jstree.root?this.get_node(d.parent):d,o=i?i:this._model.data[c.id]?this:a.jstree.reference(c.id),p=!o||!o._id||this._id!==o._id,m=o&&o._id&&l&&o._model.data[l]&&o._model.data[l].children?a.inArray(c.id,o._model.data[l].children):-1,o&&o._id&&(c=o._model.data[c.id]),p)return(r=this.copy_node(c,d,e,f,g,!1,i))?(o&&o.delete_node(c),r):!1;switch(d.id===a.jstree.root&&("before"===e&&(e="first"),"after"===e&&(e="last")),e){case"before":e=a.inArray(d.id,n.children);break;case"after":e=a.inArray(d.id,n.children)+1;break;case"inside":case"first":e=0;break;case"last":e=n.children.length;break;default:e||(e=0)}if(e>n.children.length&&(e=n.children.length),!this.check("move_node",c,n,e,{core:!0,origin:i,is_multi:o&&o._id&&o._id!==this._id,is_foreign:!o||!o._id}))return this.settings.core.error.call(this,this._data.core.last_error),!1;if(c.parent===n.id){for(q=n.children.concat(),r=a.inArray(c.id,q),-1!==r&&(q=a.vakata.array_remove(q,r),e>r&&e--),r=[],s=0,t=q.length;t>s;s++)r[s>=e?s+1:s]=q[s];r[e]=c.id,n.children=r,this._node_changed(n.id),this.redraw(n.id===a.jstree.root)}else{for(r=c.children_d.concat(),r.push(c.id),s=0,t=c.parents.length;t>s;s++){for(q=[],w=o._model.data[c.parents[s]].children_d,u=0,v=w.length;v>u;u++)-1===a.inArray(w[u],r)&&q.push(w[u]);o._model.data[c.parents[s]].children_d=q}for(o._model.data[l].children=a.vakata.array_remove_item(o._model.data[l].children,c.id),s=0,t=n.parents.length;t>s;s++)this._model.data[n.parents[s]].children_d=this._model.data[n.parents[s]].children_d.concat(r);for(q=[],s=0,t=n.children.length;t>s;s++)q[s>=e?s+1:s]=n.children[s];for(q[e]=c.id,n.children=q,n.children_d.push(c.id),n.children_d=n.children_d.concat(c.children_d),c.parent=n.id,r=n.parents.concat(),r.unshift(n.id),w=c.parents.length,c.parents=r,r=r.concat(),s=0,t=c.children_d.length;t>s;s++)this._model.data[c.children_d[s]].parents=this._model.data[c.children_d[s]].parents.slice(0,-1*w),Array.prototype.push.apply(this._model.data[c.children_d[s]].parents,r);(l===a.jstree.root||n.id===a.jstree.root)&&(this._model.force_full_redraw=!0),this._model.force_full_redraw||(this._node_changed(l),this._node_changed(n.id)),h||this.redraw()}return f&&f.call(this,c,n,e),this.trigger("move_node",{node:c,parent:n.id,position:e,old_parent:l,old_position:m,is_multi:o&&o._id&&o._id!==this._id,is_foreign:!o||!o._id,old_instance:o,new_instance:this}),c.id},copy_node:function(c,d,e,f,g,h,i){var j,k,l,m,n,o,p,q,r,s,t;if(d=this.get_node(d),e=e===b?0:e,!d)return!1;if(!e.toString().match(/^(before|after)$/)&&!g&&!this.is_loaded(d))return this.load_node(d,function(){this.copy_node(c,d,e,f,!0,!1,i)});if(a.isArray(c)){if(1!==c.length){for(j=0,k=c.length;k>j;j++)(m=this.copy_node(c[j],d,e,f,g,!0,i))&&(d=m,e="after");return this.redraw(),!0}c=c[0]}if(c=c&&c.id?c:this.get_node(c),!c||c.id===a.jstree.root)return!1;switch(q=(c.parent||a.jstree.root).toString(),r=e.toString().match(/^(before|after)$/)&&d.id!==a.jstree.root?this.get_node(d.parent):d,s=i?i:this._model.data[c.id]?this:a.jstree.reference(c.id),t=!s||!s._id||this._id!==s._id,s&&s._id&&(c=s._model.data[c.id]),d.id===a.jstree.root&&("before"===e&&(e="first"),"after"===e&&(e="last")),e){case"before":e=a.inArray(d.id,r.children);break;case"after":e=a.inArray(d.id,r.children)+1;break;case"inside":case"first":e=0;break;case"last":e=r.children.length;break;default:e||(e=0)}if(e>r.children.length&&(e=r.children.length),!this.check("copy_node",c,r,e,{core:!0,origin:i,is_multi:s&&s._id&&s._id!==this._id,is_foreign:!s||!s._id}))return this.settings.core.error.call(this,this._data.core.last_error),!1;if(p=s?s.get_json(c,{no_id:!0,no_data:!0,no_state:!0}):c,!p)return!1;if(p.id===!0&&delete p.id,p=this._parse_model_from_json(p,r.id,r.parents.concat()),!p)return!1;for(m=this.get_node(p),c&&c.state&&c.state.loaded===!1&&(m.state.loaded=!1),l=[],l.push(p),l=l.concat(m.children_d),this.trigger("model",{nodes:l,parent:r.id}),n=0,o=r.parents.length;o>n;n++)this._model.data[r.parents[n]].children_d=this._model.data[r.parents[n]].children_d.concat(l);for(l=[],n=0,o=r.children.length;o>n;n++)l[n>=e?n+1:n]=r.children[n];return l[e]=m.id,r.children=l,r.children_d.push(m.id),r.children_d=r.children_d.concat(m.children_d),r.id===a.jstree.root&&(this._model.force_full_redraw=!0),this._model.force_full_redraw||this._node_changed(r.id),h||this.redraw(r.id===a.jstree.root),f&&f.call(this,m,r,e),this.trigger("copy_node",{node:m,original:c,parent:r.id,position:e,old_parent:q,old_position:s&&s._id&&q&&s._model.data[q]&&s._model.data[q].children?a.inArray(c.id,s._model.data[q].children):-1,is_multi:s&&s._id&&s._id!==this._id,is_foreign:!s||!s._id,old_instance:s,new_instance:this}),m.id},cut:function(b){if(b||(b=this._data.core.selected.concat()),a.isArray(b)||(b=[b]),!b.length)return!1;var c=[],g,h,i;for(h=0,i=b.length;i>h;h++)g=this.get_node(b[h]),g&&g.id&&g.id!==a.jstree.root&&c.push(g);
return c.length?(d=c,f=this,e="move_node",void this.trigger("cut",{node:b})):!1},copy:function(b){if(b||(b=this._data.core.selected.concat()),a.isArray(b)||(b=[b]),!b.length)return!1;var c=[],g,h,i;for(h=0,i=b.length;i>h;h++)g=this.get_node(b[h]),g&&g.id&&g.id!==a.jstree.root&&c.push(g);return c.length?(d=c,f=this,e="copy_node",void this.trigger("copy",{node:b})):!1},get_buffer:function(){return{mode:e,node:d,inst:f}},can_paste:function(){return e!==!1&&d!==!1},paste:function(a,b){return a=this.get_node(a),a&&e&&e.match(/^(copy_node|move_node)$/)&&d?(this[e](d,a,b,!1,!1,!1,f)&&this.trigger("paste",{parent:a.id,node:d,mode:e}),d=!1,e=!1,void(f=!1)):!1},clear_buffer:function(){d=!1,e=!1,f=!1,this.trigger("clear_buffer")},edit:function(b,c,d){var e,f,g,h,j,k,l,m,n,o=!1;return(b=this.get_node(b))?this.check("edit",b,this.get_parent(b))?(n=b,c="string"==typeof c?c:b.text,this.set_text(b,""),b=this._open_to(b),n.text=c,e=this._data.core.rtl,f=this.element.width(),this._data.core.focused=n.id,g=b.children(".jstree-anchor").focus(),h=a("<span>"),j=c,k=a("<div />",{css:{position:"absolute",top:"-200px",left:e?"0px":"-1000px",visibility:"hidden"}}).appendTo(i.body),l=a("<input />",{value:j,"class":"jstree-rename-input",css:{padding:"0",border:"1px solid silver","box-sizing":"border-box",display:"inline-block",height:this._data.core.li_height+"px",lineHeight:this._data.core.li_height+"px",width:"150px"},blur:a.proxy(function(c){c.stopImmediatePropagation(),c.preventDefault();var e=h.children(".jstree-rename-input"),f=e.val(),i=this.settings.core.force_text,m;""===f&&(f=j),k.remove(),h.replaceWith(g),h.remove(),j=i?j:a("<div></div>").append(a.parseHTML(j)).html(),b=this.get_node(b),this.set_text(b,j),m=!!this.rename_node(b,i?a("<div></div>").text(f).text():a("<div></div>").append(a.parseHTML(f)).html()),m||this.set_text(b,j),this._data.core.focused=n.id,setTimeout(a.proxy(function(){var a=this.get_node(n.id,!0);a.length&&(this._data.core.focused=n.id,a.children(".jstree-anchor").focus())},this),0),d&&d.call(this,n,m,o),l=null},this),keydown:function(a){var b=a.which;27===b&&(o=!0,this.value=j),(27===b||13===b||37===b||38===b||39===b||40===b||32===b)&&a.stopImmediatePropagation(),(27===b||13===b)&&(a.preventDefault(),this.blur())},click:function(a){a.stopImmediatePropagation()},mousedown:function(a){a.stopImmediatePropagation()},keyup:function(a){l.width(Math.min(k.text("pW"+this.value).width(),f))},keypress:function(a){return 13===a.which?!1:void 0}}),m={fontFamily:g.css("fontFamily")||"",fontSize:g.css("fontSize")||"",fontWeight:g.css("fontWeight")||"",fontStyle:g.css("fontStyle")||"",fontStretch:g.css("fontStretch")||"",fontVariant:g.css("fontVariant")||"",letterSpacing:g.css("letterSpacing")||"",wordSpacing:g.css("wordSpacing")||""},h.attr("class",g.attr("class")).append(g.contents().clone()).append(l),g.replaceWith(h),k.css(m),l.css(m).width(Math.min(k.text("pW"+l[0].value).width(),f))[0].select(),void a(i).one("mousedown.jstree touchstart.jstree dnd_start.vakata",function(b){l&&b.target!==l&&a(l).blur()})):(this.settings.core.error.call(this,this._data.core.last_error),!1):!1},set_theme:function(b,c){if(!b)return!1;if(c===!0){var d=this.settings.core.themes.dir;d||(d=a.jstree.path+"/themes"),c=d+"/"+b+"/style.css"}c&&-1===a.inArray(c,g)&&(a("head").append('<link rel="stylesheet" href="'+c+'" type="text/css" />'),g.push(c)),this._data.core.themes.name&&this.element.removeClass("jstree-"+this._data.core.themes.name),this._data.core.themes.name=b,this.element.addClass("jstree-"+b),this.element[this.settings.core.themes.responsive?"addClass":"removeClass"]("jstree-"+b+"-responsive"),this.trigger("set_theme",{theme:b})},get_theme:function(){return this._data.core.themes.name},set_theme_variant:function(a){this._data.core.themes.variant&&this.element.removeClass("jstree-"+this._data.core.themes.name+"-"+this._data.core.themes.variant),this._data.core.themes.variant=a,a&&this.element.addClass("jstree-"+this._data.core.themes.name+"-"+this._data.core.themes.variant)},get_theme_variant:function(){return this._data.core.themes.variant},show_stripes:function(){this._data.core.themes.stripes=!0,this.get_container_ul().addClass("jstree-striped"),this.trigger("show_stripes")},hide_stripes:function(){this._data.core.themes.stripes=!1,this.get_container_ul().removeClass("jstree-striped"),this.trigger("hide_stripes")},toggle_stripes:function(){this._data.core.themes.stripes?this.hide_stripes():this.show_stripes()},show_dots:function(){this._data.core.themes.dots=!0,this.get_container_ul().removeClass("jstree-no-dots"),this.trigger("show_dots")},hide_dots:function(){this._data.core.themes.dots=!1,this.get_container_ul().addClass("jstree-no-dots"),this.trigger("hide_dots")},toggle_dots:function(){this._data.core.themes.dots?this.hide_dots():this.show_dots()},show_icons:function(){this._data.core.themes.icons=!0,this.get_container_ul().removeClass("jstree-no-icons"),this.trigger("show_icons")},hide_icons:function(){this._data.core.themes.icons=!1,this.get_container_ul().addClass("jstree-no-icons"),this.trigger("hide_icons")},toggle_icons:function(){this._data.core.themes.icons?this.hide_icons():this.show_icons()},show_ellipsis:function(){this._data.core.themes.ellipsis=!0,this.get_container_ul().addClass("jstree-ellipsis"),this.trigger("show_ellipsis")},hide_ellipsis:function(){this._data.core.themes.ellipsis=!1,this.get_container_ul().removeClass("jstree-ellipsis"),this.trigger("hide_ellipsis")},toggle_ellipsis:function(){this._data.core.themes.ellipsis?this.hide_ellipsis():this.show_ellipsis()},set_icon:function(c,d){var e,f,g,h;if(a.isArray(c)){for(c=c.slice(),e=0,f=c.length;f>e;e++)this.set_icon(c[e],d);return!0}return c=this.get_node(c),c&&c.id!==a.jstree.root?(h=c.icon,c.icon=d===!0||null===d||d===b||""===d?!0:d,g=this.get_node(c,!0).children(".jstree-anchor").children(".jstree-themeicon"),d===!1?(g.removeClass("jstree-themeicon-custom "+h).css("background","").removeAttr("rel"),this.hide_icon(c)):d===!0||null===d||d===b||""===d?(g.removeClass("jstree-themeicon-custom "+h).css("background","").removeAttr("rel"),h===!1&&this.show_icon(c)):-1===d.indexOf("/")&&-1===d.indexOf(".")?(g.removeClass(h).css("background",""),g.addClass(d+" jstree-themeicon-custom").attr("rel",d),h===!1&&this.show_icon(c)):(g.removeClass(h).css("background",""),g.addClass("jstree-themeicon-custom").css("background","url('"+d+"') center center no-repeat").attr("rel",d),h===!1&&this.show_icon(c)),!0):!1},get_icon:function(b){return b=this.get_node(b),b&&b.id!==a.jstree.root?b.icon:!1},hide_icon:function(b){var c,d;if(a.isArray(b)){for(b=b.slice(),c=0,d=b.length;d>c;c++)this.hide_icon(b[c]);return!0}return b=this.get_node(b),b&&b!==a.jstree.root?(b.icon=!1,this.get_node(b,!0).children(".jstree-anchor").children(".jstree-themeicon").addClass("jstree-themeicon-hidden"),!0):!1},show_icon:function(b){var c,d,e;if(a.isArray(b)){for(b=b.slice(),c=0,d=b.length;d>c;c++)this.show_icon(b[c]);return!0}return b=this.get_node(b),b&&b!==a.jstree.root?(e=this.get_node(b,!0),b.icon=e.length?e.children(".jstree-anchor").children(".jstree-themeicon").attr("rel"):!0,b.icon||(b.icon=!0),e.children(".jstree-anchor").children(".jstree-themeicon").removeClass("jstree-themeicon-hidden"),!0):!1}},a.vakata={},a.vakata.attributes=function(b,c){b=a(b)[0];var d=c?{}:[];return b&&b.attributes&&a.each(b.attributes,function(b,e){-1===a.inArray(e.name.toLowerCase(),["style","contenteditable","hasfocus","tabindex"])&&null!==e.value&&""!==a.trim(e.value)&&(c?d[e.name]=e.value:d.push(e.name))}),d},a.vakata.array_unique=function(a){var c=[],d,e,f,g={};for(d=0,f=a.length;f>d;d++)g[a[d]]===b&&(c.push(a[d]),g[a[d]]=!0);return c},a.vakata.array_remove=function(a,b){return a.splice(b,1),a},a.vakata.array_remove_item=function(b,c){var d=a.inArray(c,b);return-1!==d?a.vakata.array_remove(b,d):b},a.vakata.array_filter=function(a,b,c,d,e){if(a.filter)return a.filter(b,c);d=[];for(e in a)~~e+""==e+""&&e>=0&&b.call(c,a[e],+e,a)&&d.push(a[e]);return d},a.jstree.plugins.changed=function(a,b){var c=[];this.trigger=function(a,d){var e,f;if(d||(d={}),"changed"===a.replace(".jstree","")){d.changed={selected:[],deselected:[]};var g={};for(e=0,f=c.length;f>e;e++)g[c[e]]=1;for(e=0,f=d.selected.length;f>e;e++)g[d.selected[e]]?g[d.selected[e]]=2:d.changed.selected.push(d.selected[e]);for(e=0,f=c.length;f>e;e++)1===g[c[e]]&&d.changed.deselected.push(c[e]);c=d.selected.slice()}b.trigger.call(this,a,d)},this.refresh=function(a,d){return c=[],b.refresh.apply(this,arguments)}};var j=i.createElement("I");j.className="jstree-icon jstree-checkbox",j.setAttribute("role","presentation"),a.jstree.defaults.checkbox={visible:!0,three_state:!0,whole_node:!0,keep_selected_style:!0,cascade:"",tie_selection:!0,cascade_to_disabled:!0,cascade_to_hidden:!0},a.jstree.plugins.checkbox=function(c,d){this.bind=function(){d.bind.call(this),this._data.checkbox.uto=!1,this._data.checkbox.selected=[],this.settings.checkbox.three_state&&(this.settings.checkbox.cascade="up+down+undetermined"),this.element.on("init.jstree",a.proxy(function(){this._data.checkbox.visible=this.settings.checkbox.visible,this.settings.checkbox.keep_selected_style||this.element.addClass("jstree-checkbox-no-clicked"),this.settings.checkbox.tie_selection&&this.element.addClass("jstree-checkbox-selection")},this)).on("loading.jstree",a.proxy(function(){this[this._data.checkbox.visible?"show_checkboxes":"hide_checkboxes"]()},this)),-1!==this.settings.checkbox.cascade.indexOf("undetermined")&&this.element.on("changed.jstree uncheck_node.jstree check_node.jstree uncheck_all.jstree check_all.jstree move_node.jstree copy_node.jstree redraw.jstree open_node.jstree",a.proxy(function(){this._data.checkbox.uto&&clearTimeout(this._data.checkbox.uto),this._data.checkbox.uto=setTimeout(a.proxy(this._undetermined,this),50)},this)),this.settings.checkbox.tie_selection||this.element.on("model.jstree",a.proxy(function(a,b){var c=this._model.data,d=c[b.parent],e=b.nodes,f,g;for(f=0,g=e.length;g>f;f++)c[e[f]].state.checked=c[e[f]].state.checked||c[e[f]].original&&c[e[f]].original.state&&c[e[f]].original.state.checked,c[e[f]].state.checked&&this._data.checkbox.selected.push(e[f])},this)),(-1!==this.settings.checkbox.cascade.indexOf("up")||-1!==this.settings.checkbox.cascade.indexOf("down"))&&this.element.on("model.jstree",a.proxy(function(b,c){var d=this._model.data,e=d[c.parent],f=c.nodes,g=[],h,i,j,k,l,m,n=this.settings.checkbox.cascade,o=this.settings.checkbox.tie_selection;if(-1!==n.indexOf("down"))if(e.state[o?"selected":"checked"]){for(i=0,j=f.length;j>i;i++)d[f[i]].state[o?"selected":"checked"]=!0;this._data[o?"core":"checkbox"].selected=this._data[o?"core":"checkbox"].selected.concat(f)}else for(i=0,j=f.length;j>i;i++)if(d[f[i]].state[o?"selected":"checked"]){for(k=0,l=d[f[i]].children_d.length;l>k;k++)d[d[f[i]].children_d[k]].state[o?"selected":"checked"]=!0;this._data[o?"core":"checkbox"].selected=this._data[o?"core":"checkbox"].selected.concat(d[f[i]].children_d)}if(-1!==n.indexOf("up")){for(i=0,j=e.children_d.length;j>i;i++)d[e.children_d[i]].children.length||g.push(d[e.children_d[i]].parent);for(g=a.vakata.array_unique(g),k=0,l=g.length;l>k;k++){e=d[g[k]];while(e&&e.id!==a.jstree.root){for(h=0,i=0,j=e.children.length;j>i;i++)h+=d[e.children[i]].state[o?"selected":"checked"];if(h!==j)break;e.state[o?"selected":"checked"]=!0,this._data[o?"core":"checkbox"].selected.push(e.id),m=this.get_node(e,!0),m&&m.length&&m.attr("aria-selected",!0).children(".jstree-anchor").addClass(o?"jstree-clicked":"jstree-checked"),e=this.get_node(e.parent)}}}this._data[o?"core":"checkbox"].selected=a.vakata.array_unique(this._data[o?"core":"checkbox"].selected)},this)).on(this.settings.checkbox.tie_selection?"select_node.jstree":"check_node.jstree",a.proxy(function(b,c){var d=this,e=c.node,f=this._model.data,g=this.get_node(e.parent),h,i,j,k,l=this.settings.checkbox.cascade,m=this.settings.checkbox.tie_selection,n={},o=this._data[m?"core":"checkbox"].selected;for(h=0,i=o.length;i>h;h++)n[o[h]]=!0;if(-1!==l.indexOf("down")){var p=this._cascade_new_checked_state(e.id,!0),q=e.children_d.concat(e.id);for(h=0,i=q.length;i>h;h++)p.indexOf(q[h])>-1?n[q[h]]=!0:delete n[q[h]]}if(-1!==l.indexOf("up"))while(g&&g.id!==a.jstree.root){for(j=0,h=0,i=g.children.length;i>h;h++)j+=f[g.children[h]].state[m?"selected":"checked"];if(j!==i)break;g.state[m?"selected":"checked"]=!0,n[g.id]=!0,k=this.get_node(g,!0),k&&k.length&&k.attr("aria-selected",!0).children(".jstree-anchor").addClass(m?"jstree-clicked":"jstree-checked"),g=this.get_node(g.parent)}o=[];for(h in n)n.hasOwnProperty(h)&&o.push(h);this._data[m?"core":"checkbox"].selected=o},this)).on(this.settings.checkbox.tie_selection?"deselect_all.jstree":"uncheck_all.jstree",a.proxy(function(b,c){var d=this.get_node(a.jstree.root),e=this._model.data,f,g,h;for(f=0,g=d.children_d.length;g>f;f++)h=e[d.children_d[f]],h&&h.original&&h.original.state&&h.original.state.undetermined&&(h.original.state.undetermined=!1)},this)).on(this.settings.checkbox.tie_selection?"deselect_node.jstree":"uncheck_node.jstree",a.proxy(function(a,b){var c=this,d=b.node,e=this.get_node(d,!0),f,g,h,i=this.settings.checkbox.cascade,j=this.settings.checkbox.tie_selection,k=this._data[j?"core":"checkbox"].selected,l={},m=[],n=d.children_d.concat(d.id);if(-1!==i.indexOf("down")){var o=this._cascade_new_checked_state(d.id,!1);k=k.filter(function(a){return-1===n.indexOf(a)||o.indexOf(a)>-1})}if(-1!==i.indexOf("up")&&-1===k.indexOf(d.id)){for(f=0,g=d.parents.length;g>f;f++)h=this._model.data[d.parents[f]],h.state[j?"selected":"checked"]=!1,h&&h.original&&h.original.state&&h.original.state.undetermined&&(h.original.state.undetermined=!1),h=this.get_node(d.parents[f],!0),h&&h.length&&h.attr("aria-selected",!1).children(".jstree-anchor").removeClass(j?"jstree-clicked":"jstree-checked");k=k.filter(function(a){return-1===d.parents.indexOf(a)})}this._data[j?"core":"checkbox"].selected=k},this)),-1!==this.settings.checkbox.cascade.indexOf("up")&&this.element.on("delete_node.jstree",a.proxy(function(b,c){var d=this.get_node(c.parent),e=this._model.data,f,g,h,i,j=this.settings.checkbox.tie_selection;while(d&&d.id!==a.jstree.root&&!d.state[j?"selected":"checked"]){for(h=0,f=0,g=d.children.length;g>f;f++)h+=e[d.children[f]].state[j?"selected":"checked"];if(!(g>0&&h===g))break;d.state[j?"selected":"checked"]=!0,this._data[j?"core":"checkbox"].selected.push(d.id),i=this.get_node(d,!0),i&&i.length&&i.attr("aria-selected",!0).children(".jstree-anchor").addClass(j?"jstree-clicked":"jstree-checked"),d=this.get_node(d.parent)}},this)).on("move_node.jstree",a.proxy(function(b,c){var d=c.is_multi,e=c.old_parent,f=this.get_node(c.parent),g=this._model.data,h,i,j,k,l,m=this.settings.checkbox.tie_selection;if(!d){h=this.get_node(e);while(h&&h.id!==a.jstree.root&&!h.state[m?"selected":"checked"]){for(i=0,j=0,k=h.children.length;k>j;j++)i+=g[h.children[j]].state[m?"selected":"checked"];if(!(k>0&&i===k))break;h.state[m?"selected":"checked"]=!0,this._data[m?"core":"checkbox"].selected.push(h.id),l=this.get_node(h,!0),l&&l.length&&l.attr("aria-selected",!0).children(".jstree-anchor").addClass(m?"jstree-clicked":"jstree-checked"),h=this.get_node(h.parent)}}h=f;while(h&&h.id!==a.jstree.root){for(i=0,j=0,k=h.children.length;k>j;j++)i+=g[h.children[j]].state[m?"selected":"checked"];if(i===k)h.state[m?"selected":"checked"]||(h.state[m?"selected":"checked"]=!0,this._data[m?"core":"checkbox"].selected.push(h.id),l=this.get_node(h,!0),l&&l.length&&l.attr("aria-selected",!0).children(".jstree-anchor").addClass(m?"jstree-clicked":"jstree-checked"));else{if(!h.state[m?"selected":"checked"])break;h.state[m?"selected":"checked"]=!1,this._data[m?"core":"checkbox"].selected=a.vakata.array_remove_item(this._data[m?"core":"checkbox"].selected,h.id),l=this.get_node(h,!0),l&&l.length&&l.attr("aria-selected",!1).children(".jstree-anchor").removeClass(m?"jstree-clicked":"jstree-checked")}h=this.get_node(h.parent)}},this))},this.get_undetermined=function(c){if(-1===this.settings.checkbox.cascade.indexOf("undetermined"))return[];var d,e,f,g,h={},i=this._model.data,j=this.settings.checkbox.tie_selection,k=this._data[j?"core":"checkbox"].selected,l=[],m=this,n=[];for(d=0,e=k.length;e>d;d++)if(i[k[d]]&&i[k[d]].parents)for(f=0,g=i[k[d]].parents.length;g>f;f++){if(h[i[k[d]].parents[f]]!==b)break;i[k[d]].parents[f]!==a.jstree.root&&(h[i[k[d]].parents[f]]=!0,l.push(i[k[d]].parents[f]))}for(this.element.find(".jstree-closed").not(":has(.jstree-children)").each(function(){var c=m.get_node(this),j;if(c)if(c.state.loaded){for(d=0,e=c.children_d.length;e>d;d++)if(j=i[c.children_d[d]],!j.state.loaded&&j.original&&j.original.state&&j.original.state.undetermined&&j.original.state.undetermined===!0)for(h[j.id]===b&&j.id!==a.jstree.root&&(h[j.id]=!0,l.push(j.id)),f=0,g=j.parents.length;g>f;f++)h[j.parents[f]]===b&&j.parents[f]!==a.jstree.root&&(h[j.parents[f]]=!0,l.push(j.parents[f]))}else if(c.original&&c.original.state&&c.original.state.undetermined&&c.original.state.undetermined===!0)for(h[c.id]===b&&c.id!==a.jstree.root&&(h[c.id]=!0,l.push(c.id)),f=0,g=c.parents.length;g>f;f++)h[c.parents[f]]===b&&c.parents[f]!==a.jstree.root&&(h[c.parents[f]]=!0,l.push(c.parents[f]))}),d=0,e=l.length;e>d;d++)i[l[d]].state[j?"selected":"checked"]||n.push(c?i[l[d]]:l[d]);return n},this._undetermined=function(){if(null!==this.element){var a=this.get_undetermined(!1),b,c,d;for(this.element.find(".jstree-undetermined").removeClass("jstree-undetermined"),b=0,c=a.length;c>b;b++)d=this.get_node(a[b],!0),d&&d.length&&d.children(".jstree-anchor").children(".jstree-checkbox").addClass("jstree-undetermined")}},this.redraw_node=function(b,c,e,f){if(b=d.redraw_node.apply(this,arguments)){var g,h,i=null,k=null;for(g=0,h=b.childNodes.length;h>g;g++)if(b.childNodes[g]&&b.childNodes[g].className&&-1!==b.childNodes[g].className.indexOf("jstree-anchor")){i=b.childNodes[g];break}i&&(!this.settings.checkbox.tie_selection&&this._model.data[b.id].state.checked&&(i.className+=" jstree-checked"),k=j.cloneNode(!1),this._model.data[b.id].state.checkbox_disabled&&(k.className+=" jstree-checkbox-disabled"),i.insertBefore(k,i.childNodes[0]))}return e||-1===this.settings.checkbox.cascade.indexOf("undetermined")||(this._data.checkbox.uto&&clearTimeout(this._data.checkbox.uto),this._data.checkbox.uto=setTimeout(a.proxy(this._undetermined,this),50)),b},this.show_checkboxes=function(){this._data.core.themes.checkboxes=!0,this.get_container_ul().removeClass("jstree-no-checkboxes")},this.hide_checkboxes=function(){this._data.core.themes.checkboxes=!1,this.get_container_ul().addClass("jstree-no-checkboxes")},this.toggle_checkboxes=function(){this._data.core.themes.checkboxes?this.hide_checkboxes():this.show_checkboxes()},this.is_undetermined=function(b){b=this.get_node(b);var c=this.settings.checkbox.cascade,d,e,f=this.settings.checkbox.tie_selection,g=this._data[f?"core":"checkbox"].selected,h=this._model.data;if(!b||b.state[f?"selected":"checked"]===!0||-1===c.indexOf("undetermined")||-1===c.indexOf("down")&&-1===c.indexOf("up"))return!1;if(!b.state.loaded&&b.original.state.undetermined===!0)return!0;for(d=0,e=b.children_d.length;e>d;d++)if(-1!==a.inArray(b.children_d[d],g)||!h[b.children_d[d]].state.loaded&&h[b.children_d[d]].original.state.undetermined)return!0;return!1},this.disable_checkbox=function(b){var c,d,e;if(a.isArray(b)){for(b=b.slice(),c=0,d=b.length;d>c;c++)this.disable_checkbox(b[c]);return!0}return b=this.get_node(b),b&&b.id!==a.jstree.root?(e=this.get_node(b,!0),void(b.state.checkbox_disabled||(b.state.checkbox_disabled=!0,e&&e.length&&e.children(".jstree-anchor").children(".jstree-checkbox").addClass("jstree-checkbox-disabled"),this.trigger("disable_checkbox",{node:b})))):!1},this.enable_checkbox=function(b){var c,d,e;if(a.isArray(b)){for(b=b.slice(),c=0,d=b.length;d>c;c++)this.enable_checkbox(b[c]);return!0}return b=this.get_node(b),b&&b.id!==a.jstree.root?(e=this.get_node(b,!0),void(b.state.checkbox_disabled&&(b.state.checkbox_disabled=!1,e&&e.length&&e.children(".jstree-anchor").children(".jstree-checkbox").removeClass("jstree-checkbox-disabled"),this.trigger("enable_checkbox",{node:b})))):!1},this.activate_node=function(b,c){return a(c.target).hasClass("jstree-checkbox-disabled")?!1:(this.settings.checkbox.tie_selection&&(this.settings.checkbox.whole_node||a(c.target).hasClass("jstree-checkbox"))&&(c.ctrlKey=!0),this.settings.checkbox.tie_selection||!this.settings.checkbox.whole_node&&!a(c.target).hasClass("jstree-checkbox")?d.activate_node.call(this,b,c):this.is_disabled(b)?!1:(this.is_checked(b)?this.uncheck_node(b,c):this.check_node(b,c),void this.trigger("activate_node",{node:this.get_node(b)})))},this._cascade_new_checked_state=function(a,b){var c=this,d=this.settings.checkbox.tie_selection,e=this._model.data[a],f=[],g=[],h,i,j;if(!this.settings.checkbox.cascade_to_disabled&&e.state.disabled||!this.settings.checkbox.cascade_to_hidden&&e.state.hidden)j=this.get_checked_descendants(a),e.state[d?"selected":"checked"]&&j.push(e.id),f=f.concat(j);else{if(e.children)for(h=0,i=e.children.length;i>h;h++){var k=e.children[h];j=c._cascade_new_checked_state(k,b),f=f.concat(j),j.indexOf(k)>-1&&g.push(k)}var l=c.get_node(e,!0),m=g.length>0&&g.length<e.children.length;e.original&&e.original.state&&e.original.state.undetermined&&(e.original.state.undetermined=m),m?(e.state[d?"selected":"checked"]=!1,l.attr("aria-selected",!1).children(".jstree-anchor").removeClass(d?"jstree-clicked":"jstree-checked")):b&&g.length===e.children.length?(e.state[d?"selected":"checked"]=b,f.push(e.id),l.attr("aria-selected",!0).children(".jstree-anchor").addClass(d?"jstree-clicked":"jstree-checked")):(e.state[d?"selected":"checked"]=!1,l.attr("aria-selected",!1).children(".jstree-anchor").removeClass(d?"jstree-clicked":"jstree-checked"))}return f},this.get_checked_descendants=function(a){var b=this,c=b.settings.checkbox.tie_selection,d=b._model.data[a];return d.children_d.filter(function(a){return b._model.data[a].state[c?"selected":"checked"]})},this.check_node=function(b,c){if(this.settings.checkbox.tie_selection)return this.select_node(b,!1,!0,c);var d,e,f,g;if(a.isArray(b)){for(b=b.slice(),e=0,f=b.length;f>e;e++)this.check_node(b[e],c);return!0}return b=this.get_node(b),b&&b.id!==a.jstree.root?(d=this.get_node(b,!0),void(b.state.checked||(b.state.checked=!0,this._data.checkbox.selected.push(b.id),d&&d.length&&d.children(".jstree-anchor").addClass("jstree-checked"),this.trigger("check_node",{node:b,selected:this._data.checkbox.selected,event:c})))):!1},this.uncheck_node=function(b,c){if(this.settings.checkbox.tie_selection)return this.deselect_node(b,!1,c);var d,e,f;if(a.isArray(b)){for(b=b.slice(),d=0,e=b.length;e>d;d++)this.uncheck_node(b[d],c);return!0}return b=this.get_node(b),b&&b.id!==a.jstree.root?(f=this.get_node(b,!0),void(b.state.checked&&(b.state.checked=!1,this._data.checkbox.selected=a.vakata.array_remove_item(this._data.checkbox.selected,b.id),f.length&&f.children(".jstree-anchor").removeClass("jstree-checked"),this.trigger("uncheck_node",{node:b,selected:this._data.checkbox.selected,event:c})))):!1},this.check_all=function(){if(this.settings.checkbox.tie_selection)return this.select_all();var b=this._data.checkbox.selected.concat([]),c,d;for(this._data.checkbox.selected=this._model.data[a.jstree.root].children_d.concat(),c=0,d=this._data.checkbox.selected.length;d>c;c++)this._model.data[this._data.checkbox.selected[c]]&&(this._model.data[this._data.checkbox.selected[c]].state.checked=!0);this.redraw(!0),this.trigger("check_all",{selected:this._data.checkbox.selected})},this.uncheck_all=function(){if(this.settings.checkbox.tie_selection)return this.deselect_all();var a=this._data.checkbox.selected.concat([]),b,c;for(b=0,c=this._data.checkbox.selected.length;c>b;b++)this._model.data[this._data.checkbox.selected[b]]&&(this._model.data[this._data.checkbox.selected[b]].state.checked=!1);this._data.checkbox.selected=[],this.element.find(".jstree-checked").removeClass("jstree-checked"),this.trigger("uncheck_all",{selected:this._data.checkbox.selected,node:a})},this.is_checked=function(b){return this.settings.checkbox.tie_selection?this.is_selected(b):(b=this.get_node(b),b&&b.id!==a.jstree.root?b.state.checked:!1)},this.get_checked=function(b){return this.settings.checkbox.tie_selection?this.get_selected(b):b?a.map(this._data.checkbox.selected,a.proxy(function(a){return this.get_node(a)},this)):this._data.checkbox.selected},this.get_top_checked=function(b){if(this.settings.checkbox.tie_selection)return this.get_top_selected(b);var c=this.get_checked(!0),d={},e,f,g,h;for(e=0,f=c.length;f>e;e++)d[c[e].id]=c[e];for(e=0,f=c.length;f>e;e++)for(g=0,h=c[e].children_d.length;h>g;g++)d[c[e].children_d[g]]&&delete d[c[e].children_d[g]];c=[];for(e in d)d.hasOwnProperty(e)&&c.push(e);return b?a.map(c,a.proxy(function(a){return this.get_node(a)},this)):c},this.get_bottom_checked=function(b){if(this.settings.checkbox.tie_selection)return this.get_bottom_selected(b);var c=this.get_checked(!0),d=[],e,f;for(e=0,f=c.length;f>e;e++)c[e].children.length||d.push(c[e].id);return b?a.map(d,a.proxy(function(a){return this.get_node(a)},this)):d},this.load_node=function(b,c){var e,f,g,h,i,j;if(!a.isArray(b)&&!this.settings.checkbox.tie_selection&&(j=this.get_node(b),j&&j.state.loaded))for(e=0,f=j.children_d.length;f>e;e++)this._model.data[j.children_d[e]].state.checked&&(i=!0,this._data.checkbox.selected=a.vakata.array_remove_item(this._data.checkbox.selected,j.children_d[e]));return d.load_node.apply(this,arguments)},this.get_state=function(){var a=d.get_state.apply(this,arguments);return this.settings.checkbox.tie_selection?a:(a.checkbox=this._data.checkbox.selected.slice(),a)},this.set_state=function(b,c){var e=d.set_state.apply(this,arguments);if(e&&b.checkbox){if(!this.settings.checkbox.tie_selection){this.uncheck_all();var f=this;a.each(b.checkbox,function(a,b){f.check_node(b)})}return delete b.checkbox,this.set_state(b,c),!1}return e},this.refresh=function(a,b){return this.settings.checkbox.tie_selection&&(this._data.checkbox.selected=[]),d.refresh.apply(this,arguments)}},a.jstree.defaults.conditionalselect=function(){return!0},a.jstree.plugins.conditionalselect=function(a,b){this.activate_node=function(a,c){return this.settings.conditionalselect.call(this,this.get_node(a),c)?b.activate_node.call(this,a,c):void 0}},a.jstree.defaults.contextmenu={select_node:!0,show_at_node:!0,items:function(b,c){return{create:{separator_before:!1,separator_after:!0,_disabled:!1,label:"Create",action:function(b){var c=a.jstree.reference(b.reference),d=c.get_node(b.reference);c.create_node(d,{},"last",function(a){try{c.edit(a)}catch(b){setTimeout(function(){c.edit(a)},0)}})}},rename:{separator_before:!1,separator_after:!1,_disabled:!1,label:"Rename",action:function(b){var c=a.jstree.reference(b.reference),d=c.get_node(b.reference);c.edit(d)}},remove:{separator_before:!1,icon:!1,separator_after:!1,_disabled:!1,label:"Delete",action:function(b){var c=a.jstree.reference(b.reference),d=c.get_node(b.reference);c.is_selected(d)?c.delete_node(c.get_selected()):c.delete_node(d)}},ccp:{separator_before:!0,icon:!1,separator_after:!1,label:"Edit",action:!1,submenu:{cut:{separator_before:!1,separator_after:!1,label:"Cut",action:function(b){var c=a.jstree.reference(b.reference),d=c.get_node(b.reference);c.is_selected(d)?c.cut(c.get_top_selected()):c.cut(d)}},copy:{separator_before:!1,icon:!1,separator_after:!1,label:"Copy",action:function(b){var c=a.jstree.reference(b.reference),d=c.get_node(b.reference);c.is_selected(d)?c.copy(c.get_top_selected()):c.copy(d)}},paste:{separator_before:!1,icon:!1,_disabled:function(b){return!a.jstree.reference(b.reference).can_paste()},separator_after:!1,label:"Paste",action:function(b){var c=a.jstree.reference(b.reference),d=c.get_node(b.reference);c.paste(d)}}}}}}},a.jstree.plugins.contextmenu=function(c,d){this.bind=function(){d.bind.call(this);var b=0,c=null,e,f;this.element.on("init.jstree loading.jstree ready.jstree",a.proxy(function(){this.get_container_ul().addClass("jstree-contextmenu")},this)).on("contextmenu.jstree",".jstree-anchor",a.proxy(function(a,d){"input"!==a.target.tagName.toLowerCase()&&(a.preventDefault(),b=a.ctrlKey?+new Date:0,(d||c)&&(b=+new Date+1e4),c&&clearTimeout(c),this.is_loading(a.currentTarget)||this.show_contextmenu(a.currentTarget,a.pageX,a.pageY,a))},this)).on("click.jstree",".jstree-anchor",a.proxy(function(c){this._data.contextmenu.visible&&(!b||+new Date-b>250)&&a.vakata.context.hide(),b=0},this)).on("touchstart.jstree",".jstree-anchor",function(b){b.originalEvent&&b.originalEvent.changedTouches&&b.originalEvent.changedTouches[0]&&(e=b.originalEvent.changedTouches[0].clientX,f=b.originalEvent.changedTouches[0].clientY,c=setTimeout(function(){a(b.currentTarget).trigger("contextmenu",!0)},750))}).on("touchmove.vakata.jstree",function(b){c&&b.originalEvent&&b.originalEvent.changedTouches&&b.originalEvent.changedTouches[0]&&(Math.abs(e-b.originalEvent.changedTouches[0].clientX)>10||Math.abs(f-b.originalEvent.changedTouches[0].clientY)>10)&&(clearTimeout(c),a.vakata.context.hide())}).on("touchend.vakata.jstree",function(a){c&&clearTimeout(c)}),a(i).on("context_hide.vakata.jstree",a.proxy(function(b,c){this._data.contextmenu.visible=!1,a(c.reference).removeClass("jstree-context")},this))},this.teardown=function(){this._data.contextmenu.visible&&a.vakata.context.hide(),d.teardown.call(this)},this.show_contextmenu=function(c,d,e,f){if(c=this.get_node(c),!c||c.id===a.jstree.root)return!1;var g=this.settings.contextmenu,h=this.get_node(c,!0),i=h.children(".jstree-anchor"),j=!1,k=!1;(g.show_at_node||d===b||e===b)&&(j=i.offset(),d=j.left,e=j.top+this._data.core.li_height),this.settings.contextmenu.select_node&&!this.is_selected(c)&&this.activate_node(c,f),k=g.items,a.isFunction(k)&&(k=k.call(this,c,a.proxy(function(a){this._show_contextmenu(c,d,e,a)},this))),a.isPlainObject(k)&&this._show_contextmenu(c,d,e,k)},this._show_contextmenu=function(b,c,d,e){var f=this.get_node(b,!0),g=f.children(".jstree-anchor");a(i).one("context_show.vakata.jstree",a.proxy(function(b,c){var d="jstree-contextmenu jstree-"+this.get_theme()+"-contextmenu";a(c.element).addClass(d),g.addClass("jstree-context")},this)),this._data.contextmenu.visible=!0,a.vakata.context.show(g,{x:c,y:d},e),this.trigger("show_contextmenu",{node:b,x:c,y:d})}},function(a){var b=!1,c={element:!1,reference:!1,position_x:0,position_y:0,items:[],html:"",is_visible:!1};a.vakata.context={settings:{hide_onmouseleave:0,icons:!0},_trigger:function(b){a(i).triggerHandler("context_"+b+".vakata",{reference:c.reference,element:c.element,position:{x:c.position_x,y:c.position_y}})},_execute:function(b){return b=c.items[b],b&&(!b._disabled||a.isFunction(b._disabled)&&!b._disabled({item:b,reference:c.reference,element:c.element}))&&b.action?b.action.call(null,{item:b,reference:c.reference,element:c.element,position:{x:c.position_x,y:c.position_y}}):!1},_parse:function(b,d){if(!b)return!1;d||(c.html="",c.items=[]);var e="",f=!1,g;return d&&(e+="<ul>"),a.each(b,function(b,d){return d?(c.items.push(d),!f&&d.separator_before&&(e+="<li class='vakata-context-separator'><a href='#' "+(a.vakata.context.settings.icons?"":'style="margin-left:0px;"')+">&#160;</a></li>"),f=!1,e+="<li class='"+(d._class||"")+(d._disabled===!0||a.isFunction(d._disabled)&&d._disabled({item:d,reference:c.reference,element:c.element})?" vakata-contextmenu-disabled ":"")+"' "+(d.shortcut?" data-shortcut='"+d.shortcut+"' ":"")+">",e+="<a href='#' rel='"+(c.items.length-1)+"' "+(d.title?"title='"+d.title+"'":"")+">",a.vakata.context.settings.icons&&(e+="<i ",d.icon&&(e+=-1!==d.icon.indexOf("/")||-1!==d.icon.indexOf(".")?" style='background:url(\""+d.icon+"\") center center no-repeat' ":" class='"+d.icon+"' "),e+="></i><span class='vakata-contextmenu-sep'>&#160;</span>"),e+=(a.isFunction(d.label)?d.label({item:b,reference:c.reference,element:c.element}):d.label)+(d.shortcut?' <span class="vakata-contextmenu-shortcut vakata-contextmenu-shortcut-'+d.shortcut+'">'+(d.shortcut_label||"")+"</span>":"")+"</a>",
d.submenu&&(g=a.vakata.context._parse(d.submenu,!0),g&&(e+=g)),e+="</li>",void(d.separator_after&&(e+="<li class='vakata-context-separator'><a href='#' "+(a.vakata.context.settings.icons?"":'style="margin-left:0px;"')+">&#160;</a></li>",f=!0))):!0}),e=e.replace(/<li class\='vakata-context-separator'\><\/li\>$/,""),d&&(e+="</ul>"),d||(c.html=e,a.vakata.context._trigger("parse")),e.length>10?e:!1},_show_submenu:function(c){if(c=a(c),c.length&&c.children("ul").length){var d=c.children("ul"),e=c.offset().left,f=e+c.outerWidth(),g=c.offset().top,h=d.width(),i=d.height(),j=a(window).width()+a(window).scrollLeft(),k=a(window).height()+a(window).scrollTop();b?c[f-(h+10+c.outerWidth())<0?"addClass":"removeClass"]("vakata-context-left"):c[f+h>j&&e>j-f?"addClass":"removeClass"]("vakata-context-right"),g+i+10>k&&d.css("bottom","-1px"),c.hasClass("vakata-context-right")?h>e&&d.css("margin-right",e-h):h>j-f&&d.css("margin-left",j-f-h),d.show()}},show:function(d,e,f){var g,h,j,k,l,m,n,o,p=!0;switch(c.element&&c.element.length&&c.element.width(""),p){case!e&&!d:return!1;case!!e&&!!d:c.reference=d,c.position_x=e.x,c.position_y=e.y;break;case!e&&!!d:c.reference=d,g=d.offset(),c.position_x=g.left+d.outerHeight(),c.position_y=g.top;break;case!!e&&!d:c.position_x=e.x,c.position_y=e.y}d&&!f&&a(d).data("vakata_contextmenu")&&(f=a(d).data("vakata_contextmenu")),a.vakata.context._parse(f)&&c.element.html(c.html),c.items.length&&(c.element.appendTo(i.body),h=c.element,j=c.position_x,k=c.position_y,l=h.width(),m=h.height(),n=a(window).width()+a(window).scrollLeft(),o=a(window).height()+a(window).scrollTop(),b&&(j-=h.outerWidth()-a(d).outerWidth(),j<a(window).scrollLeft()+20&&(j=a(window).scrollLeft()+20)),j+l+20>n&&(j=n-(l+20)),k+m+20>o&&(k=o-(m+20)),c.element.css({left:j,top:k}).show().find("a").first().focus().parent().addClass("vakata-context-hover"),c.is_visible=!0,a.vakata.context._trigger("show"))},hide:function(){c.is_visible&&(c.element.hide().find("ul").hide().end().find(":focus").blur().end().detach(),c.is_visible=!1,a.vakata.context._trigger("hide"))}},a(function(){b="rtl"===a(i.body).css("direction");var d=!1;c.element=a("<ul class='vakata-context'></ul>"),c.element.on("mouseenter","li",function(b){b.stopImmediatePropagation(),a.contains(this,b.relatedTarget)||(d&&clearTimeout(d),c.element.find(".vakata-context-hover").removeClass("vakata-context-hover").end(),a(this).siblings().find("ul").hide().end().end().parentsUntil(".vakata-context","li").addBack().addClass("vakata-context-hover"),a.vakata.context._show_submenu(this))}).on("mouseleave","li",function(b){a.contains(this,b.relatedTarget)||a(this).find(".vakata-context-hover").addBack().removeClass("vakata-context-hover")}).on("mouseleave",function(b){a(this).find(".vakata-context-hover").removeClass("vakata-context-hover"),a.vakata.context.settings.hide_onmouseleave&&(d=setTimeout(function(b){return function(){a.vakata.context.hide()}}(this),a.vakata.context.settings.hide_onmouseleave))}).on("click","a",function(b){b.preventDefault(),a(this).blur().parent().hasClass("vakata-context-disabled")||a.vakata.context._execute(a(this).attr("rel"))===!1||a.vakata.context.hide()}).on("keydown","a",function(b){var d=null;switch(b.which){case 13:case 32:b.type="click",b.preventDefault(),a(b.currentTarget).trigger(b);break;case 37:c.is_visible&&(c.element.find(".vakata-context-hover").last().closest("li").first().find("ul").hide().find(".vakata-context-hover").removeClass("vakata-context-hover").end().end().children("a").focus(),b.stopImmediatePropagation(),b.preventDefault());break;case 38:c.is_visible&&(d=c.element.find("ul:visible").addBack().last().children(".vakata-context-hover").removeClass("vakata-context-hover").prevAll("li:not(.vakata-context-separator)").first(),d.length||(d=c.element.find("ul:visible").addBack().last().children("li:not(.vakata-context-separator)").last()),d.addClass("vakata-context-hover").children("a").focus(),b.stopImmediatePropagation(),b.preventDefault());break;case 39:c.is_visible&&(c.element.find(".vakata-context-hover").last().children("ul").show().children("li:not(.vakata-context-separator)").removeClass("vakata-context-hover").first().addClass("vakata-context-hover").children("a").focus(),b.stopImmediatePropagation(),b.preventDefault());break;case 40:c.is_visible&&(d=c.element.find("ul:visible").addBack().last().children(".vakata-context-hover").removeClass("vakata-context-hover").nextAll("li:not(.vakata-context-separator)").first(),d.length||(d=c.element.find("ul:visible").addBack().last().children("li:not(.vakata-context-separator)").first()),d.addClass("vakata-context-hover").children("a").focus(),b.stopImmediatePropagation(),b.preventDefault());break;case 27:a.vakata.context.hide(),b.preventDefault()}}).on("keydown",function(a){a.preventDefault();var b=c.element.find(".vakata-contextmenu-shortcut-"+a.which).parent();b.parent().not(".vakata-context-disabled")&&b.click()}),a(i).on("mousedown.vakata.jstree",function(b){c.is_visible&&c.element[0]!==b.target&&!a.contains(c.element[0],b.target)&&a.vakata.context.hide()}).on("context_show.vakata.jstree",function(a,d){c.element.find("li:has(ul)").children("a").addClass("vakata-context-parent"),b&&c.element.addClass("vakata-context-rtl").css("direction","rtl"),c.element.find("ul").hide().end()})})}(a),a.jstree.defaults.dnd={copy:!0,open_timeout:500,is_draggable:!0,check_while_dragging:!0,always_copy:!1,inside_pos:0,drag_selection:!0,touch:!0,large_drop_target:!1,large_drag_target:!1,use_html5:!1};var k,l;a.jstree.plugins.dnd=function(b,c){this.init=function(a,b){c.init.call(this,a,b),this.settings.dnd.use_html5=this.settings.dnd.use_html5&&"draggable"in i.createElement("span")},this.bind=function(){c.bind.call(this),this.element.on(this.settings.dnd.use_html5?"dragstart.jstree":"mousedown.jstree touchstart.jstree",this.settings.dnd.large_drag_target?".jstree-node":".jstree-anchor",a.proxy(function(b){if(this.settings.dnd.large_drag_target&&a(b.target).closest(".jstree-node")[0]!==b.currentTarget)return!0;if("touchstart"===b.type&&(!this.settings.dnd.touch||"selected"===this.settings.dnd.touch&&!a(b.currentTarget).closest(".jstree-node").children(".jstree-anchor").hasClass("jstree-clicked")))return!0;var c=this.get_node(b.target),d=this.is_selected(c)&&this.settings.dnd.drag_selection?this.get_top_selected().length:1,e=d>1?d+" "+this.get_string("nodes"):this.get_text(b.currentTarget);if(this.settings.core.force_text&&(e=a.vakata.html.escape(e)),c&&c.id&&c.id!==a.jstree.root&&(1===b.which||"touchstart"===b.type||"dragstart"===b.type)&&(this.settings.dnd.is_draggable===!0||a.isFunction(this.settings.dnd.is_draggable)&&this.settings.dnd.is_draggable.call(this,d>1?this.get_top_selected(!0):[c],b))){if(k={jstree:!0,origin:this,obj:this.get_node(c,!0),nodes:d>1?this.get_top_selected():[c.id]},l=b.currentTarget,!this.settings.dnd.use_html5)return this.element.trigger("mousedown.jstree"),a.vakata.dnd.start(b,k,'<div id="jstree-dnd" class="jstree-'+this.get_theme()+" jstree-"+this.get_theme()+"-"+this.get_theme_variant()+" "+(this.settings.core.themes.responsive?" jstree-dnd-responsive":"")+'"><i class="jstree-icon jstree-er"></i>'+e+'<ins class="jstree-copy" style="display:none;">+</ins></div>');a.vakata.dnd._trigger("start",b,{helper:a(),element:l,data:k})}},this)),this.settings.dnd.use_html5&&this.element.on("dragover.jstree",function(b){return b.preventDefault(),a.vakata.dnd._trigger("move",b,{helper:a(),element:l,data:k}),!1}).on("drop.jstree",a.proxy(function(b){return b.preventDefault(),a.vakata.dnd._trigger("stop",b,{helper:a(),element:l,data:k}),!1},this))},this.redraw_node=function(a,b,d,e){if(a=c.redraw_node.apply(this,arguments),a&&this.settings.dnd.use_html5)if(this.settings.dnd.large_drag_target)a.setAttribute("draggable",!0);else{var f,g,h=null;for(f=0,g=a.childNodes.length;g>f;f++)if(a.childNodes[f]&&a.childNodes[f].className&&-1!==a.childNodes[f].className.indexOf("jstree-anchor")){h=a.childNodes[f];break}h&&h.setAttribute("draggable",!0)}return a}},a(function(){var c=!1,d=!1,e=!1,f=!1,g=a('<div id="jstree-marker">&#160;</div>').hide();a(i).on("dragover.vakata.jstree",function(b){l&&a.vakata.dnd._trigger("move",b,{helper:a(),element:l,data:k})}).on("drop.vakata.jstree",function(b){l&&(a.vakata.dnd._trigger("stop",b,{helper:a(),element:l,data:k}),l=null,k=null)}).on("dnd_start.vakata.jstree",function(a,b){c=!1,e=!1,b&&b.data&&b.data.jstree&&g.appendTo(i.body)}).on("dnd_move.vakata.jstree",function(h,i){var j=i.event.target!==e.target;if(f&&(!i.event||"dragover"!==i.event.type||j)&&clearTimeout(f),i&&i.data&&i.data.jstree&&(!i.event.target.id||"jstree-marker"!==i.event.target.id)){e=i.event;var k=a.jstree.reference(i.event.target),l=!1,m=!1,n=!1,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E;if(k&&k._data&&k._data.dnd)if(g.attr("class","jstree-"+k.get_theme()+(k.settings.core.themes.responsive?" jstree-dnd-responsive":"")),D=i.data.origin&&(i.data.origin.settings.dnd.always_copy||i.data.origin.settings.dnd.copy&&(i.event.metaKey||i.event.ctrlKey)),i.helper.children().attr("class","jstree-"+k.get_theme()+" jstree-"+k.get_theme()+"-"+k.get_theme_variant()+" "+(k.settings.core.themes.responsive?" jstree-dnd-responsive":"")).find(".jstree-copy").first()[D?"show":"hide"](),i.event.target!==k.element[0]&&i.event.target!==k.get_container_ul()[0]||0!==k.get_container_ul().children().length){if(l=k.settings.dnd.large_drop_target?a(i.event.target).closest(".jstree-node").children(".jstree-anchor"):a(i.event.target).closest(".jstree-anchor"),l&&l.length&&l.parent().is(".jstree-closed, .jstree-open, .jstree-leaf")&&(m=l.offset(),n=(i.event.pageY!==b?i.event.pageY:i.event.originalEvent.pageY)-m.top,r=l.outerHeight(),u=r/3>n?["b","i","a"]:n>r-r/3?["a","i","b"]:n>r/2?["i","a","b"]:["i","b","a"],a.each(u,function(b,e){switch(e){case"b":p=m.left-6,q=m.top,s=k.get_parent(l),t=l.parent().index();break;case"i":B=k.settings.dnd.inside_pos,C=k.get_node(l.parent()),p=m.left-2,q=m.top+r/2+1,s=C.id,t="first"===B?0:"last"===B?C.children.length:Math.min(B,C.children.length);break;case"a":p=m.left-6,q=m.top+r,s=k.get_parent(l),t=l.parent().index()+1}for(v=!0,w=0,x=i.data.nodes.length;x>w;w++)if(y=i.data.origin&&(i.data.origin.settings.dnd.always_copy||i.data.origin.settings.dnd.copy&&(i.event.metaKey||i.event.ctrlKey))?"copy_node":"move_node",z=t,"move_node"===y&&"a"===e&&i.data.origin&&i.data.origin===k&&s===k.get_parent(i.data.nodes[w])&&(A=k.get_node(s),z>a.inArray(i.data.nodes[w],A.children)&&(z-=1)),v=v&&(k&&k.settings&&k.settings.dnd&&k.settings.dnd.check_while_dragging===!1||k.check(y,i.data.origin&&i.data.origin!==k?i.data.origin.get_node(i.data.nodes[w]):i.data.nodes[w],s,z,{dnd:!0,ref:k.get_node(l.parent()),pos:e,origin:i.data.origin,is_multi:i.data.origin&&i.data.origin!==k,is_foreign:!i.data.origin})),!v){k&&k.last_error&&(d=k.last_error());break}return"i"===e&&l.parent().is(".jstree-closed")&&k.settings.dnd.open_timeout&&(!i.event||"dragover"!==i.event.type||j)&&(f&&clearTimeout(f),f=setTimeout(function(a,b){return function(){a.open_node(b)}}(k,l),k.settings.dnd.open_timeout)),v?(E=k.get_node(s,!0),E.hasClass(".jstree-dnd-parent")||(a(".jstree-dnd-parent").removeClass("jstree-dnd-parent"),E.addClass("jstree-dnd-parent")),c={ins:k,par:s,pos:"i"!==e||"last"!==B||0!==t||k.is_loaded(C)?t:"last"},g.css({left:p+"px",top:q+"px"}).show(),i.helper.find(".jstree-icon").first().removeClass("jstree-er").addClass("jstree-ok"),i.event.originalEvent&&i.event.originalEvent.dataTransfer&&(i.event.originalEvent.dataTransfer.dropEffect=D?"copy":"move"),d={},u=!0,!1):void 0}),u===!0))return}else{for(v=!0,w=0,x=i.data.nodes.length;x>w;w++)if(v=v&&k.check(i.data.origin&&(i.data.origin.settings.dnd.always_copy||i.data.origin.settings.dnd.copy&&(i.event.metaKey||i.event.ctrlKey))?"copy_node":"move_node",i.data.origin&&i.data.origin!==k?i.data.origin.get_node(i.data.nodes[w]):i.data.nodes[w],a.jstree.root,"last",{dnd:!0,ref:k.get_node(a.jstree.root),pos:"i",origin:i.data.origin,is_multi:i.data.origin&&i.data.origin!==k,is_foreign:!i.data.origin}),!v)break;if(v)return c={ins:k,par:a.jstree.root,pos:"last"},g.hide(),i.helper.find(".jstree-icon").first().removeClass("jstree-er").addClass("jstree-ok"),void(i.event.originalEvent&&i.event.originalEvent.dataTransfer&&(i.event.originalEvent.dataTransfer.dropEffect=D?"copy":"move"))}a(".jstree-dnd-parent").removeClass("jstree-dnd-parent"),c=!1,i.helper.find(".jstree-icon").removeClass("jstree-ok").addClass("jstree-er"),i.event.originalEvent&&i.event.originalEvent.dataTransfer,g.hide()}}).on("dnd_scroll.vakata.jstree",function(a,b){b&&b.data&&b.data.jstree&&(g.hide(),c=!1,e=!1,b.helper.find(".jstree-icon").first().removeClass("jstree-ok").addClass("jstree-er"))}).on("dnd_stop.vakata.jstree",function(b,h){if(a(".jstree-dnd-parent").removeClass("jstree-dnd-parent"),f&&clearTimeout(f),h&&h.data&&h.data.jstree){g.hide().detach();var i,j,k=[];if(c){for(i=0,j=h.data.nodes.length;j>i;i++)k[i]=h.data.origin?h.data.origin.get_node(h.data.nodes[i]):h.data.nodes[i];c.ins[h.data.origin&&(h.data.origin.settings.dnd.always_copy||h.data.origin.settings.dnd.copy&&(h.event.metaKey||h.event.ctrlKey))?"copy_node":"move_node"](k,c.par,c.pos,!1,!1,!1,h.data.origin)}else i=a(h.event.target).closest(".jstree"),i.length&&d&&d.error&&"check"===d.error&&(i=i.jstree(!0),i&&i.settings.core.error.call(this,d));e=!1,c=!1}}).on("keyup.jstree keydown.jstree",function(b,h){h=a.vakata.dnd._get(),h&&h.data&&h.data.jstree&&("keyup"===b.type&&27===b.which?(f&&clearTimeout(f),c=!1,d=!1,e=!1,f=!1,g.hide().detach(),a.vakata.dnd._clean()):(h.helper.find(".jstree-copy").first()[h.data.origin&&(h.data.origin.settings.dnd.always_copy||h.data.origin.settings.dnd.copy&&(b.metaKey||b.ctrlKey))?"show":"hide"](),e&&(e.metaKey=b.metaKey,e.ctrlKey=b.ctrlKey,a.vakata.dnd._trigger("move",e))))})}),function(a){a.vakata.html={div:a("<div />"),escape:function(b){return a.vakata.html.div.text(b).html()},strip:function(b){return a.vakata.html.div.empty().append(a.parseHTML(b)).text()}};var c={element:!1,target:!1,is_down:!1,is_drag:!1,helper:!1,helper_w:0,data:!1,init_x:0,init_y:0,scroll_l:0,scroll_t:0,scroll_e:!1,scroll_i:!1,is_touch:!1};a.vakata.dnd={settings:{scroll_speed:10,scroll_proximity:20,helper_left:5,helper_top:10,threshold:5,threshold_touch:10},_trigger:function(c,d,e){e===b&&(e=a.vakata.dnd._get()),e.event=d,a(i).triggerHandler("dnd_"+c+".vakata",e)},_get:function(){return{data:c.data,element:c.element,helper:c.helper}},_clean:function(){c.helper&&c.helper.remove(),c.scroll_i&&(clearInterval(c.scroll_i),c.scroll_i=!1),c={element:!1,target:!1,is_down:!1,is_drag:!1,helper:!1,helper_w:0,data:!1,init_x:0,init_y:0,scroll_l:0,scroll_t:0,scroll_e:!1,scroll_i:!1,is_touch:!1},a(i).off("mousemove.vakata.jstree touchmove.vakata.jstree",a.vakata.dnd.drag),a(i).off("mouseup.vakata.jstree touchend.vakata.jstree",a.vakata.dnd.stop)},_scroll:function(b){if(!c.scroll_e||!c.scroll_l&&!c.scroll_t)return c.scroll_i&&(clearInterval(c.scroll_i),c.scroll_i=!1),!1;if(!c.scroll_i)return c.scroll_i=setInterval(a.vakata.dnd._scroll,100),!1;if(b===!0)return!1;var d=c.scroll_e.scrollTop(),e=c.scroll_e.scrollLeft();c.scroll_e.scrollTop(d+c.scroll_t*a.vakata.dnd.settings.scroll_speed),c.scroll_e.scrollLeft(e+c.scroll_l*a.vakata.dnd.settings.scroll_speed),(d!==c.scroll_e.scrollTop()||e!==c.scroll_e.scrollLeft())&&a.vakata.dnd._trigger("scroll",c.scroll_e)},start:function(b,d,e){"touchstart"===b.type&&b.originalEvent&&b.originalEvent.changedTouches&&b.originalEvent.changedTouches[0]&&(b.pageX=b.originalEvent.changedTouches[0].pageX,b.pageY=b.originalEvent.changedTouches[0].pageY,b.target=i.elementFromPoint(b.originalEvent.changedTouches[0].pageX-window.pageXOffset,b.originalEvent.changedTouches[0].pageY-window.pageYOffset)),c.is_drag&&a.vakata.dnd.stop({});try{b.currentTarget.unselectable="on",b.currentTarget.onselectstart=function(){return!1},b.currentTarget.style&&(b.currentTarget.style.touchAction="none",b.currentTarget.style.msTouchAction="none",b.currentTarget.style.MozUserSelect="none")}catch(f){}return c.init_x=b.pageX,c.init_y=b.pageY,c.data=d,c.is_down=!0,c.element=b.currentTarget,c.target=b.target,c.is_touch="touchstart"===b.type,e!==!1&&(c.helper=a("<div id='vakata-dnd'></div>").html(e).css({display:"block",margin:"0",padding:"0",position:"absolute",top:"-2000px",lineHeight:"16px",zIndex:"10000"})),a(i).on("mousemove.vakata.jstree touchmove.vakata.jstree",a.vakata.dnd.drag),a(i).on("mouseup.vakata.jstree touchend.vakata.jstree",a.vakata.dnd.stop),!1},drag:function(b){if("touchmove"===b.type&&b.originalEvent&&b.originalEvent.changedTouches&&b.originalEvent.changedTouches[0]&&(b.pageX=b.originalEvent.changedTouches[0].pageX,b.pageY=b.originalEvent.changedTouches[0].pageY,b.target=i.elementFromPoint(b.originalEvent.changedTouches[0].pageX-window.pageXOffset,b.originalEvent.changedTouches[0].pageY-window.pageYOffset)),c.is_down){if(!c.is_drag){if(!(Math.abs(b.pageX-c.init_x)>(c.is_touch?a.vakata.dnd.settings.threshold_touch:a.vakata.dnd.settings.threshold)||Math.abs(b.pageY-c.init_y)>(c.is_touch?a.vakata.dnd.settings.threshold_touch:a.vakata.dnd.settings.threshold)))return;c.helper&&(c.helper.appendTo(i.body),c.helper_w=c.helper.outerWidth()),c.is_drag=!0,a(c.target).one("click.vakata",!1),a.vakata.dnd._trigger("start",b)}var d=!1,e=!1,f=!1,g=!1,h=!1,j=!1,k=!1,l=!1,m=!1,n=!1;return c.scroll_t=0,c.scroll_l=0,c.scroll_e=!1,a(a(b.target).parentsUntil("body").addBack().get().reverse()).filter(function(){return/^auto|scroll$/.test(a(this).css("overflow"))&&(this.scrollHeight>this.offsetHeight||this.scrollWidth>this.offsetWidth)}).each(function(){var d=a(this),e=d.offset();return this.scrollHeight>this.offsetHeight&&(e.top+d.height()-b.pageY<a.vakata.dnd.settings.scroll_proximity&&(c.scroll_t=1),b.pageY-e.top<a.vakata.dnd.settings.scroll_proximity&&(c.scroll_t=-1)),this.scrollWidth>this.offsetWidth&&(e.left+d.width()-b.pageX<a.vakata.dnd.settings.scroll_proximity&&(c.scroll_l=1),b.pageX-e.left<a.vakata.dnd.settings.scroll_proximity&&(c.scroll_l=-1)),c.scroll_t||c.scroll_l?(c.scroll_e=a(this),!1):void 0}),c.scroll_e||(d=a(i),e=a(window),f=d.height(),g=e.height(),h=d.width(),j=e.width(),k=d.scrollTop(),l=d.scrollLeft(),f>g&&b.pageY-k<a.vakata.dnd.settings.scroll_proximity&&(c.scroll_t=-1),f>g&&g-(b.pageY-k)<a.vakata.dnd.settings.scroll_proximity&&(c.scroll_t=1),h>j&&b.pageX-l<a.vakata.dnd.settings.scroll_proximity&&(c.scroll_l=-1),h>j&&j-(b.pageX-l)<a.vakata.dnd.settings.scroll_proximity&&(c.scroll_l=1),(c.scroll_t||c.scroll_l)&&(c.scroll_e=d)),c.scroll_e&&a.vakata.dnd._scroll(!0),c.helper&&(m=parseInt(b.pageY+a.vakata.dnd.settings.helper_top,10),n=parseInt(b.pageX+a.vakata.dnd.settings.helper_left,10),f&&m+25>f&&(m=f-50),h&&n+c.helper_w>h&&(n=h-(c.helper_w+2)),c.helper.css({left:n+"px",top:m+"px"})),a.vakata.dnd._trigger("move",b),!1}},stop:function(b){if("touchend"===b.type&&b.originalEvent&&b.originalEvent.changedTouches&&b.originalEvent.changedTouches[0]&&(b.pageX=b.originalEvent.changedTouches[0].pageX,b.pageY=b.originalEvent.changedTouches[0].pageY,b.target=i.elementFromPoint(b.originalEvent.changedTouches[0].pageX-window.pageXOffset,b.originalEvent.changedTouches[0].pageY-window.pageYOffset)),c.is_drag)b.target!==c.target&&a(c.target).off("click.vakata"),a.vakata.dnd._trigger("stop",b);else if("touchend"===b.type&&b.target===c.target){var d=setTimeout(function(){a(b.target).click()},100);a(b.target).one("click",function(){d&&clearTimeout(d)})}return a.vakata.dnd._clean(),!1}}}(a),a.jstree.defaults.massload=null,a.jstree.plugins.massload=function(b,c){this.init=function(a,b){this._data.massload={},c.init.call(this,a,b)},this._load_nodes=function(b,d,e,f){var g=this.settings.massload,h=JSON.stringify(b),i=[],j=this._model.data,k,l,m;if(!e){for(k=0,l=b.length;l>k;k++)(!j[b[k]]||!j[b[k]].state.loaded&&!j[b[k]].state.failed||f)&&(i.push(b[k]),m=this.get_node(b[k],!0),m&&m.length&&m.addClass("jstree-loading").attr("aria-busy",!0));if(this._data.massload={},i.length){if(a.isFunction(g))return g.call(this,i,a.proxy(function(a){var g,h;if(a)for(g in a)a.hasOwnProperty(g)&&(this._data.massload[g]=a[g]);for(g=0,h=b.length;h>g;g++)m=this.get_node(b[g],!0),m&&m.length&&m.removeClass("jstree-loading").attr("aria-busy",!1);c._load_nodes.call(this,b,d,e,f)},this));if("object"==typeof g&&g&&g.url)return g=a.extend(!0,{},g),a.isFunction(g.url)&&(g.url=g.url.call(this,i)),a.isFunction(g.data)&&(g.data=g.data.call(this,i)),a.ajax(g).done(a.proxy(function(a,g,h){var i,j;if(a)for(i in a)a.hasOwnProperty(i)&&(this._data.massload[i]=a[i]);for(i=0,j=b.length;j>i;i++)m=this.get_node(b[i],!0),m&&m.length&&m.removeClass("jstree-loading").attr("aria-busy",!1);c._load_nodes.call(this,b,d,e,f)},this)).fail(a.proxy(function(a){c._load_nodes.call(this,b,d,e,f)},this))}}return c._load_nodes.call(this,b,d,e,f)},this._load_node=function(b,d){var e=this._data.massload[b.id],f=null,g;return e?(f=this["string"==typeof e?"_append_html_data":"_append_json_data"](b,"string"==typeof e?a(a.parseHTML(e)).filter(function(){return 3!==this.nodeType}):e,function(a){d.call(this,a)}),g=this.get_node(b.id,!0),g&&g.length&&g.removeClass("jstree-loading").attr("aria-busy",!1),delete this._data.massload[b.id],f):c._load_node.call(this,b,d)}},a.jstree.defaults.search={ajax:!1,fuzzy:!1,case_sensitive:!1,show_only_matches:!1,show_only_matches_children:!1,close_opened_onclear:!0,search_leaves_only:!1,search_callback:!1},a.jstree.plugins.search=function(c,d){this.bind=function(){d.bind.call(this),this._data.search.str="",this._data.search.dom=a(),this._data.search.res=[],this._data.search.opn=[],this._data.search.som=!1,this._data.search.smc=!1,this._data.search.hdn=[],this.element.on("search.jstree",a.proxy(function(b,c){if(this._data.search.som&&c.res.length){var d=this._model.data,e,f,g=[],h,i;for(e=0,f=c.res.length;f>e;e++)if(d[c.res[e]]&&!d[c.res[e]].state.hidden&&(g.push(c.res[e]),g=g.concat(d[c.res[e]].parents),this._data.search.smc))for(h=0,i=d[c.res[e]].children_d.length;i>h;h++)d[d[c.res[e]].children_d[h]]&&!d[d[c.res[e]].children_d[h]].state.hidden&&g.push(d[c.res[e]].children_d[h]);g=a.vakata.array_remove_item(a.vakata.array_unique(g),a.jstree.root),this._data.search.hdn=this.hide_all(!0),this.show_node(g,!0),this.redraw(!0)}},this)).on("clear_search.jstree",a.proxy(function(a,b){this._data.search.som&&b.res.length&&(this.show_node(this._data.search.hdn,!0),this.redraw(!0))},this))},this.search=function(c,d,e,f,g,h){if(c===!1||""===a.trim(c.toString()))return this.clear_search();f=this.get_node(f),f=f&&f.id?f.id:null,c=c.toString();var i=this.settings.search,j=i.ajax?i.ajax:!1,k=this._model.data,l=null,m=[],n=[],o,p;if(this._data.search.res.length&&!g&&this.clear_search(),e===b&&(e=i.show_only_matches),h===b&&(h=i.show_only_matches_children),!d&&j!==!1)return a.isFunction(j)?j.call(this,c,a.proxy(function(b){b&&b.d&&(b=b.d),this._load_nodes(a.isArray(b)?a.vakata.array_unique(b):[],function(){this.search(c,!0,e,f,g,h)})},this),f):(j=a.extend({},j),j.data||(j.data={}),j.data.str=c,f&&(j.data.inside=f),this._data.search.lastRequest&&this._data.search.lastRequest.abort(),this._data.search.lastRequest=a.ajax(j).fail(a.proxy(function(){this._data.core.last_error={error:"ajax",plugin:"search",id:"search_01",reason:"Could not load search parents",data:JSON.stringify(j)},this.settings.core.error.call(this,this._data.core.last_error)},this)).done(a.proxy(function(b){b&&b.d&&(b=b.d),this._load_nodes(a.isArray(b)?a.vakata.array_unique(b):[],function(){this.search(c,!0,e,f,g,h)})},this)),this._data.search.lastRequest);if(g||(this._data.search.str=c,this._data.search.dom=a(),this._data.search.res=[],this._data.search.opn=[],this._data.search.som=e,this._data.search.smc=h),l=new a.vakata.search(c,!0,{caseSensitive:i.case_sensitive,fuzzy:i.fuzzy}),a.each(k[f?f:a.jstree.root].children_d,function(a,b){var d=k[b];d.text&&!d.state.hidden&&(!i.search_leaves_only||d.state.loaded&&0===d.children.length)&&(i.search_callback&&i.search_callback.call(this,c,d)||!i.search_callback&&l.search(d.text).isMatch)&&(m.push(b),n=n.concat(d.parents))}),m.length){for(n=a.vakata.array_unique(n),o=0,p=n.length;p>o;o++)n[o]!==a.jstree.root&&k[n[o]]&&this.open_node(n[o],null,0)===!0&&this._data.search.opn.push(n[o]);g?(this._data.search.dom=this._data.search.dom.add(a(this.element[0].querySelectorAll("#"+a.map(m,function(b){return-1!=="0123456789".indexOf(b[0])?"\\3"+b[0]+" "+b.substr(1).replace(a.jstree.idregex,"\\$&"):b.replace(a.jstree.idregex,"\\$&")}).join(", #")))),this._data.search.res=a.vakata.array_unique(this._data.search.res.concat(m))):(this._data.search.dom=a(this.element[0].querySelectorAll("#"+a.map(m,function(b){return-1!=="0123456789".indexOf(b[0])?"\\3"+b[0]+" "+b.substr(1).replace(a.jstree.idregex,"\\$&"):b.replace(a.jstree.idregex,"\\$&")}).join(", #"))),this._data.search.res=m),this._data.search.dom.children(".jstree-anchor").addClass("jstree-search")}this.trigger("search",{nodes:this._data.search.dom,str:c,res:this._data.search.res,show_only_matches:e})},this.clear_search=function(){this.settings.search.close_opened_onclear&&this.close_node(this._data.search.opn,0),this.trigger("clear_search",{nodes:this._data.search.dom,str:this._data.search.str,res:this._data.search.res}),this._data.search.res.length&&(this._data.search.dom=a(this.element[0].querySelectorAll("#"+a.map(this._data.search.res,function(b){return-1!=="0123456789".indexOf(b[0])?"\\3"+b[0]+" "+b.substr(1).replace(a.jstree.idregex,"\\$&"):b.replace(a.jstree.idregex,"\\$&")}).join(", #"))),this._data.search.dom.children(".jstree-anchor").removeClass("jstree-search")),this._data.search.str="",this._data.search.res=[],this._data.search.opn=[],this._data.search.dom=a()},this.redraw_node=function(b,c,e,f){if(b=d.redraw_node.apply(this,arguments),b&&-1!==a.inArray(b.id,this._data.search.res)){var g,h,i=null;for(g=0,h=b.childNodes.length;h>g;g++)if(b.childNodes[g]&&b.childNodes[g].className&&-1!==b.childNodes[g].className.indexOf("jstree-anchor")){i=b.childNodes[g];break}i&&(i.className+=" jstree-search")}return b}},function(a){a.vakata.search=function(b,c,d){d=d||{},d=a.extend({},a.vakata.search.defaults,d),d.fuzzy!==!1&&(d.fuzzy=!0),b=d.caseSensitive?b:b.toLowerCase();var e=d.location,f=d.distance,g=d.threshold,h=b.length,i,j,k,l;return h>32&&(d.fuzzy=!1),d.fuzzy&&(i=1<<h-1,j=function(){var a={},c=0;for(c=0;h>c;c++)a[b.charAt(c)]=0;for(c=0;h>c;c++)a[b.charAt(c)]|=1<<h-c-1;return a}(),k=function(a,b){var c=a/h,d=Math.abs(e-b);return f?c+d/f:d?1:c}),l=function(a){if(a=d.caseSensitive?a:a.toLowerCase(),b===a||-1!==a.indexOf(b))return{isMatch:!0,score:0};if(!d.fuzzy)return{isMatch:!1,score:1};var c,f,l=a.length,m=g,n=a.indexOf(b,e),o,p,q=h+l,r,s,t,u,v,w=1,x=[];for(-1!==n&&(m=Math.min(k(0,n),m),n=a.lastIndexOf(b,e+h),-1!==n&&(m=Math.min(k(0,n),m))),n=-1,c=0;h>c;c++){o=0,p=q;while(p>o)k(c,e+p)<=m?o=p:q=p,p=Math.floor((q-o)/2+o);for(q=p,s=Math.max(1,e-p+1),t=Math.min(e+p,l)+h,u=new Array(t+2),u[t+1]=(1<<c)-1,f=t;f>=s;f--)if(v=j[a.charAt(f-1)],0===c?u[f]=(u[f+1]<<1|1)&v:u[f]=(u[f+1]<<1|1)&v|((r[f+1]|r[f])<<1|1)|r[f+1],u[f]&i&&(w=k(c,f-1),m>=w)){if(m=w,n=f-1,x.push(n),!(n>e))break;s=Math.max(1,2*e-n)}if(k(c+1,e)>m)break;r=u}return{isMatch:n>=0,score:w}},c===!0?{search:l}:l(c)},a.vakata.search.defaults={location:0,distance:100,threshold:.6,fuzzy:!1,caseSensitive:!1}}(a),a.jstree.defaults.sort=function(a,b){return this.get_text(a)>this.get_text(b)?1:-1},a.jstree.plugins.sort=function(b,c){this.bind=function(){c.bind.call(this),this.element.on("model.jstree",a.proxy(function(a,b){this.sort(b.parent,!0)},this)).on("rename_node.jstree create_node.jstree",a.proxy(function(a,b){this.sort(b.parent||b.node.parent,!1),this.redraw_node(b.parent||b.node.parent,!0)},this)).on("move_node.jstree copy_node.jstree",a.proxy(function(a,b){this.sort(b.parent,!1),this.redraw_node(b.parent,!0)},this))},this.sort=function(b,c){var d,e;if(b=this.get_node(b),b&&b.children&&b.children.length&&(b.children.sort(a.proxy(this.settings.sort,this)),c))for(d=0,e=b.children_d.length;e>d;d++)this.sort(b.children_d[d],!1)}};var m=!1;a.jstree.defaults.state={key:"jstree",events:"changed.jstree open_node.jstree close_node.jstree check_node.jstree uncheck_node.jstree",ttl:!1,filter:!1,preserve_loaded:!1},a.jstree.plugins.state=function(b,c){this.bind=function(){c.bind.call(this);var b=a.proxy(function(){this.element.on(this.settings.state.events,a.proxy(function(){m&&clearTimeout(m),m=setTimeout(a.proxy(function(){this.save_state()},this),100)},this)),this.trigger("state_ready")},this);this.element.on("ready.jstree",a.proxy(function(a,c){this.element.one("restore_state.jstree",b),this.restore_state()||b()},this))},this.save_state=function(){var b=this.get_state();this.settings.state.preserve_loaded||delete b.core.loaded;var c={state:b,ttl:this.settings.state.ttl,sec:+new Date};a.vakata.storage.set(this.settings.state.key,JSON.stringify(c))},this.restore_state=function(){var b=a.vakata.storage.get(this.settings.state.key);if(b)try{b=JSON.parse(b)}catch(c){return!1}return b&&b.ttl&&b.sec&&+new Date-b.sec>b.ttl?!1:(b&&b.state&&(b=b.state),b&&a.isFunction(this.settings.state.filter)&&(b=this.settings.state.filter.call(this,b)),b?(this.settings.state.preserve_loaded||delete b.core.loaded,this.element.one("set_state.jstree",function(c,d){d.instance.trigger("restore_state",{state:a.extend(!0,{},b)})}),this.set_state(b),!0):!1)},this.clear_state=function(){return a.vakata.storage.del(this.settings.state.key)}},function(a,b){a.vakata.storage={set:function(a,b){return window.localStorage.setItem(a,b)},get:function(a){return window.localStorage.getItem(a)},del:function(a){return window.localStorage.removeItem(a)}}}(a),a.jstree.defaults.types={"default":{}},a.jstree.defaults.types[a.jstree.root]={},a.jstree.plugins.types=function(c,d){this.init=function(c,e){var f,g;if(e&&e.types&&e.types["default"])for(f in e.types)if("default"!==f&&f!==a.jstree.root&&e.types.hasOwnProperty(f))for(g in e.types["default"])e.types["default"].hasOwnProperty(g)&&e.types[f][g]===b&&(e.types[f][g]=e.types["default"][g]);d.init.call(this,c,e),this._model.data[a.jstree.root].type=a.jstree.root},this.refresh=function(b,c){d.refresh.call(this,b,c),this._model.data[a.jstree.root].type=a.jstree.root},this.bind=function(){this.element.on("model.jstree",a.proxy(function(c,d){var e=this._model.data,f=d.nodes,g=this.settings.types,h,i,j="default",k;for(h=0,i=f.length;i>h;h++){if(j="default",e[f[h]].original&&e[f[h]].original.type&&g[e[f[h]].original.type]&&(j=e[f[h]].original.type),e[f[h]].data&&e[f[h]].data.jstree&&e[f[h]].data.jstree.type&&g[e[f[h]].data.jstree.type]&&(j=e[f[h]].data.jstree.type),e[f[h]].type=j,e[f[h]].icon===!0&&g[j].icon!==b&&(e[f[h]].icon=g[j].icon),g[j].li_attr!==b&&"object"==typeof g[j].li_attr)for(k in g[j].li_attr)if(g[j].li_attr.hasOwnProperty(k)){if("id"===k)continue;e[f[h]].li_attr[k]===b?e[f[h]].li_attr[k]=g[j].li_attr[k]:"class"===k&&(e[f[h]].li_attr["class"]=g[j].li_attr["class"]+" "+e[f[h]].li_attr["class"])}if(g[j].a_attr!==b&&"object"==typeof g[j].a_attr)for(k in g[j].a_attr)if(g[j].a_attr.hasOwnProperty(k)){if("id"===k)continue;e[f[h]].a_attr[k]===b?e[f[h]].a_attr[k]=g[j].a_attr[k]:"href"===k&&"#"===e[f[h]].a_attr[k]?e[f[h]].a_attr.href=g[j].a_attr.href:"class"===k&&(e[f[h]].a_attr["class"]=g[j].a_attr["class"]+" "+e[f[h]].a_attr["class"])}}e[a.jstree.root].type=a.jstree.root},this)),d.bind.call(this)},this.get_json=function(b,c,e){var f,g,h=this._model.data,i=c?a.extend(!0,{},c,{no_id:!1}):{},j=d.get_json.call(this,b,i,e);if(j===!1)return!1;if(a.isArray(j))for(f=0,g=j.length;g>f;f++)j[f].type=j[f].id&&h[j[f].id]&&h[j[f].id].type?h[j[f].id].type:"default",c&&c.no_id&&(delete j[f].id,j[f].li_attr&&j[f].li_attr.id&&delete j[f].li_attr.id,j[f].a_attr&&j[f].a_attr.id&&delete j[f].a_attr.id);else j.type=j.id&&h[j.id]&&h[j.id].type?h[j.id].type:"default",c&&c.no_id&&(j=this._delete_ids(j));return j},this._delete_ids=function(b){if(a.isArray(b)){for(var c=0,d=b.length;d>c;c++)b[c]=this._delete_ids(b[c]);return b}return delete b.id,
b.li_attr&&b.li_attr.id&&delete b.li_attr.id,b.a_attr&&b.a_attr.id&&delete b.a_attr.id,b.children&&a.isArray(b.children)&&(b.children=this._delete_ids(b.children)),b},this.check=function(c,e,f,g,h){if(d.check.call(this,c,e,f,g,h)===!1)return!1;e=e&&e.id?e:this.get_node(e),f=f&&f.id?f:this.get_node(f);var i=e&&e.id?h&&h.origin?h.origin:a.jstree.reference(e.id):null,j,k,l,m;switch(i=i&&i._model&&i._model.data?i._model.data:null,c){case"create_node":case"move_node":case"copy_node":if("move_node"!==c||-1===a.inArray(e.id,f.children)){if(j=this.get_rules(f),j.max_children!==b&&-1!==j.max_children&&j.max_children===f.children.length)return this._data.core.last_error={error:"check",plugin:"types",id:"types_01",reason:"max_children prevents function: "+c,data:JSON.stringify({chk:c,pos:g,obj:e&&e.id?e.id:!1,par:f&&f.id?f.id:!1})},!1;if(j.valid_children!==b&&-1!==j.valid_children&&-1===a.inArray(e.type||"default",j.valid_children))return this._data.core.last_error={error:"check",plugin:"types",id:"types_02",reason:"valid_children prevents function: "+c,data:JSON.stringify({chk:c,pos:g,obj:e&&e.id?e.id:!1,par:f&&f.id?f.id:!1})},!1;if(i&&e.children_d&&e.parents){for(k=0,l=0,m=e.children_d.length;m>l;l++)k=Math.max(k,i[e.children_d[l]].parents.length);k=k-e.parents.length+1}(0>=k||k===b)&&(k=1);do{if(j.max_depth!==b&&-1!==j.max_depth&&j.max_depth<k)return this._data.core.last_error={error:"check",plugin:"types",id:"types_03",reason:"max_depth prevents function: "+c,data:JSON.stringify({chk:c,pos:g,obj:e&&e.id?e.id:!1,par:f&&f.id?f.id:!1})},!1;f=this.get_node(f.parent),j=this.get_rules(f),k++}while(f)}}return!0},this.get_rules=function(a){if(a=this.get_node(a),!a)return!1;var c=this.get_type(a,!0);return c.max_depth===b&&(c.max_depth=-1),c.max_children===b&&(c.max_children=-1),c.valid_children===b&&(c.valid_children=-1),c},this.get_type=function(b,c){return b=this.get_node(b),b?c?a.extend({type:b.type},this.settings.types[b.type]):b.type:!1},this.set_type=function(c,d){var e=this._model.data,f,g,h,i,j,k,l,m;if(a.isArray(c)){for(c=c.slice(),g=0,h=c.length;h>g;g++)this.set_type(c[g],d);return!0}if(f=this.settings.types,c=this.get_node(c),!f[d]||!c)return!1;if(l=this.get_node(c,!0),l&&l.length&&(m=l.children(".jstree-anchor")),i=c.type,j=this.get_icon(c),c.type=d,(j===!0||!f[i]||f[i].icon!==b&&j===f[i].icon)&&this.set_icon(c,f[d].icon!==b?f[d].icon:!0),f[i]&&f[i].li_attr!==b&&"object"==typeof f[i].li_attr)for(k in f[i].li_attr)if(f[i].li_attr.hasOwnProperty(k)){if("id"===k)continue;"class"===k?(e[c.id].li_attr["class"]=(e[c.id].li_attr["class"]||"").replace(f[i].li_attr[k],""),l&&l.removeClass(f[i].li_attr[k])):e[c.id].li_attr[k]===f[i].li_attr[k]&&(e[c.id].li_attr[k]=null,l&&l.removeAttr(k))}if(f[i]&&f[i].a_attr!==b&&"object"==typeof f[i].a_attr)for(k in f[i].a_attr)if(f[i].a_attr.hasOwnProperty(k)){if("id"===k)continue;"class"===k?(e[c.id].a_attr["class"]=(e[c.id].a_attr["class"]||"").replace(f[i].a_attr[k],""),m&&m.removeClass(f[i].a_attr[k])):e[c.id].a_attr[k]===f[i].a_attr[k]&&("href"===k?(e[c.id].a_attr[k]="#",m&&m.attr("href","#")):(delete e[c.id].a_attr[k],m&&m.removeAttr(k)))}if(f[d].li_attr!==b&&"object"==typeof f[d].li_attr)for(k in f[d].li_attr)if(f[d].li_attr.hasOwnProperty(k)){if("id"===k)continue;e[c.id].li_attr[k]===b?(e[c.id].li_attr[k]=f[d].li_attr[k],l&&("class"===k?l.addClass(f[d].li_attr[k]):l.attr(k,f[d].li_attr[k]))):"class"===k&&(e[c.id].li_attr["class"]=f[d].li_attr[k]+" "+e[c.id].li_attr["class"],l&&l.addClass(f[d].li_attr[k]))}if(f[d].a_attr!==b&&"object"==typeof f[d].a_attr)for(k in f[d].a_attr)if(f[d].a_attr.hasOwnProperty(k)){if("id"===k)continue;e[c.id].a_attr[k]===b?(e[c.id].a_attr[k]=f[d].a_attr[k],m&&("class"===k?m.addClass(f[d].a_attr[k]):m.attr(k,f[d].a_attr[k]))):"href"===k&&"#"===e[c.id].a_attr[k]?(e[c.id].a_attr.href=f[d].a_attr.href,m&&m.attr("href",f[d].a_attr.href)):"class"===k&&(e[c.id].a_attr["class"]=f[d].a_attr["class"]+" "+e[c.id].a_attr["class"],m&&m.addClass(f[d].a_attr[k]))}return!0}},a.jstree.defaults.unique={case_sensitive:!1,trim_whitespace:!1,duplicate:function(a,b){return a+" ("+b+")"}},a.jstree.plugins.unique=function(c,d){this.check=function(b,c,e,f,g){if(d.check.call(this,b,c,e,f,g)===!1)return!1;if(c=c&&c.id?c:this.get_node(c),e=e&&e.id?e:this.get_node(e),!e||!e.children)return!0;var h="rename_node"===b?f:c.text,i=[],j=this.settings.unique.case_sensitive,k=this.settings.unique.trim_whitespace,l=this._model.data,m,n,o;for(m=0,n=e.children.length;n>m;m++)o=l[e.children[m]].text,j||(o=o.toLowerCase()),k&&(o=o.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")),i.push(o);switch(j||(h=h.toLowerCase()),k&&(h=h.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")),b){case"delete_node":return!0;case"rename_node":return o=c.text||"",j||(o=o.toLowerCase()),k&&(o=o.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")),m=-1===a.inArray(h,i)||c.text&&o===h,m||(this._data.core.last_error={error:"check",plugin:"unique",id:"unique_01",reason:"Child with name "+h+" already exists. Preventing: "+b,data:JSON.stringify({chk:b,pos:f,obj:c&&c.id?c.id:!1,par:e&&e.id?e.id:!1})}),m;case"create_node":return m=-1===a.inArray(h,i),m||(this._data.core.last_error={error:"check",plugin:"unique",id:"unique_04",reason:"Child with name "+h+" already exists. Preventing: "+b,data:JSON.stringify({chk:b,pos:f,obj:c&&c.id?c.id:!1,par:e&&e.id?e.id:!1})}),m;case"copy_node":return m=-1===a.inArray(h,i),m||(this._data.core.last_error={error:"check",plugin:"unique",id:"unique_02",reason:"Child with name "+h+" already exists. Preventing: "+b,data:JSON.stringify({chk:b,pos:f,obj:c&&c.id?c.id:!1,par:e&&e.id?e.id:!1})}),m;case"move_node":return m=c.parent===e.id&&(!g||!g.is_multi)||-1===a.inArray(h,i),m||(this._data.core.last_error={error:"check",plugin:"unique",id:"unique_03",reason:"Child with name "+h+" already exists. Preventing: "+b,data:JSON.stringify({chk:b,pos:f,obj:c&&c.id?c.id:!1,par:e&&e.id?e.id:!1})}),m}return!0},this.create_node=function(c,e,f,g,h){if(!e||e.text===b){if(null===c&&(c=a.jstree.root),c=this.get_node(c),!c)return d.create_node.call(this,c,e,f,g,h);if(f=f===b?"last":f,!f.toString().match(/^(before|after)$/)&&!h&&!this.is_loaded(c))return d.create_node.call(this,c,e,f,g,h);e||(e={});var i,j,k,l,m,n=this._model.data,o=this.settings.unique.case_sensitive,p=this.settings.unique.trim_whitespace,q=this.settings.unique.duplicate,r;for(j=i=this.get_string("New node"),k=[],l=0,m=c.children.length;m>l;l++)r=n[c.children[l]].text,o||(r=r.toLowerCase()),p&&(r=r.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")),k.push(r);l=1,r=j,o||(r=r.toLowerCase()),p&&(r=r.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""));while(-1!==a.inArray(r,k))j=q.call(this,i,++l).toString(),r=j,o||(r=r.toLowerCase()),p&&(r=r.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""));e.text=j}return d.create_node.call(this,c,e,f,g,h)}};var n=i.createElement("DIV");if(n.setAttribute("unselectable","on"),n.setAttribute("role","presentation"),n.className="jstree-wholerow",n.innerHTML="&#160;",a.jstree.plugins.wholerow=function(b,c){this.bind=function(){c.bind.call(this),this.element.on("ready.jstree set_state.jstree",a.proxy(function(){this.hide_dots()},this)).on("init.jstree loading.jstree ready.jstree",a.proxy(function(){this.get_container_ul().addClass("jstree-wholerow-ul")},this)).on("deselect_all.jstree",a.proxy(function(a,b){this.element.find(".jstree-wholerow-clicked").removeClass("jstree-wholerow-clicked")},this)).on("changed.jstree",a.proxy(function(a,b){this.element.find(".jstree-wholerow-clicked").removeClass("jstree-wholerow-clicked");var c=!1,d,e;for(d=0,e=b.selected.length;e>d;d++)c=this.get_node(b.selected[d],!0),c&&c.length&&c.children(".jstree-wholerow").addClass("jstree-wholerow-clicked")},this)).on("open_node.jstree",a.proxy(function(a,b){this.get_node(b.node,!0).find(".jstree-clicked").parent().children(".jstree-wholerow").addClass("jstree-wholerow-clicked")},this)).on("hover_node.jstree dehover_node.jstree",a.proxy(function(a,b){"hover_node"===a.type&&this.is_disabled(b.node)||this.get_node(b.node,!0).children(".jstree-wholerow")["hover_node"===a.type?"addClass":"removeClass"]("jstree-wholerow-hovered")},this)).on("contextmenu.jstree",".jstree-wholerow",a.proxy(function(b){if(this._data.contextmenu){b.preventDefault();var c=a.Event("contextmenu",{metaKey:b.metaKey,ctrlKey:b.ctrlKey,altKey:b.altKey,shiftKey:b.shiftKey,pageX:b.pageX,pageY:b.pageY});a(b.currentTarget).closest(".jstree-node").children(".jstree-anchor").first().trigger(c)}},this)).on("click.jstree",".jstree-wholerow",function(b){b.stopImmediatePropagation();var c=a.Event("click",{metaKey:b.metaKey,ctrlKey:b.ctrlKey,altKey:b.altKey,shiftKey:b.shiftKey});a(b.currentTarget).closest(".jstree-node").children(".jstree-anchor").first().trigger(c).focus()}).on("dblclick.jstree",".jstree-wholerow",function(b){b.stopImmediatePropagation();var c=a.Event("dblclick",{metaKey:b.metaKey,ctrlKey:b.ctrlKey,altKey:b.altKey,shiftKey:b.shiftKey});a(b.currentTarget).closest(".jstree-node").children(".jstree-anchor").first().trigger(c).focus()}).on("click.jstree",".jstree-leaf > .jstree-ocl",a.proxy(function(b){b.stopImmediatePropagation();var c=a.Event("click",{metaKey:b.metaKey,ctrlKey:b.ctrlKey,altKey:b.altKey,shiftKey:b.shiftKey});a(b.currentTarget).closest(".jstree-node").children(".jstree-anchor").first().trigger(c).focus()},this)).on("mouseover.jstree",".jstree-wholerow, .jstree-icon",a.proxy(function(a){return a.stopImmediatePropagation(),this.is_disabled(a.currentTarget)||this.hover_node(a.currentTarget),!1},this)).on("mouseleave.jstree",".jstree-node",a.proxy(function(a){this.dehover_node(a.currentTarget)},this))},this.teardown=function(){this.settings.wholerow&&this.element.find(".jstree-wholerow").remove(),c.teardown.call(this)},this.redraw_node=function(b,d,e,f){if(b=c.redraw_node.apply(this,arguments)){var g=n.cloneNode(!0);-1!==a.inArray(b.id,this._data.core.selected)&&(g.className+=" jstree-wholerow-clicked"),this._data.core.focused&&this._data.core.focused===b.id&&(g.className+=" jstree-wholerow-hovered"),b.insertBefore(g,b.childNodes[0])}return b}},window.customElements&&Object&&Object.create){var o=Object.create(HTMLElement.prototype);o.createdCallback=function(){var b={core:{},plugins:[]},c;for(c in a.jstree.plugins)a.jstree.plugins.hasOwnProperty(c)&&this.attributes[c]&&(b.plugins.push(c),this.getAttribute(c)&&JSON.parse(this.getAttribute(c))&&(b[c]=JSON.parse(this.getAttribute(c))));for(c in a.jstree.defaults.core)a.jstree.defaults.core.hasOwnProperty(c)&&this.attributes[c]&&(b.core[c]=JSON.parse(this.getAttribute(c))||this.getAttribute(c));a(this).jstree(b)};try{window.customElements.define("vakata-jstree",function(){},{prototype:o})}catch(p){}}}});
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.cronstrue=t():e.cronstrue=t()}("undefined"!=typeof self?self:this,function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=4)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=n(2),i=function(){function e(t,n){this.expression=t,this.options=n,this.expressionParts=new Array(5),e.locales[n.locale]?this.i18n=e.locales[n.locale]:(console.warn("Locale '"+n.locale+"' could not be found; falling back to 'en'."),this.i18n=e.locales.en),void 0===n.use24HourTimeFormat&&(n.use24HourTimeFormat=this.i18n.use24HourTimeFormatByDefault())}return e.toString=function(t,n){var r=void 0===n?{}:n,o=r.throwExceptionOnParseError,i=void 0===o||o,s=r.verbose,a=void 0!==s&&s,u=r.dayOfWeekStartIndexZero,c=void 0===u||u,f=r.use24HourTimeFormat,p=r.locale;return new e(t,{throwExceptionOnParseError:i,verbose:a,dayOfWeekStartIndexZero:c,use24HourTimeFormat:f,locale:void 0===p?"en":p}).getFullDescription()},e.initialize=function(t){e.specialCharacters=["/","-",",","*"],t.load(e.locales)},e.prototype.getFullDescription=function(){var e="";try{var t=new o.CronParser(this.expression,this.options.dayOfWeekStartIndexZero);this.expressionParts=t.parse();var n=this.getTimeOfDayDescription(),r=this.getDayOfMonthDescription(),i=this.getMonthDescription();e+=n+r+this.getDayOfWeekDescription()+i+this.getYearDescription(),e=(e=this.transformVerbosity(e,this.options.verbose)).charAt(0).toLocaleUpperCase()+e.substr(1)}catch(t){if(this.options.throwExceptionOnParseError)throw""+t;e=this.i18n.anErrorOccuredWhenGeneratingTheExpressionD()}return e},e.prototype.getTimeOfDayDescription=function(){var t=this.expressionParts[0],n=this.expressionParts[1],o=this.expressionParts[2],i="";if(r.StringUtilities.containsAny(n,e.specialCharacters)||r.StringUtilities.containsAny(o,e.specialCharacters)||r.StringUtilities.containsAny(t,e.specialCharacters))if(t||!(n.indexOf("-")>-1)||n.indexOf(",")>-1||n.indexOf("/")>-1||r.StringUtilities.containsAny(o,e.specialCharacters))if(!t&&o.indexOf(",")>-1&&-1==o.indexOf("-")&&-1==o.indexOf("/")&&!r.StringUtilities.containsAny(n,e.specialCharacters)){var s=o.split(",");i+=this.i18n.at();for(var a=0;a<s.length;a++)i+=" ",i+=this.formatTime(s[a],n,""),a<s.length-2&&(i+=","),a==s.length-2&&(i+=this.i18n.spaceAnd())}else{var u=this.getSecondsDescription(),c=this.getMinutesDescription(),f=this.getHoursDescription();(i+=u).length>0&&c.length>0&&(i+=", "),(i+=c).length>0&&f.length>0&&(i+=", "),i+=f}else{var p=n.split("-");i+=r.StringUtilities.format(this.i18n.everyMinuteBetweenX0AndX1(),this.formatTime(o,p[0],""),this.formatTime(o,p[1],""))}else i+=this.i18n.atSpace()+this.formatTime(o,n,t);return i},e.prototype.getSecondsDescription=function(){var e=this;return this.getSegmentDescription(this.expressionParts[0],this.i18n.everySecond(),function(e){return e},function(t){return r.StringUtilities.format(e.i18n.everyX0Seconds(),t)},function(t){return e.i18n.secondsX0ThroughX1PastTheMinute()},function(t){return"0"==t?"":parseInt(t)<20?e.i18n.atX0SecondsPastTheMinute():e.i18n.atX0SecondsPastTheMinuteGt20()||e.i18n.atX0SecondsPastTheMinute()})},e.prototype.getMinutesDescription=function(){var e=this,t=this.expressionParts[0];return this.getSegmentDescription(this.expressionParts[1],this.i18n.everyMinute(),function(e){return e},function(t){return r.StringUtilities.format(e.i18n.everyX0Minutes(),t)},function(t){return e.i18n.minutesX0ThroughX1PastTheHour()},function(n){try{return"0"==n&&""==t?"":parseInt(n)<20?e.i18n.atX0MinutesPastTheHour():e.i18n.atX0MinutesPastTheHourGt20()||e.i18n.atX0MinutesPastTheHour()}catch(t){return e.i18n.atX0MinutesPastTheHour()}})},e.prototype.getHoursDescription=function(){var e=this,t=this.expressionParts[2];return this.getSegmentDescription(t,this.i18n.everyHour(),function(t){return e.formatTime(t,"0","")},function(t){return r.StringUtilities.format(e.i18n.everyX0Hours(),t)},function(t){return e.i18n.betweenX0AndX1()},function(t){return e.i18n.atX0()})},e.prototype.getDayOfWeekDescription=function(){var e=this,t=this.i18n.daysOfTheWeek();return"*"==this.expressionParts[5]?"":this.getSegmentDescription(this.expressionParts[5],this.i18n.commaEveryDay(),function(e){var n=e;return e.indexOf("#")>-1?n=e.substr(0,e.indexOf("#")):e.indexOf("L")>-1&&(n=n.replace("L","")),t[parseInt(n)]},function(t){return r.StringUtilities.format(e.i18n.commaEveryX0DaysOfTheWeek(),t)},function(t){return e.i18n.commaX0ThroughX1()},function(t){var n=null;if(t.indexOf("#")>-1){var r=null;switch(t.substring(t.indexOf("#")+1)){case"1":r=e.i18n.first();break;case"2":r=e.i18n.second();break;case"3":r=e.i18n.third();break;case"4":r=e.i18n.fourth();break;case"5":r=e.i18n.fifth()}n=e.i18n.commaOnThe()+r+e.i18n.spaceX0OfTheMonth()}else if(t.indexOf("L")>-1)n=e.i18n.commaOnTheLastX0OfTheMonth();else{n="*"!=e.expressionParts[3]?e.i18n.commaAndOnX0():e.i18n.commaOnlyOnX0()}return n})},e.prototype.getMonthDescription=function(){var e=this,t=this.i18n.monthsOfTheYear();return this.getSegmentDescription(this.expressionParts[4],"",function(e){return t[parseInt(e)-1]},function(t){return r.StringUtilities.format(e.i18n.commaEveryX0Months(),t)},function(t){return e.i18n.commaMonthX0ThroughMonthX1()||e.i18n.commaX0ThroughX1()},function(t){return e.i18n.commaOnlyInX0()})},e.prototype.getDayOfMonthDescription=function(){var e=this,t=null,n=this.expressionParts[3];switch(n){case"L":t=this.i18n.commaOnTheLastDayOfTheMonth();break;case"WL":case"LW":t=this.i18n.commaOnTheLastWeekdayOfTheMonth();break;default:var o=n.match(/(\d{1,2}W)|(W\d{1,2})/);if(o){var i=parseInt(o[0].replace("W","")),s=1==i?this.i18n.firstWeekday():r.StringUtilities.format(this.i18n.weekdayNearestDayX0(),i.toString());t=r.StringUtilities.format(this.i18n.commaOnTheX0OfTheMonth(),s);break}var a=n.match(/L-(\d{1,2})/);if(a){var u=a[1];t=r.StringUtilities.format(this.i18n.commaDaysBeforeTheLastDayOfTheMonth(),u);break}t=this.getSegmentDescription(n,this.i18n.commaEveryDay(),function(t){return"L"==t?e.i18n.lastDay():t},function(t){return"1"==t?e.i18n.commaEveryDay():e.i18n.commaEveryX0Days()},function(t){return e.i18n.commaBetweenDayX0AndX1OfTheMonth()},function(t){return e.i18n.commaOnDayX0OfTheMonth()})}return t},e.prototype.getYearDescription=function(){var e=this;return this.getSegmentDescription(this.expressionParts[6],"",function(e){return/^\d+$/.test(e)?new Date(parseInt(e),1).getFullYear().toString():e},function(t){return r.StringUtilities.format(e.i18n.commaEveryX0Years(),t)},function(t){return e.i18n.commaYearX0ThroughYearX1()||e.i18n.commaX0ThroughX1()},function(t){return e.i18n.commaOnlyInX0()})},e.prototype.getSegmentDescription=function(e,t,n,o,i,s){var a=this,u=null;if(e)if("*"===e)u=t;else if(r.StringUtilities.containsAny(e,["/","-",","]))if(e.indexOf("/")>-1){var c=e.split("/");if(u=r.StringUtilities.format(o(c[1]),n(c[1])),c[0].indexOf("-")>-1)0!=(y=this.generateBetweenSegmentDescription(c[0],i,n)).indexOf(", ")&&(u+=", "),u+=y;else if(!r.StringUtilities.containsAny(c[0],["*",","])){var f=r.StringUtilities.format(s(c[0]),n(c[0]));f=f.replace(", ",""),u+=r.StringUtilities.format(this.i18n.commaStartingX0(),f)}}else if(e.indexOf(",")>-1){c=e.split(",");for(var p="",h=0;h<c.length;h++){var y;if(h>0&&c.length>2&&(p+=",",h<c.length-1&&(p+=" ")),h>0&&c.length>1&&(h==c.length-1||2==c.length)&&(p+=this.i18n.spaceAnd()+" "),c[h].indexOf("-")>-1)p+=y=(y=this.generateBetweenSegmentDescription(c[h],function(e){return a.i18n.commaX0ThroughX1()},n)).replace(", ","");else p+=n(c[h])}u=r.StringUtilities.format(s(e),p)}else e.indexOf("-")>-1&&(u=this.generateBetweenSegmentDescription(e,i,n));else u=r.StringUtilities.format(s(e),n(e));else u="";return u},e.prototype.generateBetweenSegmentDescription=function(e,t,n){var o="",i=e.split("-"),s=n(i[0]),a=n(i[1]);a=a.replace(":00",":59");var u=t(e);return o+=r.StringUtilities.format(u,s,a)},e.prototype.formatTime=function(e,t,n){var r=parseInt(e),o="";this.options.use24HourTimeFormat||(o=r>=12?" PM":" AM",r>12&&(r-=12),0===r&&(r=12));var i=t,s="";return n&&(s=":"+("00"+n).substring(n.length)),("00"+r.toString()).substring(r.toString().length)+":"+("00"+i.toString()).substring(i.toString().length)+s+o},e.prototype.transformVerbosity=function(e,t){return t||(e=(e=(e=(e=e.replace(new RegExp(this.i18n.commaEveryMinute(),"g"),"")).replace(new RegExp(this.i18n.commaEveryHour(),"g"),"")).replace(new RegExp(this.i18n.commaEveryDay(),"g"),"")).replace(/\, ?$/,"")),e},e.locales={},e}();t.ExpressionDescriptor=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){}return e.format=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return e.replace(/%s/g,function(){return t.shift()})},e.containsAny=function(e,t){return t.some(function(t){return e.indexOf(t)>-1})},e}();t.StringUtilities=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){void 0===t&&(t=!0),this.expression=e,this.dayOfWeekStartIndexZero=t}return e.prototype.parse=function(){var e=this.extractParts(this.expression);return this.normalize(e),this.validate(e),e},e.prototype.extractParts=function(e){if(!this.expression)throw new Error("Expression is empty");var t=e.trim().split(/[ ]+/);if(t.length<5)throw new Error("Expression has only "+t.length+" part"+(1==t.length?"":"s")+". At least 5 parts are required.");if(5==t.length)t.unshift(""),t.push("");else if(6==t.length)/\d{4}$/.test(t[5])?t.unshift(""):t.push("");else if(t.length>7)throw new Error("Expression has "+t.length+" parts; too many!");return t},e.prototype.normalize=function(e){var t=this;if(e[3]=e[3].replace("?","*"),e[5]=e[5].replace("?","*"),0==e[0].indexOf("0/")&&(e[0]=e[0].replace("0/","*/")),0==e[1].indexOf("0/")&&(e[1]=e[1].replace("0/","*/")),0==e[2].indexOf("0/")&&(e[2]=e[2].replace("0/","*/")),0==e[3].indexOf("1/")&&(e[3]=e[3].replace("1/","*/")),0==e[4].indexOf("1/")&&(e[4]=e[4].replace("1/","*/")),0==e[5].indexOf("1/")&&(e[5]=e[5].replace("1/","*/")),0==e[6].indexOf("1/")&&(e[6]=e[6].replace("1/","*/")),e[5]=e[5].replace(/(^\d)|([^#/\s]\d)/g,function(e){var n=e.replace(/\D/,""),r=n;return t.dayOfWeekStartIndexZero?"7"==n&&(r="0"):r=(parseInt(n)-1).toString(),e.replace(n,r)}),"L"==e[5]&&(e[5]="6"),"?"==e[3]&&(e[3]="*"),e[3].indexOf("W")>-1&&(e[3].indexOf(",")>-1||e[3].indexOf("-")>-1))throw new Error("The 'W' character can be specified only when the day-of-month is a single day, not a range or list of days.");var n={SUN:0,MON:1,TUE:2,WED:3,THU:4,FRI:5,SAT:6};for(var r in n)e[5]=e[5].replace(new RegExp(r,"gi"),n[r].toString());var o={JAN:1,FEB:2,MAR:3,APR:4,MAY:5,JUN:6,JUL:7,AUG:8,SEP:9,OCT:10,NOV:11,DEC:12};for(var i in o)e[4]=e[4].replace(new RegExp(i,"gi"),o[i].toString());"0"==e[0]&&(e[0]=""),/\*|\-|\,|\//.test(e[2])||!/\*|\//.test(e[1])&&!/\*|\//.test(e[0])||(e[2]+="-"+e[2]);for(var s=0;s<e.length;s++)if("*/1"==e[s]&&(e[s]="*"),e[s].indexOf("/")>-1&&!/^\*|\-|\,/.test(e[s])){var a=null;switch(s){case 4:a="12";break;case 5:a="6";break;case 6:a="9999";break;default:a=null}if(null!=a){var u=e[s].split("/");e[s]=u[0]+"-"+a+"/"+u[1]}}},e.prototype.validate=function(e){this.assertNoInvalidCharacters("DOW",e[5]),this.assertNoInvalidCharacters("DOM",e[3])},e.prototype.assertNoInvalidCharacters=function(e,t){var n=t.match(/[A-KM-VX-Z]+/gi);if(n&&n.length)throw new Error(e+" part contains invalid values: '"+n.toString()+"'")},e}();t.CronParser=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){}return e.prototype.atX0SecondsPastTheMinuteGt20=function(){return null},e.prototype.atX0MinutesPastTheHourGt20=function(){return null},e.prototype.commaMonthX0ThroughMonthX1=function(){return null},e.prototype.commaYearX0ThroughYearX1=function(){return null},e.prototype.use24HourTimeFormatByDefault=function(){return!1},e.prototype.anErrorOccuredWhenGeneratingTheExpressionD=function(){return"An error occured when generating the expression description.  Check the cron expression syntax."},e.prototype.everyMinute=function(){return"every minute"},e.prototype.everyHour=function(){return"every hour"},e.prototype.atSpace=function(){return"At "},e.prototype.everyMinuteBetweenX0AndX1=function(){return"Every minute between %s and %s"},e.prototype.at=function(){return"At"},e.prototype.spaceAnd=function(){return" and"},e.prototype.everySecond=function(){return"every second"},e.prototype.everyX0Seconds=function(){return"every %s seconds"},e.prototype.secondsX0ThroughX1PastTheMinute=function(){return"seconds %s through %s past the minute"},e.prototype.atX0SecondsPastTheMinute=function(){return"at %s seconds past the minute"},e.prototype.everyX0Minutes=function(){return"every %s minutes"},e.prototype.minutesX0ThroughX1PastTheHour=function(){return"minutes %s through %s past the hour"},e.prototype.atX0MinutesPastTheHour=function(){return"at %s minutes past the hour"},e.prototype.everyX0Hours=function(){return"every %s hours"},e.prototype.betweenX0AndX1=function(){return"between %s and %s"},e.prototype.atX0=function(){return"at %s"},e.prototype.commaEveryDay=function(){return", every day"},e.prototype.commaEveryX0DaysOfTheWeek=function(){return", every %s days of the week"},e.prototype.commaX0ThroughX1=function(){return", %s through %s"},e.prototype.first=function(){return"first"},e.prototype.second=function(){return"second"},e.prototype.third=function(){return"third"},e.prototype.fourth=function(){return"fourth"},e.prototype.fifth=function(){return"fifth"},e.prototype.commaOnThe=function(){return", on the "},e.prototype.spaceX0OfTheMonth=function(){return" %s of the month"},e.prototype.lastDay=function(){return"the last day"},e.prototype.commaOnTheLastX0OfTheMonth=function(){return", on the last %s of the month"},e.prototype.commaOnlyOnX0=function(){return", only on %s"},e.prototype.commaAndOnX0=function(){return", and on %s"},e.prototype.commaEveryX0Months=function(){return", every %s months"},e.prototype.commaOnlyInX0=function(){return", only in %s"},e.prototype.commaOnTheLastDayOfTheMonth=function(){return", on the last day of the month"},e.prototype.commaOnTheLastWeekdayOfTheMonth=function(){return", on the last weekday of the month"},e.prototype.commaDaysBeforeTheLastDayOfTheMonth=function(){return", %s days before the last day of the month"},e.prototype.firstWeekday=function(){return"first weekday"},e.prototype.weekdayNearestDayX0=function(){return"weekday nearest day %s"},e.prototype.commaOnTheX0OfTheMonth=function(){return", on the %s of the month"},e.prototype.commaEveryX0Days=function(){return", every %s days"},e.prototype.commaBetweenDayX0AndX1OfTheMonth=function(){return", between day %s and %s of the month"},e.prototype.commaOnDayX0OfTheMonth=function(){return", on day %s of the month"},e.prototype.commaEveryMinute=function(){return", every minute"},e.prototype.commaEveryHour=function(){return", every hour"},e.prototype.commaEveryX0Years=function(){return", every %s years"},e.prototype.commaStartingX0=function(){return", starting %s"},e.prototype.daysOfTheWeek=function(){return["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},e.prototype.monthsOfTheYear=function(){return["January","February","March","April","May","June","July","August","September","October","November","December"]},e}();t.en=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=n(5);r.ExpressionDescriptor.initialize(new o.enLocaleLoader),t.default=r.ExpressionDescriptor;var i=r.ExpressionDescriptor.toString;t.toString=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3),o=function(){function e(){}return e.prototype.load=function(e){e.en=new r.en},e}();t.enLocaleLoader=o}])});
later = function() {
  "use strict";
  var later = {
    version: "1.2.0"
  };
  if (!Array.prototype.indexOf) {
    Array.prototype.indexOf = function(searchElement) {
      "use strict";
      if (this == null) {
        throw new TypeError();
      }
      var t = Object(this);
      var len = t.length >>> 0;
      if (len === 0) {
        return -1;
      }
      var n = 0;
      if (arguments.length > 1) {
        n = Number(arguments[1]);
        if (n != n) {
          n = 0;
        } else if (n != 0 && n != Infinity && n != -Infinity) {
          n = (n > 0 || -1) * Math.floor(Math.abs(n));
        }
      }
      if (n >= len) {
        return -1;
      }
      var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);
      for (;k < len; k++) {
        if (k in t && t[k] === searchElement) {
          return k;
        }
      }
      return -1;
    };
  }
  if (!String.prototype.trim) {
    String.prototype.trim = function() {
      return this.replace(/^\s+|\s+$/g, "");
    };
  }
  later.array = {};
  later.array.sort = function(arr, zeroIsLast) {
    arr.sort(function(a, b) {
      return +a - +b;
    });
    if (zeroIsLast && arr[0] === 0) {
      arr.push(arr.shift());
    }
  };
  later.array.next = function(val, values, extent) {
    var cur, zeroIsLargest = extent[0] !== 0, nextIdx = 0;
    for (var i = values.length - 1; i > -1; --i) {
      cur = values[i];
      if (cur === val) {
        return cur;
      }
      if (cur > val || cur === 0 && zeroIsLargest && extent[1] > val) {
        nextIdx = i;
        continue;
      }
      break;
    }
    return values[nextIdx];
  };
  later.array.nextInvalid = function(val, values, extent) {
    var min = extent[0], max = extent[1], len = values.length, zeroVal = values[len - 1] === 0 && min !== 0 ? max : 0, next = val, i = values.indexOf(val), start = next;
    while (next === (values[i] || zeroVal)) {
      next++;
      if (next > max) {
        next = min;
      }
      i++;
      if (i === len) {
        i = 0;
      }
      if (next === start) {
        return undefined;
      }
    }
    return next;
  };
  later.array.prev = function(val, values, extent) {
    var cur, len = values.length, zeroIsLargest = extent[0] !== 0, prevIdx = len - 1;
    for (var i = 0; i < len; i++) {
      cur = values[i];
      if (cur === val) {
        return cur;
      }
      if (cur < val || cur === 0 && zeroIsLargest && extent[1] < val) {
        prevIdx = i;
        continue;
      }
      break;
    }
    return values[prevIdx];
  };
  later.array.prevInvalid = function(val, values, extent) {
    var min = extent[0], max = extent[1], len = values.length, zeroVal = values[len - 1] === 0 && min !== 0 ? max : 0, next = val, i = values.indexOf(val), start = next;
    while (next === (values[i] || zeroVal)) {
      next--;
      if (next < min) {
        next = max;
      }
      i--;
      if (i === -1) {
        i = len - 1;
      }
      if (next === start) {
        return undefined;
      }
    }
    return next;
  };
  later.day = later.D = {
    name: "day",
    range: 86400,
    val: function(d) {
      return d.D || (d.D = later.date.getDate.call(d));
    },
    isValid: function(d, val) {
      return later.D.val(d) === (val || later.D.extent(d)[1]);
    },
    extent: function(d) {
      if (d.DExtent) return d.DExtent;
      var month = later.M.val(d), max = later.DAYS_IN_MONTH[month - 1];
      if (month === 2 && later.dy.extent(d)[1] === 366) {
        max = max + 1;
      }
      return d.DExtent = [ 1, max ];
    },
    start: function(d) {
      return d.DStart || (d.DStart = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d)));
    },
    end: function(d) {
      return d.DEnd || (d.DEnd = later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d)));
    },
    next: function(d, val) {
      val = val > later.D.extent(d)[1] ? 1 : val;
      var month = later.date.nextRollover(d, val, later.D, later.M), DMax = later.D.extent(month)[1];
      val = val > DMax ? 1 : val || DMax;
      return later.date.next(later.Y.val(month), later.M.val(month), val);
    },
    prev: function(d, val) {
      var month = later.date.prevRollover(d, val, later.D, later.M), DMax = later.D.extent(month)[1];
      return later.date.prev(later.Y.val(month), later.M.val(month), val > DMax ? DMax : val || DMax);
    }
  };
  later.dayOfWeekCount = later.dc = {
    name: "day of week count",
    range: 604800,
    val: function(d) {
      return d.dc || (d.dc = Math.floor((later.D.val(d) - 1) / 7) + 1);
    },
    isValid: function(d, val) {
      return later.dc.val(d) === val || val === 0 && later.D.val(d) > later.D.extent(d)[1] - 7;
    },
    extent: function(d) {
      return d.dcExtent || (d.dcExtent = [ 1, Math.ceil(later.D.extent(d)[1] / 7) ]);
    },
    start: function(d) {
      return d.dcStart || (d.dcStart = later.date.next(later.Y.val(d), later.M.val(d), Math.max(1, (later.dc.val(d) - 1) * 7 + 1 || 1)));
    },
    end: function(d) {
      return d.dcEnd || (d.dcEnd = later.date.prev(later.Y.val(d), later.M.val(d), Math.min(later.dc.val(d) * 7, later.D.extent(d)[1])));
    },
    next: function(d, val) {
      val = val > later.dc.extent(d)[1] ? 1 : val;
      var month = later.date.nextRollover(d, val, later.dc, later.M), dcMax = later.dc.extent(month)[1];
      val = val > dcMax ? 1 : val;
      var next = later.date.next(later.Y.val(month), later.M.val(month), val === 0 ? later.D.extent(month)[1] - 6 : 1 + 7 * (val - 1));
      if (next.getTime() <= d.getTime()) {
        month = later.M.next(d, later.M.val(d) + 1);
        return later.date.next(later.Y.val(month), later.M.val(month), val === 0 ? later.D.extent(month)[1] - 6 : 1 + 7 * (val - 1));
      }
      return next;
    },
    prev: function(d, val) {
      var month = later.date.prevRollover(d, val, later.dc, later.M), dcMax = later.dc.extent(month)[1];
      val = val > dcMax ? dcMax : val || dcMax;
      return later.dc.end(later.date.prev(later.Y.val(month), later.M.val(month), 1 + 7 * (val - 1)));
    }
  };
  later.dayOfWeek = later.dw = later.d = {
    name: "day of week",
    range: 86400,
    val: function(d) {
      return d.dw || (d.dw = later.date.getDay.call(d) + 1);
    },
    isValid: function(d, val) {
      return later.dw.val(d) === (val || 7);
    },
    extent: function() {
      return [ 1, 7 ];
    },
    start: function(d) {
      return later.D.start(d);
    },
    end: function(d) {
      return later.D.end(d);
    },
    next: function(d, val) {
      val = val > 7 ? 1 : val || 7;
      return later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d) + (val - later.dw.val(d)) + (val <= later.dw.val(d) ? 7 : 0));
    },
    prev: function(d, val) {
      val = val > 7 ? 7 : val || 7;
      return later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d) + (val - later.dw.val(d)) + (val >= later.dw.val(d) ? -7 : 0));
    }
  };
  later.dayOfYear = later.dy = {
    name: "day of year",
    range: 86400,
    val: function(d) {
      return d.dy || (d.dy = Math.ceil(1 + (later.D.start(d).getTime() - later.Y.start(d).getTime()) / later.DAY));
    },
    isValid: function(d, val) {
      return later.dy.val(d) === (val || later.dy.extent(d)[1]);
    },
    extent: function(d) {
      var year = later.Y.val(d);
      return d.dyExtent || (d.dyExtent = [ 1, year % 4 ? 365 : 366 ]);
    },
    start: function(d) {
      return later.D.start(d);
    },
    end: function(d) {
      return later.D.end(d);
    },
    next: function(d, val) {
      val = val > later.dy.extent(d)[1] ? 1 : val;
      var year = later.date.nextRollover(d, val, later.dy, later.Y), dyMax = later.dy.extent(year)[1];
      val = val > dyMax ? 1 : val || dyMax;
      return later.date.next(later.Y.val(year), later.M.val(year), val);
    },
    prev: function(d, val) {
      var year = later.date.prevRollover(d, val, later.dy, later.Y), dyMax = later.dy.extent(year)[1];
      val = val > dyMax ? dyMax : val || dyMax;
      return later.date.prev(later.Y.val(year), later.M.val(year), val);
    }
  };
  later.hour = later.h = {
    name: "hour",
    range: 3600,
    val: function(d) {
      return d.h || (d.h = later.date.getHour.call(d));
    },
    isValid: function(d, val) {
      return later.h.val(d) === val;
    },
    extent: function() {
      return [ 0, 23 ];
    },
    start: function(d) {
      return d.hStart || (d.hStart = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d)));
    },
    end: function(d) {
      return d.hEnd || (d.hEnd = later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d)));
    },
    next: function(d, val) {
      val = val > 23 ? 0 : val;
      var next = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d) + (val <= later.h.val(d) ? 1 : 0), val);
      if (!later.date.isUTC && next.getTime() <= d.getTime()) {
        next = later.date.next(later.Y.val(next), later.M.val(next), later.D.val(next), val + 1);
      }
      return next;
    },
    prev: function(d, val) {
      val = val > 23 ? 23 : val;
      return later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d) + (val >= later.h.val(d) ? -1 : 0), val);
    }
  };
  later.minute = later.m = {
    name: "minute",
    range: 60,
    val: function(d) {
      return d.m || (d.m = later.date.getMin.call(d));
    },
    isValid: function(d, val) {
      return later.m.val(d) === val;
    },
    extent: function(d) {
      return [ 0, 59 ];
    },
    start: function(d) {
      return d.mStart || (d.mStart = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d), later.m.val(d)));
    },
    end: function(d) {
      return d.mEnd || (d.mEnd = later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d), later.m.val(d)));
    },
    next: function(d, val) {
      var m = later.m.val(d), s = later.s.val(d), inc = val > 59 ? 60 - m : val <= m ? 60 - m + val : val - m, next = new Date(d.getTime() + inc * later.MIN - s * later.SEC);
      if (!later.date.isUTC && next.getTime() <= d.getTime()) {
        next = new Date(d.getTime() + (inc + 120) * later.MIN - s * later.SEC);
      }
      return next;
    },
    prev: function(d, val) {
      val = val > 59 ? 59 : val;
      return later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d) + (val >= later.m.val(d) ? -1 : 0), val);
    }
  };
  later.month = later.M = {
    name: "month",
    range: 2629740,
    val: function(d) {
      return d.M || (d.M = later.date.getMonth.call(d) + 1);
    },
    isValid: function(d, val) {
      return later.M.val(d) === (val || 12);
    },
    extent: function() {
      return [ 1, 12 ];
    },
    start: function(d) {
      return d.MStart || (d.MStart = later.date.next(later.Y.val(d), later.M.val(d)));
    },
    end: function(d) {
      return d.MEnd || (d.MEnd = later.date.prev(later.Y.val(d), later.M.val(d)));
    },
    next: function(d, val) {
      val = val > 12 ? 1 : val || 12;
      return later.date.next(later.Y.val(d) + (val > later.M.val(d) ? 0 : 1), val);
    },
    prev: function(d, val) {
      val = val > 12 ? 12 : val || 12;
      return later.date.prev(later.Y.val(d) - (val >= later.M.val(d) ? 1 : 0), val);
    }
  };
  later.second = later.s = {
    name: "second",
    range: 1,
    val: function(d) {
      return d.s || (d.s = later.date.getSec.call(d));
    },
    isValid: function(d, val) {
      return later.s.val(d) === val;
    },
    extent: function() {
      return [ 0, 59 ];
    },
    start: function(d) {
      return d;
    },
    end: function(d) {
      return d;
    },
    next: function(d, val) {
      var s = later.s.val(d), inc = val > 59 ? 60 - s : val <= s ? 60 - s + val : val - s, next = new Date(d.getTime() + inc * later.SEC);
      if (!later.date.isUTC && next.getTime() <= d.getTime()) {
        next = new Date(d.getTime() + (inc + 7200) * later.SEC);
      }
      return next;
    },
    prev: function(d, val, cache) {
      val = val > 59 ? 59 : val;
      return later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d), later.m.val(d) + (val >= later.s.val(d) ? -1 : 0), val);
    }
  };
  later.time = later.t = {
    name: "time",
    range: 1,
    val: function(d) {
      return d.t || (d.t = later.h.val(d) * 3600 + later.m.val(d) * 60 + later.s.val(d));
    },
    isValid: function(d, val) {
      return later.t.val(d) === val;
    },
    extent: function() {
      return [ 0, 86399 ];
    },
    start: function(d) {
      return d;
    },
    end: function(d) {
      return d;
    },
    next: function(d, val) {
      val = val > 86399 ? 0 : val;
      var next = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d) + (val <= later.t.val(d) ? 1 : 0), 0, 0, val);
      if (!later.date.isUTC && next.getTime() < d.getTime()) {
        next = later.date.next(later.Y.val(next), later.M.val(next), later.D.val(next), later.h.val(next), later.m.val(next), val + 7200);
      }
      return next;
    },
    prev: function(d, val) {
      val = val > 86399 ? 86399 : val;
      return later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d) + (val >= later.t.val(d) ? -1 : 0), 0, 0, val);
    }
  };
  later.weekOfMonth = later.wm = {
    name: "week of month",
    range: 604800,
    val: function(d) {
      return d.wm || (d.wm = (later.D.val(d) + (later.dw.val(later.M.start(d)) - 1) + (7 - later.dw.val(d))) / 7);
    },
    isValid: function(d, val) {
      return later.wm.val(d) === (val || later.wm.extent(d)[1]);
    },
    extent: function(d) {
      return d.wmExtent || (d.wmExtent = [ 1, (later.D.extent(d)[1] + (later.dw.val(later.M.start(d)) - 1) + (7 - later.dw.val(later.M.end(d)))) / 7 ]);
    },
    start: function(d) {
      return d.wmStart || (d.wmStart = later.date.next(later.Y.val(d), later.M.val(d), Math.max(later.D.val(d) - later.dw.val(d) + 1, 1)));
    },
    end: function(d) {
      return d.wmEnd || (d.wmEnd = later.date.prev(later.Y.val(d), later.M.val(d), Math.min(later.D.val(d) + (7 - later.dw.val(d)), later.D.extent(d)[1])));
    },
    next: function(d, val) {
      val = val > later.wm.extent(d)[1] ? 1 : val;
      var month = later.date.nextRollover(d, val, later.wm, later.M), wmMax = later.wm.extent(month)[1];
      val = val > wmMax ? 1 : val || wmMax;
      return later.date.next(later.Y.val(month), later.M.val(month), Math.max(1, (val - 1) * 7 - (later.dw.val(month) - 2)));
    },
    prev: function(d, val) {
      var month = later.date.prevRollover(d, val, later.wm, later.M), wmMax = later.wm.extent(month)[1];
      val = val > wmMax ? wmMax : val || wmMax;
      return later.wm.end(later.date.next(later.Y.val(month), later.M.val(month), Math.max(1, (val - 1) * 7 - (later.dw.val(month) - 2))));
    }
  };
  later.weekOfYear = later.wy = {
    name: "week of year (ISO)",
    range: 604800,
    val: function(d) {
      if (d.wy) return d.wy;
      var wThur = later.dw.next(later.wy.start(d), 5), YThur = later.dw.next(later.Y.prev(wThur, later.Y.val(wThur) - 1), 5);
      return d.wy = 1 + Math.ceil((wThur.getTime() - YThur.getTime()) / later.WEEK);
    },
    isValid: function(d, val) {
      return later.wy.val(d) === (val || later.wy.extent(d)[1]);
    },
    extent: function(d) {
      if (d.wyExtent) return d.wyExtent;
      var year = later.dw.next(later.wy.start(d), 5), dwFirst = later.dw.val(later.Y.start(year)), dwLast = later.dw.val(later.Y.end(year));
      return d.wyExtent = [ 1, dwFirst === 5 || dwLast === 5 ? 53 : 52 ];
    },
    start: function(d) {
      return d.wyStart || (d.wyStart = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d) - (later.dw.val(d) > 1 ? later.dw.val(d) - 2 : 6)));
    },
    end: function(d) {
      return d.wyEnd || (d.wyEnd = later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d) + (later.dw.val(d) > 1 ? 8 - later.dw.val(d) : 0)));
    },
    next: function(d, val) {
      val = val > later.wy.extent(d)[1] ? 1 : val;
      var wyThur = later.dw.next(later.wy.start(d), 5), year = later.date.nextRollover(wyThur, val, later.wy, later.Y);
      if (later.wy.val(year) !== 1) {
        year = later.dw.next(year, 2);
      }
      var wyMax = later.wy.extent(year)[1], wyStart = later.wy.start(year);
      val = val > wyMax ? 1 : val || wyMax;
      return later.date.next(later.Y.val(wyStart), later.M.val(wyStart), later.D.val(wyStart) + 7 * (val - 1));
    },
    prev: function(d, val) {
      var wyThur = later.dw.next(later.wy.start(d), 5), year = later.date.prevRollover(wyThur, val, later.wy, later.Y);
      if (later.wy.val(year) !== 1) {
        year = later.dw.next(year, 2);
      }
      var wyMax = later.wy.extent(year)[1], wyEnd = later.wy.end(year);
      val = val > wyMax ? wyMax : val || wyMax;
      return later.wy.end(later.date.next(later.Y.val(wyEnd), later.M.val(wyEnd), later.D.val(wyEnd) + 7 * (val - 1)));
    }
  };
  later.year = later.Y = {
    name: "year",
    range: 31556900,
    val: function(d) {
      return d.Y || (d.Y = later.date.getYear.call(d));
    },
    isValid: function(d, val) {
      return later.Y.val(d) === val;
    },
    extent: function() {
      return [ 1970, 2099 ];
    },
    start: function(d) {
      return d.YStart || (d.YStart = later.date.next(later.Y.val(d)));
    },
    end: function(d) {
      return d.YEnd || (d.YEnd = later.date.prev(later.Y.val(d)));
    },
    next: function(d, val) {
      return val > later.Y.val(d) && val <= later.Y.extent()[1] ? later.date.next(val) : later.NEVER;
    },
    prev: function(d, val) {
      return val < later.Y.val(d) && val >= later.Y.extent()[0] ? later.date.prev(val) : later.NEVER;
    }
  };
  later.fullDate = later.fd = {
    name: "full date",
    range: 1,
    val: function(d) {
      return d.fd || (d.fd = d.getTime());
    },
    isValid: function(d, val) {
      return later.fd.val(d) === val;
    },
    extent: function() {
      return [ 0, 3250368e7 ];
    },
    start: function(d) {
      return d;
    },
    end: function(d) {
      return d;
    },
    next: function(d, val) {
      return later.fd.val(d) < val ? new Date(val) : later.NEVER;
    },
    prev: function(d, val) {
      return later.fd.val(d) > val ? new Date(val) : later.NEVER;
    }
  };
  later.modifier = {};
  later.modifier.after = later.modifier.a = function(constraint, values) {
    var value = values[0];
    return {
      name: "after " + constraint.name,
      range: (constraint.extent(new Date())[1] - value) * constraint.range,
      val: constraint.val,
      isValid: function(d, val) {
        return this.val(d) >= value;
      },
      extent: constraint.extent,
      start: constraint.start,
      end: constraint.end,
      next: function(startDate, val) {
        if (val != value) val = constraint.extent(startDate)[0];
        return constraint.next(startDate, val);
      },
      prev: function(startDate, val) {
        val = val === value ? constraint.extent(startDate)[1] : value - 1;
        return constraint.prev(startDate, val);
      }
    };
  };
  later.modifier.before = later.modifier.b = function(constraint, values) {
    var value = values[values.length - 1];
    return {
      name: "before " + constraint.name,
      range: constraint.range * (value - 1),
      val: constraint.val,
      isValid: function(d, val) {
        return this.val(d) < value;
      },
      extent: constraint.extent,
      start: constraint.start,
      end: constraint.end,
      next: function(startDate, val) {
        val = val === value ? constraint.extent(startDate)[0] : value;
        return constraint.next(startDate, val);
      },
      prev: function(startDate, val) {
        val = val === value ? value - 1 : constraint.extent(startDate)[1];
        return constraint.prev(startDate, val);
      }
    };
  };
  later.compile = function(schedDef) {
    var constraints = [], constraintsLen = 0, tickConstraint;
    for (var key in schedDef) {
      var nameParts = key.split("_"), name = nameParts[0], mod = nameParts[1], vals = schedDef[key], constraint = mod ? later.modifier[mod](later[name], vals) : later[name];
      constraints.push({
        constraint: constraint,
        vals: vals
      });
      constraintsLen++;
    }
    constraints.sort(function(a, b) {
      var ra = a.constraint.range, rb = b.constraint.range;
      return rb < ra ? -1 : rb > ra ? 1 : 0;
    });
    tickConstraint = constraints[constraintsLen - 1].constraint;
    function compareFn(dir) {
      return dir === "next" ? function(a, b) {
        return a.getTime() > b.getTime();
      } : function(a, b) {
        return b.getTime() > a.getTime();
      };
    }
    return {
      start: function(dir, startDate) {
        var next = startDate, nextVal = later.array[dir], maxAttempts = 1e3, done;
        while (maxAttempts-- && !done && next) {
          done = true;
          for (var i = 0; i < constraintsLen; i++) {
            var constraint = constraints[i].constraint, curVal = constraint.val(next), extent = constraint.extent(next), newVal = nextVal(curVal, constraints[i].vals, extent);
            if (!constraint.isValid(next, newVal)) {
              next = constraint[dir](next, newVal);
              done = false;
              break;
            }
          }
        }
        if (next !== later.NEVER) {
          next = dir === "next" ? tickConstraint.start(next) : tickConstraint.end(next);
        }
        return next;
      },
      end: function(dir, startDate) {
        var result, nextVal = later.array[dir + "Invalid"], compare = compareFn(dir);
        for (var i = constraintsLen - 1; i >= 0; i--) {
          var constraint = constraints[i].constraint, curVal = constraint.val(startDate), extent = constraint.extent(startDate), newVal = nextVal(curVal, constraints[i].vals, extent), next;
          if (newVal !== undefined) {
            next = constraint[dir](startDate, newVal);
            if (next && (!result || compare(result, next))) {
              result = next;
            }
          }
        }
        return result;
      },
      tick: function(dir, date) {
        return new Date(dir === "next" ? tickConstraint.end(date).getTime() + later.SEC : tickConstraint.start(date).getTime() - later.SEC);
      },
      tickStart: function(date) {
        return tickConstraint.start(date);
      }
    };
  };
  later.schedule = function(sched) {
    if (!sched) throw new Error("Missing schedule definition.");
    if (!sched.schedules) throw new Error("Definition must include at least one schedule.");
    var schedules = [], schedulesLen = sched.schedules.length, exceptions = [], exceptionsLen = sched.exceptions ? sched.exceptions.length : 0;
    for (var i = 0; i < schedulesLen; i++) {
      schedules.push(later.compile(sched.schedules[i]));
    }
    for (var j = 0; j < exceptionsLen; j++) {
      exceptions.push(later.compile(sched.exceptions[j]));
    }
    function getInstances(dir, count, startDate, endDate, isRange) {
      var compare = compareFn(dir), loopCount = count, maxAttempts = 1e3, schedStarts = [], exceptStarts = [], next, end, results = [], isForward = dir === "next", lastResult, rStart = isForward ? 0 : 1, rEnd = isForward ? 1 : 0;
      startDate = startDate ? new Date(startDate) : new Date();
      if (!startDate || !startDate.getTime()) throw new Error("Invalid start date.");
      setNextStarts(dir, schedules, schedStarts, startDate);
      setRangeStarts(dir, exceptions, exceptStarts, startDate);
      while (maxAttempts-- && loopCount && (next = findNext(schedStarts, compare))) {
        if (endDate && compare(next, endDate)) {
          break;
        }
        if (exceptionsLen) {
          updateRangeStarts(dir, exceptions, exceptStarts, next);
          if (end = calcRangeOverlap(dir, exceptStarts, next)) {
            updateNextStarts(dir, schedules, schedStarts, end);
            continue;
          }
        }
        if (isRange) {
          var maxEndDate = calcMaxEndDate(exceptStarts, compare);
          end = calcEnd(dir, schedules, schedStarts, next, maxEndDate);
          var r = isForward ? [ new Date(Math.max(startDate, next)), end ? new Date(endDate ? Math.min(end, endDate) : end) : undefined ] : [ end ? new Date(endDate ? Math.max(endDate, end.getTime() + later.SEC) : end.getTime() + later.SEC) : undefined, new Date(Math.min(startDate, next.getTime() + later.SEC)) ];
          if (lastResult && r[rStart].getTime() === lastResult[rEnd].getTime()) {
            lastResult[rEnd] = r[rEnd];
            loopCount++;
          } else {
            lastResult = r;
            results.push(lastResult);
          }
          if (!end) break;
          updateNextStarts(dir, schedules, schedStarts, end);
        } else {
          results.push(isForward ? new Date(Math.max(startDate, next)) : getStart(schedules, schedStarts, next, endDate));
          tickStarts(dir, schedules, schedStarts, next);
        }
        loopCount--;
      }
      for (var i = 0, len = results.length; i < len; i++) {
        var result = results[i];
        results[i] = Object.prototype.toString.call(result) === "[object Array]" ? [ cleanDate(result[0]), cleanDate(result[1]) ] : cleanDate(result);
      }
      return results.length === 0 ? later.NEVER : count === 1 ? results[0] : results;
    }
    function cleanDate(d) {
      if (d instanceof Date && !isNaN(d.valueOf())) {
        return new Date(d);
      }
      return undefined;
    }
    function setNextStarts(dir, schedArr, startsArr, startDate) {
      for (var i = 0, len = schedArr.length; i < len; i++) {
        startsArr[i] = schedArr[i].start(dir, startDate);
      }
    }
    function updateNextStarts(dir, schedArr, startsArr, startDate) {
      var compare = compareFn(dir);
      for (var i = 0, len = schedArr.length; i < len; i++) {
        if (startsArr[i] && !compare(startsArr[i], startDate)) {
          startsArr[i] = schedArr[i].start(dir, startDate);
        }
      }
    }
    function setRangeStarts(dir, schedArr, rangesArr, startDate) {
      var compare = compareFn(dir);
      for (var i = 0, len = schedArr.length; i < len; i++) {
        var nextStart = schedArr[i].start(dir, startDate);
        if (!nextStart) {
          rangesArr[i] = later.NEVER;
        } else {
          rangesArr[i] = [ nextStart, schedArr[i].end(dir, nextStart) ];
        }
      }
    }
    function updateRangeStarts(dir, schedArr, rangesArr, startDate) {
      var compare = compareFn(dir);
      for (var i = 0, len = schedArr.length; i < len; i++) {
        if (rangesArr[i] && !compare(rangesArr[i][0], startDate)) {
          var nextStart = schedArr[i].start(dir, startDate);
          if (!nextStart) {
            rangesArr[i] = later.NEVER;
          } else {
            rangesArr[i] = [ nextStart, schedArr[i].end(dir, nextStart) ];
          }
        }
      }
    }
    function tickStarts(dir, schedArr, startsArr, startDate) {
      for (var i = 0, len = schedArr.length; i < len; i++) {
        if (startsArr[i] && startsArr[i].getTime() === startDate.getTime()) {
          startsArr[i] = schedArr[i].start(dir, schedArr[i].tick(dir, startDate));
        }
      }
    }
    function getStart(schedArr, startsArr, startDate, minEndDate) {
      var result;
      for (var i = 0, len = startsArr.length; i < len; i++) {
        if (startsArr[i] && startsArr[i].getTime() === startDate.getTime()) {
          var start = schedArr[i].tickStart(startDate);
          if (minEndDate && start < minEndDate) {
            return minEndDate;
          }
          if (!result || start > result) {
            result = start;
          }
        }
      }
      return result;
    }
    function calcRangeOverlap(dir, rangesArr, startDate) {
      var compare = compareFn(dir), result;
      for (var i = 0, len = rangesArr.length; i < len; i++) {
        var range = rangesArr[i];
        if (range && !compare(range[0], startDate) && (!range[1] || compare(range[1], startDate))) {
          if (!result || compare(range[1], result)) {
            result = range[1];
          }
        }
      }
      return result;
    }
    function calcMaxEndDate(exceptsArr, compare) {
      var result;
      for (var i = 0, len = exceptsArr.length; i < len; i++) {
        if (exceptsArr[i] && (!result || compare(result, exceptsArr[i][0]))) {
          result = exceptsArr[i][0];
        }
      }
      return result;
    }
    function calcEnd(dir, schedArr, startsArr, startDate, maxEndDate) {
      var compare = compareFn(dir), result;
      for (var i = 0, len = schedArr.length; i < len; i++) {
        var start = startsArr[i];
        if (start && start.getTime() === startDate.getTime()) {
          var end = schedArr[i].end(dir, start);
          if (maxEndDate && (!end || compare(end, maxEndDate))) {
            return maxEndDate;
          }
          if (!result || compare(end, result)) {
            result = end;
          }
        }
      }
      return result;
    }
    function compareFn(dir) {
      return dir === "next" ? function(a, b) {
        return !b || a.getTime() > b.getTime();
      } : function(a, b) {
        return !a || b.getTime() > a.getTime();
      };
    }
    function findNext(arr, compare) {
      var next = arr[0];
      for (var i = 1, len = arr.length; i < len; i++) {
        if (arr[i] && compare(next, arr[i])) {
          next = arr[i];
        }
      }
      return next;
    }
    return {
      isValid: function(d) {
        return getInstances("next", 1, d, d) !== later.NEVER;
      },
      next: function(count, startDate, endDate) {
        return getInstances("next", count || 1, startDate, endDate);
      },
      prev: function(count, startDate, endDate) {
        return getInstances("prev", count || 1, startDate, endDate);
      },
      nextRange: function(count, startDate, endDate) {
        return getInstances("next", count || 1, startDate, endDate, true);
      },
      prevRange: function(count, startDate, endDate) {
        return getInstances("prev", count || 1, startDate, endDate, true);
      }
    };
  };
  later.setTimeout = function(fn, sched) {
    var s = later.schedule(sched), t;
    if (fn) {
      scheduleTimeout();
    }
    function scheduleTimeout() {
      var now = Date.now(), next = s.next(2, now);
      if (!next[0]) {
        t = undefined;
        return;
      }
      var diff = next[0].getTime() - now;
      if (diff < 1e3) {
        diff = next[1] ? next[1].getTime() - now : 1e3;
      }
      if (diff < 2147483647) {
        t = setTimeout(fn, diff);
      } else {
        t = setTimeout(scheduleTimeout, 2147483647);
      }
    }
    return {
      isDone: function() {
        return !t;
      },
      clear: function() {
        clearTimeout(t);
      }
    };
  };
  later.setInterval = function(fn, sched) {
    if (!fn) {
      return;
    }
    var t = later.setTimeout(scheduleTimeout, sched), done = t.isDone();
    function scheduleTimeout() {
      if (!done) {
        fn();
        t = later.setTimeout(scheduleTimeout, sched);
      }
    }
    return {
      isDone: function() {
        return t.isDone();
      },
      clear: function() {
        done = true;
        t.clear();
      }
    };
  };
  later.date = {};
  later.date.timezone = function(useLocalTime) {
    later.date.build = useLocalTime ? function(Y, M, D, h, m, s) {
      return new Date(Y, M, D, h, m, s);
    } : function(Y, M, D, h, m, s) {
      return new Date(Date.UTC(Y, M, D, h, m, s));
    };
    var get = useLocalTime ? "get" : "getUTC", d = Date.prototype;
    later.date.getYear = d[get + "FullYear"];
    later.date.getMonth = d[get + "Month"];
    later.date.getDate = d[get + "Date"];
    later.date.getDay = d[get + "Day"];
    later.date.getHour = d[get + "Hours"];
    later.date.getMin = d[get + "Minutes"];
    later.date.getSec = d[get + "Seconds"];
    later.date.isUTC = !useLocalTime;
  };
  later.date.UTC = function() {
    later.date.timezone(false);
  };
  later.date.localTime = function() {
    later.date.timezone(true);
  };
  later.date.UTC();
  later.SEC = 1e3;
  later.MIN = later.SEC * 60;
  later.HOUR = later.MIN * 60;
  later.DAY = later.HOUR * 24;
  later.WEEK = later.DAY * 7;
  later.DAYS_IN_MONTH = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];
  later.NEVER = 0;
  later.date.next = function(Y, M, D, h, m, s) {
    return later.date.build(Y, M !== undefined ? M - 1 : 0, D !== undefined ? D : 1, h || 0, m || 0, s || 0);
  };
  later.date.nextRollover = function(d, val, constraint, period) {
    var cur = constraint.val(d), max = constraint.extent(d)[1];
    return (val || max) <= cur || val > max ? new Date(period.end(d).getTime() + later.SEC) : period.start(d);
  };
  later.date.prev = function(Y, M, D, h, m, s) {
    var len = arguments.length;
    M = len < 2 ? 11 : M - 1;
    D = len < 3 ? later.D.extent(later.date.next(Y, M + 1))[1] : D;
    h = len < 4 ? 23 : h;
    m = len < 5 ? 59 : m;
    s = len < 6 ? 59 : s;
    return later.date.build(Y, M, D, h, m, s);
  };
  later.date.prevRollover = function(d, val, constraint, period) {
    var cur = constraint.val(d);
    return val >= cur || !val ? period.start(period.prev(d, period.val(d) - 1)) : period.start(d);
  };
  later.parse = {};
  later.parse.cron = function(expr, hasSeconds) {
    var NAMES = {
      JAN: 1,
      FEB: 2,
      MAR: 3,
      APR: 4,
      MAY: 5,
      JUN: 6,
      JUL: 7,
      AUG: 8,
      SEP: 9,
      OCT: 10,
      NOV: 11,
      DEC: 12,
      SUN: 1,
      MON: 2,
      TUE: 3,
      WED: 4,
      THU: 5,
      FRI: 6,
      SAT: 7
    };
    var REPLACEMENTS = {
      "* * * * * *": "0/1 * * * * *",
      "@YEARLY": "0 0 1 1 *",
      "@ANNUALLY": "0 0 1 1 *",
      "@MONTHLY": "0 0 1 * *",
      "@WEEKLY": "0 0 * * 0",
      "@DAILY": "0 0 * * *",
      "@HOURLY": "0 * * * *"
    };
    var FIELDS = {
      s: [ 0, 0, 59 ],
      m: [ 1, 0, 59 ],
      h: [ 2, 0, 23 ],
      D: [ 3, 1, 31 ],
      M: [ 4, 1, 12 ],
      Y: [ 6, 1970, 2099 ],
      d: [ 5, 1, 7, 1 ]
    };
    function getValue(value, offset, max) {
      return isNaN(value) ? NAMES[value] || null : Math.min(+value + (offset || 0), max || 9999);
    }
    function cloneSchedule(sched) {
      var clone = {}, field;
      for (field in sched) {
        if (field !== "dc" && field !== "d") {
          clone[field] = sched[field].slice(0);
        }
      }
      return clone;
    }
    function add(sched, name, min, max, inc) {
      var i = min;
      if (!sched[name]) {
        sched[name] = [];
      }
      while (i <= max) {
        if (sched[name].indexOf(i) < 0) {
          sched[name].push(i);
        }
        i += inc || 1;
      }
      sched[name].sort(function(a, b) {
        return a - b;
      });
    }
    function addHash(schedules, curSched, value, hash) {
      if (curSched.d && !curSched.dc || curSched.dc && curSched.dc.indexOf(hash) < 0) {
        schedules.push(cloneSchedule(curSched));
        curSched = schedules[schedules.length - 1];
      }
      add(curSched, "d", value, value);
      add(curSched, "dc", hash, hash);
    }
    function addWeekday(s, curSched, value) {
      var except1 = {}, except2 = {};
      if (value === 1) {
        add(curSched, "D", 1, 3);
        add(curSched, "d", NAMES.MON, NAMES.FRI);
        add(except1, "D", 2, 2);
        add(except1, "d", NAMES.TUE, NAMES.FRI);
        add(except2, "D", 3, 3);
        add(except2, "d", NAMES.TUE, NAMES.FRI);
      } else {
        add(curSched, "D", value - 1, value + 1);
        add(curSched, "d", NAMES.MON, NAMES.FRI);
        add(except1, "D", value - 1, value - 1);
        add(except1, "d", NAMES.MON, NAMES.THU);
        add(except2, "D", value + 1, value + 1);
        add(except2, "d", NAMES.TUE, NAMES.FRI);
      }
      s.exceptions.push(except1);
      s.exceptions.push(except2);
    }
    function addRange(item, curSched, name, min, max, offset) {
      var incSplit = item.split("/"), inc = +incSplit[1], range = incSplit[0];
      if (range !== "*" && range !== "0") {
        var rangeSplit = range.split("-");
        min = getValue(rangeSplit[0], offset, max);
        max = getValue(rangeSplit[1], offset, max) || max;
      }
      add(curSched, name, min, max, inc);
    }
    function parse(item, s, name, min, max, offset) {
      var value, split, schedules = s.schedules, curSched = schedules[schedules.length - 1];
      if (item === "L") {
        item = min - 1;
      }
      if ((value = getValue(item, offset, max)) !== null) {
        add(curSched, name, value, value);
      } else if ((value = getValue(item.replace("W", ""), offset, max)) !== null) {
        addWeekday(s, curSched, value);
      } else if ((value = getValue(item.replace("L", ""), offset, max)) !== null) {
        addHash(schedules, curSched, value, min - 1);
      } else if ((split = item.split("#")).length === 2) {
        value = getValue(split[0], offset, max);
        addHash(schedules, curSched, value, getValue(split[1]));
      } else {
        addRange(item, curSched, name, min, max, offset);
      }
    }
    function isHash(item) {
      return item.indexOf("#") > -1 || item.indexOf("L") > 0;
    }
    function itemSorter(a, b) {
      return isHash(a) && !isHash(b) ? 1 : a - b;
    }
    function parseExpr(expr) {
      var schedule = {
        schedules: [ {} ],
        exceptions: []
      }, components = expr.replace(/(\s)+/g, " ").split(" "), field, f, component, items;
      for (field in FIELDS) {
        f = FIELDS[field];
        component = components[f[0]];
        if (component && component !== "*" && component !== "?") {
          items = component.split(",").sort(itemSorter);
          var i, length = items.length;
          for (i = 0; i < length; i++) {
            parse(items[i], schedule, field, f[1], f[2], f[3]);
          }
        }
      }
      return schedule;
    }
    function prepareExpr(expr) {
      var prepared = expr.toUpperCase();
      return REPLACEMENTS[prepared] || prepared;
    }
    var e = prepareExpr(expr);
    return parseExpr(hasSeconds ? e : "0 " + e);
  };
  later.parse.recur = function() {
    var schedules = [], exceptions = [], cur, curArr = schedules, curName, values, every, modifier, applyMin, applyMax, i, last;
    function add(name, min, max) {
      name = modifier ? name + "_" + modifier : name;
      if (!cur) {
        curArr.push({});
        cur = curArr[0];
      }
      if (!cur[name]) {
        cur[name] = [];
      }
      curName = cur[name];
      if (every) {
        values = [];
        for (i = min; i <= max; i += every) {
          values.push(i);
        }
        last = {
          n: name,
          x: every,
          c: curName.length,
          m: max
        };
      }
      values = applyMin ? [ min ] : applyMax ? [ max ] : values;
      var length = values.length;
      for (i = 0; i < length; i += 1) {
        var val = values[i];
        if (curName.indexOf(val) < 0) {
          curName.push(val);
        }
      }
      values = every = modifier = applyMin = applyMax = 0;
    }
    return {
      schedules: schedules,
      exceptions: exceptions,
      on: function() {
        values = arguments[0] instanceof Array ? arguments[0] : arguments;
        return this;
      },
      every: function(x) {
        every = x || 1;
        return this;
      },
      after: function(x) {
        modifier = "a";
        values = [ x ];
        return this;
      },
      before: function(x) {
        modifier = "b";
        values = [ x ];
        return this;
      },
      first: function() {
        applyMin = 1;
        return this;
      },
      last: function() {
        applyMax = 1;
        return this;
      },
      time: function() {
        for (var i = 0, len = values.length; i < len; i++) {
          var split = values[i].split(":");
          if (split.length < 3) split.push(0);
          values[i] = +split[0] * 3600 + +split[1] * 60 + +split[2];
        }
        add("t");
        return this;
      },
      second: function() {
        add("s", 0, 59);
        return this;
      },
      minute: function() {
        add("m", 0, 59);
        return this;
      },
      hour: function() {
        add("h", 0, 23);
        return this;
      },
      dayOfMonth: function() {
        add("D", 1, applyMax ? 0 : 31);
        return this;
      },
      dayOfWeek: function() {
        add("d", 1, 7);
        return this;
      },
      onWeekend: function() {
        values = [ 1, 7 ];
        return this.dayOfWeek();
      },
      onWeekday: function() {
        values = [ 2, 3, 4, 5, 6 ];
        return this.dayOfWeek();
      },
      dayOfWeekCount: function() {
        add("dc", 1, applyMax ? 0 : 5);
        return this;
      },
      dayOfYear: function() {
        add("dy", 1, applyMax ? 0 : 366);
        return this;
      },
      weekOfMonth: function() {
        add("wm", 1, applyMax ? 0 : 5);
        return this;
      },
      weekOfYear: function() {
        add("wy", 1, applyMax ? 0 : 53);
        return this;
      },
      month: function() {
        add("M", 1, 12);
        return this;
      },
      year: function() {
        add("Y", 1970, 2450);
        return this;
      },
      fullDate: function() {
        for (var i = 0, len = values.length; i < len; i++) {
          values[i] = values[i].getTime();
        }
        add("fd");
        return this;
      },
      customModifier: function(id, vals) {
        var custom = later.modifier[id];
        if (!custom) throw new Error("Custom modifier " + id + " not recognized!");
        modifier = id;
        values = arguments[1] instanceof Array ? arguments[1] : [ arguments[1] ];
        return this;
      },
      customPeriod: function(id) {
        var custom = later[id];
        if (!custom) throw new Error("Custom time period " + id + " not recognized!");
        add(id, custom.extent(new Date())[0], custom.extent(new Date())[1]);
        return this;
      },
      startingOn: function(start) {
        return this.between(start, last.m);
      },
      between: function(start, end) {
        cur[last.n] = cur[last.n].splice(0, last.c);
        every = last.x;
        add(last.n, start, end);
        return this;
      },
      and: function() {
        cur = curArr[curArr.push({}) - 1];
        return this;
      },
      except: function() {
        curArr = exceptions;
        cur = null;
        return this;
      }
    };
  };
  later.parse.text = function(str) {
    var recur = later.parse.recur, pos = 0, input = "", error;
    var TOKENTYPES = {
      eof: /^$/,
      rank: /^((\d+)(st|nd|rd|th)?)\b/,
      time: /^((([0]?[1-9]|1[0-2]):[0-5]\d(\s)?(am|pm))|(([0]?\d|1\d|2[0-3]):[0-5]\d))\b/,
      dayName: /^((sun|mon|tue(s)?|wed(nes)?|thu(r(s)?)?|fri|sat(ur)?)(day)?)\b/,
      monthName: /^(jan(uary)?|feb(ruary)?|ma((r(ch)?)?|y)|apr(il)?|ju(ly|ne)|aug(ust)?|oct(ober)?|(sept|nov|dec)(ember)?)\b/,
      yearIndex: /^(\d\d\d\d)\b/,
      every: /^every\b/,
      after: /^after\b/,
      before: /^before\b/,
      second: /^(s|sec(ond)?(s)?)\b/,
      minute: /^(m|min(ute)?(s)?)\b/,
      hour: /^(h|hour(s)?)\b/,
      day: /^(day(s)?( of the month)?)\b/,
      dayInstance: /^day instance\b/,
      dayOfWeek: /^day(s)? of the week\b/,
      dayOfYear: /^day(s)? of the year\b/,
      weekOfYear: /^week(s)?( of the year)?\b/,
      weekOfMonth: /^week(s)? of the month\b/,
      weekday: /^weekday\b/,
      weekend: /^weekend\b/,
      month: /^month(s)?\b/,
      year: /^year(s)?\b/,
      between: /^between (the)?\b/,
      start: /^(start(ing)? (at|on( the)?)?)\b/,
      at: /^(at|@)\b/,
      and: /^(,|and\b)/,
      except: /^(except\b)/,
      also: /(also)\b/,
      first: /^(first)\b/,
      last: /^last\b/,
      "in": /^in\b/,
      of: /^of\b/,
      onthe: /^on the\b/,
      on: /^on\b/,
      through: /(-|^(to|through)\b)/
    };
    var NAMES = {
      jan: 1,
      feb: 2,
      mar: 3,
      apr: 4,
      may: 5,
      jun: 6,
      jul: 7,
      aug: 8,
      sep: 9,
      oct: 10,
      nov: 11,
      dec: 12,
      sun: 1,
      mon: 2,
      tue: 3,
      wed: 4,
      thu: 5,
      fri: 6,
      sat: 7,
      "1st": 1,
      fir: 1,
      "2nd": 2,
      sec: 2,
      "3rd": 3,
      thi: 3,
      "4th": 4,
      "for": 4
    };
    function t(start, end, text, type) {
      return {
        startPos: start,
        endPos: end,
        text: text,
        type: type
      };
    }
    function peek(expected) {
      var scanTokens = expected instanceof Array ? expected : [ expected ], whiteSpace = /\s+/, token, curInput, m, scanToken, start, len;
      scanTokens.push(whiteSpace);
      start = pos;
      while (!token || token.type === whiteSpace) {
        len = -1;
        curInput = input.substring(start);
        token = t(start, start, input.split(whiteSpace)[0]);
        var i, length = scanTokens.length;
        for (i = 0; i < length; i++) {
          scanToken = scanTokens[i];
          m = scanToken.exec(curInput);
          if (m && m.index === 0 && m[0].length > len) {
            len = m[0].length;
            token = t(start, start + len, curInput.substring(0, len), scanToken);
          }
        }
        if (token.type === whiteSpace) {
          start = token.endPos;
        }
      }
      return token;
    }
    function scan(expectedToken) {
      var token = peek(expectedToken);
      pos = token.endPos;
      return token;
    }
    function parseThroughExpr(tokenType) {
      var start = +parseTokenValue(tokenType), end = checkAndParse(TOKENTYPES.through) ? +parseTokenValue(tokenType) : start, nums = [];
      for (var i = start; i <= end; i++) {
        nums.push(i);
      }
      return nums;
    }
    function parseRanges(tokenType) {
      var nums = parseThroughExpr(tokenType);
      while (checkAndParse(TOKENTYPES.and)) {
        nums = nums.concat(parseThroughExpr(tokenType));
      }
      return nums;
    }
    function parseEvery(r) {
      var num, period, start, end;
      if (checkAndParse(TOKENTYPES.weekend)) {
        r.on(NAMES.sun, NAMES.sat).dayOfWeek();
      } else if (checkAndParse(TOKENTYPES.weekday)) {
        r.on(NAMES.mon, NAMES.tue, NAMES.wed, NAMES.thu, NAMES.fri).dayOfWeek();
      } else {
        num = parseTokenValue(TOKENTYPES.rank);
        r.every(num);
        period = parseTimePeriod(r);
        if (checkAndParse(TOKENTYPES.start)) {
          num = parseTokenValue(TOKENTYPES.rank);
          r.startingOn(num);
          parseToken(period.type);
        } else if (checkAndParse(TOKENTYPES.between)) {
          start = parseTokenValue(TOKENTYPES.rank);
          if (checkAndParse(TOKENTYPES.and)) {
            end = parseTokenValue(TOKENTYPES.rank);
            r.between(start, end);
          }
        }
      }
    }
    function parseOnThe(r) {
      if (checkAndParse(TOKENTYPES.first)) {
        r.first();
      } else if (checkAndParse(TOKENTYPES.last)) {
        r.last();
      } else {
        r.on(parseRanges(TOKENTYPES.rank));
      }
      parseTimePeriod(r);
    }
    function parseScheduleExpr(str) {
      pos = 0;
      input = str;
      error = -1;
      var r = recur();
      while (pos < input.length && error < 0) {
        var token = parseToken([ TOKENTYPES.every, TOKENTYPES.after, TOKENTYPES.before, TOKENTYPES.onthe, TOKENTYPES.on, TOKENTYPES.of, TOKENTYPES["in"], TOKENTYPES.at, TOKENTYPES.and, TOKENTYPES.except, TOKENTYPES.also ]);
        switch (token.type) {
         case TOKENTYPES.every:
          parseEvery(r);
          break;

         case TOKENTYPES.after:
          if (peek(TOKENTYPES.time).type !== undefined) {
            r.after(parseTokenValue(TOKENTYPES.time));
            r.time();
          } else {
            r.after(parseTokenValue(TOKENTYPES.rank));
            parseTimePeriod(r);
          }
          break;

         case TOKENTYPES.before:
          if (peek(TOKENTYPES.time).type !== undefined) {
            r.before(parseTokenValue(TOKENTYPES.time));
            r.time();
          } else {
            r.before(parseTokenValue(TOKENTYPES.rank));
            parseTimePeriod(r);
          }
          break;

         case TOKENTYPES.onthe:
          parseOnThe(r);
          break;

         case TOKENTYPES.on:
          r.on(parseRanges(TOKENTYPES.dayName)).dayOfWeek();
          break;

         case TOKENTYPES.of:
          r.on(parseRanges(TOKENTYPES.monthName)).month();
          break;

         case TOKENTYPES["in"]:
          r.on(parseRanges(TOKENTYPES.yearIndex)).year();
          break;

         case TOKENTYPES.at:
          r.on(parseTokenValue(TOKENTYPES.time)).time();
          while (checkAndParse(TOKENTYPES.and)) {
            r.on(parseTokenValue(TOKENTYPES.time)).time();
          }
          break;

         case TOKENTYPES.and:
          break;

         case TOKENTYPES.also:
          r.and();
          break;

         case TOKENTYPES.except:
          r.except();
          break;

         default:
          error = pos;
        }
      }
      return {
        schedules: r.schedules,
        exceptions: r.exceptions,
        error: error
      };
    }
    function parseTimePeriod(r) {
      var timePeriod = parseToken([ TOKENTYPES.second, TOKENTYPES.minute, TOKENTYPES.hour, TOKENTYPES.dayOfYear, TOKENTYPES.dayOfWeek, TOKENTYPES.dayInstance, TOKENTYPES.day, TOKENTYPES.month, TOKENTYPES.year, TOKENTYPES.weekOfMonth, TOKENTYPES.weekOfYear ]);
      switch (timePeriod.type) {
       case TOKENTYPES.second:
        r.second();
        break;

       case TOKENTYPES.minute:
        r.minute();
        break;

       case TOKENTYPES.hour:
        r.hour();
        break;

       case TOKENTYPES.dayOfYear:
        r.dayOfYear();
        break;

       case TOKENTYPES.dayOfWeek:
        r.dayOfWeek();
        break;

       case TOKENTYPES.dayInstance:
        r.dayOfWeekCount();
        break;

       case TOKENTYPES.day:
        r.dayOfMonth();
        break;

       case TOKENTYPES.weekOfMonth:
        r.weekOfMonth();
        break;

       case TOKENTYPES.weekOfYear:
        r.weekOfYear();
        break;

       case TOKENTYPES.month:
        r.month();
        break;

       case TOKENTYPES.year:
        r.year();
        break;

       default:
        error = pos;
      }
      return timePeriod;
    }
    function checkAndParse(tokenType) {
      var found = peek(tokenType).type === tokenType;
      if (found) {
        scan(tokenType);
      }
      return found;
    }
    function parseToken(tokenType) {
      var t = scan(tokenType);
      if (t.type) {
        t.text = convertString(t.text, tokenType);
      } else {
        error = pos;
      }
      return t;
    }
    function parseTokenValue(tokenType) {
      return parseToken(tokenType).text;
    }
    function convertString(str, tokenType) {
      var output = str;
      switch (tokenType) {
       case TOKENTYPES.time:
        var parts = str.split(/(:|am|pm)/), hour = parts[3] === "pm" && parts[0] < 12 ? parseInt(parts[0], 10) + 12 : parts[0], min = parts[2].trim();
        output = (hour.length === 1 ? "0" : "") + hour + ":" + min;
        break;

       case TOKENTYPES.rank:
        output = parseInt(/^\d+/.exec(str)[0], 10);
        break;

       case TOKENTYPES.monthName:
       case TOKENTYPES.dayName:
        output = NAMES[str.substring(0, 3)];
        break;
      }
      return output;
    }
    return parseScheduleExpr(str.toLowerCase());
  };
  return later;
}();
/////////////////////////////////////////////////////////////////////////////////////////////
// MODULE:   axeTreeApp
/////////////////////////////////////////////////////////////////////////////////////////////
var axeTreeApp = angular.module("axeTreeApp", []);

/////////////////////////////////////////////////////////////////////////////////////////////
// DIRECTIVE:   axeTree
// ATTRIBUTES: 
//		root-node-id: defaults to -1 meaning all nodes will be displayed. If a child node should be used as root, it can be specified here
//      tree-data-url: url to base mvc controller implementing ITreeController
/////////////////////////////////////////////////////////////////////////////////////////////
axeTreeApp.directive("axeTree",
	function () {
		var controller = [
			"$scope", "$http", "$q", function ($scope, $http, $q) {
				var treeModel = null;
				var treeDataUrl = null;
				var selectedNodeIds = null;
				var dndCallback = $scope.dndCallback;
				var multiSelectEnable = $scope.multiSelectEnable || false;
				var leafIcon = $scope.leafIcon || "icon-state-warning fa fa-folder";

				var plugins = ["wholerow", "types", "sort", "dnd"]; //TODO: "contextmenu"


				var openNodePath = function (tree, nodePath, index) {
					index = index || 0;
					if (nodePath && index < nodePath.length) {
						var node = tree.get_node(nodePath[index]);
						return $q(function (resolve, reject) {
							tree.open_node(node,
								function () {
									openNodePath(tree, nodePath, index + 1).then(function (value) {
										resolve(value);
									});
								});
						});
					} else {
						return $q(function (resolve) {
							resolve(tree.get_node(nodePath[nodePath.length - 1]));
						});
					}
				};

				var openNode = function (nodeId) {
					if (treeModel) {
						var jsTree = treeModel.jstree(true);
						var node = jsTree.get_node(nodeId);
						if (!node) {
							return $q(function (resolve, reject) {
								if (nodeId == -1) {
									openNodePath(jsTree, -1).then(
										function (node) {
											resolve(node);
										});
								} else {
									$.get(treeDataUrl + "/parents/" + nodeId,
										function (parentNodeIds) {
											// if root node is enabled, the expansion needs to include the path to the 
											// root node with hard-coded id=-1
											if ($scope.rootNodeEnable) {
												parentNodeIds.unshift("-1");
											}
											openNodePath(jsTree, parentNodeIds)
												.then(
													function (node) {
														resolve(node);
													}
												);
										});
								}
							});

						} else {
							return $q(function (resolve, reject) {
								resolve(jsTree.get_node(nodeId));
							});
						}
					}
				};

				$scope.$on("axeTreeSelectedNodeIds",
					function (event, args) {
						selectedNodeIds = args.nodeIds;
						selectedNodeIds.forEach(openNode);
					});


				$scope.createTree = function (data, element, dataUrl) {
					treeDataUrl = dataUrl;

					//API: https://www.jstree.com/api/
					treeModel = element.jstree({
						core: {
							multiple: multiSelectEnable,
							themes: { responsive: true },
							check_callback: function (operation, node, node_parent, node_position, more) {
								if ($scope.dndEnable()) {
									if (more.core === true && operation === "move_node") { //drag completion
										var moveAccepted = true;
										$http.put(
											dataUrl + "/data/" + node.id + "/" + (node_parent.id === "#" ? 0 : node_parent.id),
											{},
											function success() { },
											function error(response) {
												alert(response.statusText);
											});
										if (dndCallback) {
											//callback must return true to indicate success of move or false to indicate failure and revert of move
											moveAccepted = $scope.dndCallback({ nodeId: node.id, newParentNodeId: node_parent.id });
										}
										return moveAccepted;
									} else if (more.dnd === true) { //drag acceptance check
										//allow dnd only if inserting somewhere other than inside same parent folder, or after/before other than within current siblings
										if ((more.pos === "i" && more.ref.id !== node.parent) ||
											(more.pos !== "i" && more.ref.parent !== node.parent)) {
											return true;
										}
									}
								}
								return false;
							},
							data: data
						},
						types: {
							default: {
								icon: "icon-state-warning fa fa-folder"
							},
							leaf: {
								//NOTE: Icon also set for .jstree-leaf class in AxeWeb.scss as:
								//    .jstree-leaf > .jstree-anchor ::before
								// This only handle explicit 'type: leaf' in data structure
								icon: leafIcon
							}, settings: {
								icon: "fa fa-cog text-primary"
							}
						},
						plugins: plugins
					});

					// toggle node visibility from disabledNodesVisible change
					$scope.$watch("disabledNodesVisible", function (value) {
						var jsTree = treeModel.jstree(true);
						angular.forEach(jsTree.get_json("#", { flat: true }), function (node) {
							if (node.data.enabled === false) {
								if (value) {
									jsTree.show_node(node);
								} else {
									jsTree.hide_node(node);
								}
							}
						});
					});

					// bind customize icon change function in jsTree open_node event. 
					treeModel.on("open_node.jstree",
						function (e, data) {
							treeModel.jstree(true).set_icon(data.node, "icon-state-warning fa fa-folder-open");
						});

					// bind customize icon change function in jsTree close_node event. 
					treeModel.on("close_node.jstree",
						function (e, data) {
							treeModel.jstree(true).set_icon(data.node, "icon-state-warning fa fa-folder");
						});

					// On node model load event, set hidden state based on node.data.enabled value and disableNodeVisible setting
					treeModel.on("model.jstree",
						function (e, data) {
							var jsTree = treeModel.jstree(true);
							angular.forEach(data.nodes, function (nodeId) {
								var node = jsTree.get_node(nodeId);
								if (null != node.data && node.data.enabled === false) {
									jsTree.set_icon(node, "icon-state-danger fa fa-minus-circle");
									if (!$scope.disabledNodesVisible) {
										jsTree.hide_node(node);
									}
								}
							});
						});

					treeModel.on("select_node.jstree",
						function (e, data) {
							var jsTree = element.jstree(true);
							var selected = [];
							data.selected.forEach(function (nodeId, index, x) {
								if (data.node.original.type == "leaf" || !$scope.disableParentNodeSelection) {
									selected.push({
										nodeId: nodeId,
										path: $scope.rootNodeEnable ? jsTree.get_path(nodeId, "/").replace(/^Root\//, "") : jsTree.get_path(nodeId, "/"),
										type: data.node.original.type,
										text: data.node.original.text,
										clickEvent: data.event
									});
								}
								if (data.node.original.type != "leaf" && $scope.disableParentNodeSelection) {
									jsTree.deselect_node(nodeId);
								}
							});
							if (selected.length > 0) {
								$scope.$emit("axeTreeNodeSelected", selected);
							}
						});
					
					treeModel.on("loaded.jstree",
						function (e, data) {
							var jsTree = element.jstree(true);
							if (selectedNodeIds) {
								var selectedNodePromises = [];
								selectedNodeIds.forEach(function (nodeId) {
									selectedNodePromises.push(openNode(nodeId));
								});
								$q.all(selectedNodePromises)
									.then(function (selectedNodes) {
										jsTree.select_node(selectedNodes);
									});
							} else {
								// Optional: Open root level nodes - currently handling in controller by setting node state opened:true. Maybe better to handle here instead?
								//var json = jsTree.get_json('#');

								//$(json).each(function (index, value) {
								//	if (value.type !== "leaf") {
								//		jsTree.open_node(value.id);
								//	}
								//});
							}
						});
				};
			}
		];
		return {
			restrict: "EA",
			controller: controller,
			scope: {
				treeDataUrl: "@",
				treeData: "=",
				rootNodeId: "@",
				rootNodeEnable: "=",
				multiSelectEnable: "@",
				dndEnable: "&",
				dndCallback: "&",
				leafIcon: "@",
				disabledNodesVisible: "=",
				disableParentNodeSelection: "="
			},
			link: function (scope, element, attrs) {
				var rootNodeId = attrs.rootNodeId || -1;
				var dataUrl = attrs.treeDataUrl;

				var data = null;
				if (scope.treeData) {
					if (scope.treeData.then != null) {
						scope.treeData.then(function (response) {
							data = response;
							scope.createTree(data, element);
						});
					} else {
						data = scope.treeData;
						scope.createTree(data, element);
					}
				} else if (dataUrl) {
					data = function (obj, callback) {
						if (obj.id === "#") {
							//Add a default 'Root' node to the tree if 'root-node-enable=true' attribute is present
							//    Set to auto-expand to show first level nodes
							if (attrs.rootNodeEnable) {
								var nodes = [{
									"children": true,
									"data": {
										"enabled": true
									},
									"state": {
										"opened": true
									},
									"id": "-1",
									"parent": "#", //jsTree root nodes must have parent='#'
									"text": "Root",
									"type": "default"
								}];
								callback.call(this, nodes);
							} else {
								$.get(dataUrl + "/root/" + rootNodeId,
									function (nodes) {
										// If using db root nodes as tree roots, set their parents to '#' per-jstree requirements.
										$.each(nodes, function (index) { nodes[index].parent = "#" });
										callback.call(this, nodes);
									});
							}
						} else {
							$.get(dataUrl + "/data/" + obj.id,
								function (nodes) {
									// In the case where a dummy root-node is present (root-node-enable=true), the root node id will be -1.
									//    Set all db nodes returned to use parent of -1 (dummy 'Root' node) instead of '#'
									//    to hook them as children to 'Root'
									if (obj.id == -1) {
										$.each(nodes, function (index) { nodes[index].parent = "-1" });
									}
									callback.call(this, nodes);
								});
						}
					};
					scope.createTree(data, element, dataUrl);
				}
			}
		}
	});
var commentDialogController = [
	"$scope", "$uibModalInstance", "$document", "title", function($scope, $uibModalInstance, $document, title) {
		$scope.comment = "";
		$scope.title = title;

		var keydownListener = function (e) {
			if (e.isDefaultPrevented()) {
				return e;
			} else if (e.which === 13) {
				$scope.accept();
			}
		};

		$scope.accept = function() {
			$uibModalInstance.close($scope.comment);
		};

		$scope.cancel = function() {
			$document.off("keydown", keydownListener);
			$uibModalInstance.dismiss("cancel");
		};

		$document.on("keydown", keydownListener);
	}
];

angular.module("executionsDataTableModule", ["axeApp", "axeDataTableApp", "ngResource", "ui.bootstrap", "queueDialogModule", "testEditDialogModule", "issueDialogModule", "issueInfoModule", "testListTestHistoryDialogModule"])
	.directive("executionsDataTable", [function () {
		return {
			restrict: "E",
			scope: {
				executionGroupId: "=",
				softwareCiExecutionStageId: "=",
				testListId: "=",
				rootUrl: "=",
				scrollY: "="
			},
			templateUrl: "/axe/Scripts/App/ExecutionsDataTable/executionsDataTable.html",
			controller: [
				"$scope", "$rootScope", "$location", "$routeParams", "$window", "$timeout", "$http", "$uibModal", "queueDialog", "testEditDialog", "issueDialog", "issueInfo", "testListTestHistoryDialog",
				function ($scope, $rootScope, $location, $routeParams, $window, $timeout, $http, $uibModal, queueDialog, testEditDialog, issueDialog, issueInfo, testListTestHistoryDialog) {
					$scope.selectedRows = null;
					var lastRunQuery = {};
					var lastDataTablesParameterModel = null;
					var statusColorStyle = {
						Queued: "",
						PendingExecution: "",
						Running: "",
						Pass: "green",
						Fail: "red",
						Error: "red",
						Warn: "goldenrod"
					};
					var rootUrl = $scope.rootUrl;

					$scope.dataUrl = "/axe/execution/datatable/group/" + $scope.executionGroupId;
					if ($scope.softwareCiExecutionStageId) {
						$scope.dataUrl = "/axe/software/triage/stage/" + $scope.softwareCiExecutionStageId + "/executions/datatable";
					}

					if (rootUrl === null || rootUrl === undefined || rootUrl === "") {
						rootUrl = "/axe/execution/";
					} else if (rootUrl[rootUrl.length - 1] !== "/") {
						rootUrl += "/";
					}

					$scope.selectedExecutionStages = [];
					$scope.selectedLatestTestListTestStatus = [];
					$scope.selectedExecutedTestListTestStatus = [];
					$scope.selectedExecutionStatus = [];
					$scope.selectedFeatureStatus = [];
					$scope.testListIds = [];
					$scope.testListPaths = [];
					$scope.state = {
						queueEnable: false,
						actionEnable: false,
						loading: false
					};


					var loadExecutionStages = function () {
						if ($scope.executionGroupId) {
							$http.get("/axe/execution/" + $scope.executionGroupId + "/executionplanstages")
								.then(function (response) {
									initExecutionStages(response.data);
								});
						} else {
							$http.get("/axe/testlist/" + $scope.testListId + "/executionplanstages")
								.then(function (response) {
									initExecutionStages(response.data);
								});
						}
					};

					var initExecutionStages = function (stageData) {
						var executionStages = [];
						var selectedExecutionStages = [];
						var initSelectedExecutionStageIdList = $scope.columns[2].value.split(",");

						angular.forEach(stageData, function (stages, executionPlanName) {
							angular.forEach(stages, function (stage) {
								stage.executionPlanName = executionPlanName;
								if (initSelectedExecutionStageIdList.includes(stage.id.toString())) {
									selectedExecutionStages.push(stage);
								}
								executionStages.push(stage);
							});
						});

						$scope.selectedExecutionStages = selectedExecutionStages;
						$scope.executionStages = executionStages;

						$scope.selectedExecutionStatus = $scope.columns[10].value.replace(/\"/g, "").split(",");
						$scope.selectedFeatureStatus = $scope.columns[32].value.replace(/\"/g, "").split(",");
						$scope.selectedLatestTestListTestStatus = $scope.columns[24].value.replace(/\"/g, "").split(",");
						$scope.selectedExecutedTestListTestStatus = $scope.columns[25].value.replace(/\"/g, "").split(",");
						$scope.selectedMilestones = $scope.columns[21].value.replace(/\"/g, "").split(",");
					};

					var init = function () {
						//some pages have to resolve testListId through a $q or $resource. This code is necessary to resolve the promise.
						if (typeof $scope.testListId === "object") {
							$scope.testListId.then(function (testListId) {
								$scope.testListId = testListId;
								loadExecutionStages();
							});
						} else if ($scope.testListId != null && $scope.testListId != 0) {
							loadExecutionStages();
						}
					};

					$scope.filterExecutionStages = function (selectedExecutionStages, columnFilter) {
						var executionStageIdSet = {};
						angular.forEach(selectedExecutionStages, function (stage) {
							executionStageIdSet[stage.id] = true;
						});
						columnFilter.value = Object.keys(executionStageIdSet).join(",");
					};

					$scope.filterMultiSelectColumn = function (selectedValues, columnFilter) {
						var valuesSet = {};
						angular.forEach(selectedValues, function (val) {
							valuesSet[val.replace(/^"(.+(?="$))"$/, '$1')] = true; //regex removes leading or trailing quotes from each string
						});
						columnFilter.value = Object.keys(valuesSet).join(",");
						if (columnFilter.value !== "") {
							columnFilter.value = "\"" + columnFilter.value + "\"";
						}
					};

					$scope.columns = [
						{
							data: "id",
							name: "id",
							value: "",
							visible: false,
							render: function (data, type, row, meta) {
								return row.id;
							}
						},
						{ data: "testListPath", name: "testListPath", value: "", visible: false },
						{
							data: "executionStageId",
							name: "executionStageId",
							value: "",
							visible: true, render: function (data, type, row, meta) {
								return row.executionStageName;
							},
							dataTableDownloadColumnMappingName: "executionStageName"
						},
						{ data: "productConfig", name: "productConfig", value: "", visible: false },
						{ data: "testAreaPath", name: "testAreaPath", value: "", visible: true },
						{
							data: "relativePath",
							name: "relativePath",
							value: "",
							visible: false,
							render: function (data, type, row, meta) {
								var relativePath;
								// Orthogonal render type for copy buttons to format data differently than it's displayed in the datatable.
								if (type === "exportRunReg") {
									relativePath = (row.testAreaPath.toLowerCase().startsWith("fulsim") ? " -fid" : " -cid") + " \"" + data + "\"";
								} else {
									relativePath = data;
								}
								return relativePath;
							}
						},
						{
							data: "fileName",
							name: "fileName",
							value: "",
							visible: true,
							render: function (data, type, row, meta) {
								var fileName;
								if (type === "exportRunReg" || type === "exportAxeTestList") {
									fileName = data;
								} else {
									fileName = "<a href='/axe/tests/" +
										row.testCaseId +
										"/detail/overview?version=" +
										row.testCaseVersionId +
										"'>" +
										row.fileName +
										"</a>";

									if (row.issues.length > 0) {
										fileName = issueInfo.renderBugIcon(row.issues, "openIssue") + "&nbsp; " + fileName;
									}

									if (row.latestTestListTestStatus !== "Active") {
										var icon = "";
										if (row.latestTestListTestStatus === "Waived") {
											icon = "<i class='fa fa-pause-circle text-danger'></i>";
										} else if (row.latestTestListTestStatus === "DoNotRun") {
											icon = "<i class='fa fa-stop-circle text-danger'></i>";
										} else if (row.latestTestListTestStatus === "MustRun") {
											icon = "<i class='fa fa-exclamation fa-lg text-primary'></i>";
										} else if (row.latestTestListTestStatus === "MustRunWaived") {
											icon = "<i class='fa fa-exclamation fa-lg text-primary'></i> <i class='fa fa-pause-circle text-danger'></i>";
										}
										var comment = (row.statusComment === null ? "" : ": " + row.statusComment.replace("'", "&apos;")) + " [" + row.statusAuthor + "]";
										fileName = "<span uib-tooltip='" + row.latestTestListTestStatus + comment + "' tooltip-append-to-body='true'>" + icon + "</span>&nbsp;" + fileName;
									}

									if (row.essential) {
										fileName = "<i class='fa fa-star text-primary' uib-tooltip='Essential' tooltip-append-to-body='true'></i>&nbsp;" + fileName;
									}
								}
								return fileName;
							}
						},
						{ data: "config", name: "config", value: "", visible: true },
						{ data: "commandLine", name: "commandLine", value: "", visible: true },
						{ data: "seed", name: "seed", value: "", visible: false },
						{
							name: "executionStatus",
							value: "",
							visible: true,
							render: function (data, type, row, meta) {
								var status = (row.executedTestListTestStatus !== "Active" && row.executedTestListTestStatus !== "MustRun" && row.executedTestListTestStatus !== "MustRunWaived")
									? (row.executedTestListTestStatus + ": " + row.executionStatus)
									: row.executionStatus;
								var link = "<a href='" + rootUrl +
									(row.id) +
									"'><b style='color:" +
									statusColorStyle[row.executionStatus] +
									";'>" +
									status +
									"</b></a> ";
								//Log button: #link = link + "<a class=\"btn btn-default btn-xs\" href='/axe/execution/" + row.id + "/log' target=\"_blank\"><i class=\"fa fa-file-text fa-md\"></a>";
								return link;
							}
						},
						{ data: "exitCode", name: "exitCode", value: "", visible: false },
						{ data: "exitCodeMessage", name: "exitCodeMessage", value: "", visible: true },
						{ data: "failureSignatureMessage", name: "failureSignatureMessage", value: "", visible: false },
						{ data: "softwareVersionLabel", name: "softwareVersionLabel", value: "", visible: false },
						{ data: "platformVersionLabel", name: "platformVersionLabel", value: "", visible: false },
						{ data: "testVersionLabel", name: "testVersionLabel", value: "", visible: false },
						{
							data: "completedDateTime",
							name: "completedDateTime",
							value: "",
							visible: false,
							render: function (data, type, row, meta) {
								return axeApp.utcToLocal(row.completedDateTime) || "";
							}
						},
						{ data: "runTime", name: "runTime", value: "", visible: false },
						{ data: "executionGroup", name: "executionGroup", value: "", visible: false },
						{ data: "creator", name: "creator", value: "", visible: false },
						{ data: "milestone", name: "milestone", value: "", visible: false },
						{ data: "executionTags", name: "executionTags", value: "", visible: false, orderable: false },
						{ data: "essential", name: "essential", value: "", visible: false },
						{ data: "latestTestListTestStatus", name: "latestTestListTestStatus", value: "", visible: false },
						{ data: "executedTestListTestStatus", name: "executedTestListTestStatus", value: "", visible: false },
						{ data: "statusAuthor", name: "statusAuthor", value: "", visible: false },
						{ data: "statusComment", name: "statusComment", value: "", visible: false },
						{
							data: "issues",
							name: "issues",
							value: "",
							visible: false,
							orderable: false,
							render: function (data, type, row, meta) {
								if (type === "exportSelected") {
									return row.issuesDetails;
								}

								return issueInfo.renderIssueButtons(row.issues, "openIssue");
							},
							createdCell: function (td, cellData, rowData, rowIndex, colIndex) {
								$(td).css('padding', '2px');
							},
							dataTableDownloadColumnMappingName: "issuesDetails"
						},
						{ data: "testOwner", name: "testOwner", value: "", visible: false },
						{ data: "products", name: "products", value: "", visible: false, orderable: false },
						{ data: "features", name: "features", value: "", visible: false, orderable: false },
						{ data: "featureStatus", name: "featureStatus", value: "", visible: false },
						{ data: "targets", name: "targets", value: "", visible: false, orderable: false },
						{ data: "tags", name: "tags", value: "", visible: false, orderable: false },
					];

					$scope.queryFields = {
						commandLine: { type: "string", label: "CommandLine" },
						completedDateTime: { type: "date", label: "CompletedDate" },
						creator: { type: "string", label: "Creator" },
						latestTestListTestStatus: { type: "value", validValues: ["Active", "DoNotRun", "MustRun", "MustRunWaived", "Waived"], label: "Current Status" },
						description: { type: "string", label: "Description" },
						essential: { type: "bool", label: "Essential" },
						executedTestListTestStatus: { type: "value", validValues: ["Active", "DoNotRun", "MustRun", "MustRunWaived", "Waived"], label: "Executed Status" },
						executionGroup: { type: "string", label: "Execution Group" },
						executionStageName: { type: "string", label: "Execution Stage" },
						exitCode: { type: "int", label: "ExitCode" },
						exitCodeMessage: { type: "string", label: "ExitMessage" },
						failureSignatureMessage: { type: "string", label: "Failure Message" },
						features: { type: "string", label: "Features" },
						featureStatus: { type: "value", validValues: ["New", "Legacy"], label: "Feature Status" },
						fileName: { type: "string", label: "File" },
						fileGuid: { type: "string", label: "File Guid" },
						hsdId: { type: "int", label: "HSD Id" },
						issueOwner: { type: "string", label: "Issue Owner" },
						issueStatus: { type: "string", label: "Issue Status", validValues: ["Open", "Closed"] },
						issueTitle: { type: "string", label: "Issue Title" },
						milestone: { type: "value", validValues: ["0.0", "0.15", "0.25", "0.5", "0.85", "1.0", "N/A", "Unassigned"], label: "Milestone" },
						productConfig: { type: "string", label: "Product Config" },
						executionTags: { type: "string", label: "Product Tag" },
						products: { type: "string", label: "Products" },
						relativePath: { type: "string", label: "Relative Path" },
						executionStatus: { type: "value", validValues: ["Pass", "Fail", "Error", "Warn", "Queued", "Pending", "Running"], label: "Result" },
						runTime: { type: "int", label: "Run Time" },
						seed: { type: "int", label: "Seed" },
						statusAuthor: { type: "string", label: "Status Author" },
						statusComment: { type: "string", label: "Status Comment" },
						softwareVersionLabel: { type: "string", label: "SW Version" },
						targets: { type: "string", label: "Targets" },
						testAreaPath: { type: "string", label: "Test Area" },
						testGuid: { type: "string", label: "Test Guid" },
						testListPath: { type: "string", label: "Test List" },
						config: { type: "string", label: "Test Name" },
						testOwner: { type: "string", label: "Test Owner" },
						tags: { type: "string", label: "Yaml Tags" }
					};

					//https://datatables.net/reference/button/copy
					$scope.axeDataTableButtons = [
						{ //Runreg TestList Export
							extend: "copy",
							title: null,
							exportOptions: {
								modifier: { selected: true },
								//IMPORTANT: index to columns [FileName, TestName, RelativePath, TestVersion]
								columns: ["fileName:name", "config:name", "relativePath:name", "testVersionLabel:name"],
								orthogonal: "exportRunReg",
								format: {
									header: function () {
										return "";
									},
									// Required output format:
									//<file w/o extension>#<name> -cid <relativePath> -repo_ver <testVersion>
									body: function (data, row, column) {
										// Column ids match the columns array above. 
										if (column === 0) { //FileName
											return data.substr(0, data.lastIndexOf(".")) || data;
										} else if (column === 1) { //TestName
											return (null != data && data !== "") ? "#" + data : "";
										} else if (column === 2) { //RelativePath
											// RelativePath is formatted by the column render function
											return data;
										} else if (column === 3) { //TestVersion
											return (null != data && data !== "") ? " -repo_ver " + data : "";
										} else {
											return data;
										}
									}
								}
							},
							titleAttr: "Export RunReg TestList",
							text: "<i class='fa fa-lg fa-list'></i>",
							header: false,
							footer: false,
							fieldSeparator: ""
						},
						{ //https://datatables.net/reference/button/copy
							extend: "copy",
							title: null,
							exportOptions: {
								modifier: { selected: true },
								//IMPORTANT: index to columns [RelativePath, FileName, TestName, Seed, TestVersion]
								columns: ["relativePath:name", "fileName:name", "config:name", "seed:name", "testVersionLabel:name"],
								orthogonal: "exportAxeTestList",
								format: {
									header: function () {
										return "";
									},
									// Required output format:
									// <relativePath>/<fileName>#<testName>|<seed>@<testVersion>
									body: function (data, row, column) {
										// Column ids match the columns array above. 
										if (column === 0) { //RelativePath
											return data + "/";
										} else if (column === 1) { //FileName
											return data;
										} else if (column === 2) { //TestName
											return (null != data && data !== "") ? "#" + data : "";
										} else if (column === 3) { //Seed
											return (null != data && data !== "") ? "|" + data : "";
										} else if (column === 4) { //TestVersion
											return (null != data && data !== "") ? "@" + data : "";
										} else {
											return data;
										}
									}
								}
							},
							customize: function (input) {
								return "\"" + input.replace(/\r\n/g, "\",\r\n\"") + "\"";
							},
							titleAttr: "Export AxeApp TestList",
							text: "<img src='/axe/Content/Images/AxeLogoA.png' height='18' width='18'></i>",
							header: false,
							footer: false,
							fieldSeparator: ""
						},
						{
							extend: "collection",
							autoClose: true,
							background: true,
							fade: 0,
							titleAttr: "Download TestList",
							text: "<i class='fa fa-lg fa-download'></i>",
							buttons: [
								{
									text: "Send to Local",
									action: function (e, dt, node, config) {
										$scope.state.loading = true;
										$scope.queue(true, queueActions.LOCAL);
										$('div.dt-button-background').click();
									}
								},
								{
									text: "Json File",
									action: function (e, dt, node, config) {
										$scope.state.loading = true;
										$scope.queue(true, queueActions.DOWNLOAD);
										$('div.dt-button-background').click();
									}
								}
							]
						}
					];

					$scope.queue = function (selectAll, action) {
						queueDialog.open(
							$scope.testListId,
							$scope.executionGroupId || ($scope.selectedRows != null ? $scope.selectedRows[0].executionGroupId : null),
							$scope.softwareCiExecutionStageId,
							null,
							$scope.selectedRows,
							selectAll,
							action || queueActions.QUEUE,
							lastDataTablesParameterModel,
							rootUrl);
					};

					$scope.editMilestone = function () {
						var items = $scope.selectedRows;
						$scope.product = items[0].product;
						if (null != items && items.length > 0) {
							$uibModal.open({
								animation: false,
								templateUrl: "/axe/Scripts/App/TestCases/Milestones/editDialog.html",
								controller: milestonesEditDialogController,
								backdrop: "static",
								resolve: {
									dataTablesParameterModel: null,
									product: function () { return $scope.product; },
									testAreaId: function () { return null; },
									testCaseIds: getSelectedTestCaseIds
								}
							}).result.then(function (selectedItem) {
								$scope.$broadcast("axeDataTableRun", { query: lastRunQuery });
							}, function () {
								//dismiss
							});
						}
					};

					$scope.editExecutionTags = function () {
						var items = $scope.selectedRows;
						if (items && items.length > 0) {
							$uibModal.open({
								animation: false,
								templateUrl: "/axe/Scripts/App/TestCases/ExecutionTags/editDialog.html",
								controller: executionTagEditDialogController,
								backdrop: "static",
								size: "md",
								resolve: {
									product: function () { return items[0].product; },
									testAreaId: function () { return null; },
									testCaseIds: getSelectedTestCaseIds,
									dataTablesParameterModel: lastDataTablesParameterModel
								}
							}).result.then(function (selectedItem) {
								$scope.$broadcast("axeDataTableRun", { query: lastRunQuery });
							}, function () {
								//dismiss
							});
						}
					};

					var getSelectedTestCaseIds = function () {
						var testCaseIds = [];
						angular.forEach($scope.selectedRows, function (row) { testCaseIds.push(row.testCaseId); });
						return testCaseIds;
					};

					$scope.editEssential = function () {
						var items = $scope.selectedRows;
						if (null != items && items.length > 0) {
							var testListTestIds = [];
							angular.forEach(items,
								function (row) {
									testListTestIds.push(row.testListTestId);
								});
							testEditDialog.edit(testListTestIds,
								function () {
									$scope.$broadcast("axeDataTableRun", { query: lastRunQuery });
								});
						}
					};

					$scope.editIssue = function () {
						var items = $scope.selectedRows;
						if (null != items && items.length > 0) {
							var testListTestIdData = [];
							items.each(function (row) {
								testListTestIdData.push({
									testListTestId: row.testListTestId,
									executionStageId: row.executionStageId,
									executionId: row.id,
									softwareVersionLabel: row.softwareVersionLabel,
									issues: row.issues
								});
							});

							issueDialog.edit(
								testListTestIdData,
								function () {
									$scope.$broadcast("axeDataTableRun", { query: lastRunQuery });
								});
						}
					};

					$scope.findInTestList = function () {
						var testListTestIds = [];

						angular.forEach($scope.selectedRows,
							function (row) {
								testListTestIds.push(row.testListTestId);
							});
						var url = "/axe/tests/testlists/" +
							$scope.selectedRows[0].testListId +
							"/?id=" +
							encodeURIComponent(testListTestIds.join("|"));
						$window.open(url);
					};

					$scope.copyUrlToClipboard  = function () {
						var executionIds = [];

						angular.forEach($scope.selectedRows,
							function (row) {
								executionIds.push(row.id);
							});

						var search = $location.search();
						search["id"] = encodeURIComponent(executionIds.join("|"));
						var url = window.location.pathname + "?" + new URLSearchParams(search).toString();

						axeApp.copyToClipboard(window.location.origin + url, document);
						var d = $("#axeDataTableApp").DataTable();
						d.buttons.info("Url Copied to Clipboard", " Copied " + executionIds.length + " Rows", 2000);
					};

					$scope.openTestHistory = function (event) {
						event.preventDefault();
						if ($scope.selectedRows.length < 5 || confirm($scope.selectedRows.length + " rows selected. Are you sure you want to open test history for all of them?")) {
							angular.forEach($scope.selectedRows,
								function (row) {
									$window.open("/axe/tests/" + row.testCaseId + "/detail/executions?testListPath=\"" + encodeURIComponent(row.testListPath) + "\"&executionStageName=\"" + encodeURIComponent(row.executionStageName) + "\"&order=createdDateTime&dir=desc", "_blank");
								});
						}
					};

					$scope.openTestListTestHistory = function () {
						var items = $scope.selectedRows;
						if (null != items && items.length > 0) {
							testListTestHistoryDialog.open(items[0].testListTestId);
						}
					};

					// Called by issue buttons
					$scope.openIssue = function (issue) {
						issueInfo.open(
							issue,
							function () {
								$scope.$broadcast("axeDataTableRun", { query: lastRunQuery });
							}
						);
					};

					$scope.stopExecutionGroup = function () {
						$uibModal.open({
							animation: false,
							templateUrl: "/axe/Scripts/App/ExecutionGroupEditDialog/executionGroupEditDialog.html",
							controller: executionGroupEditDialogController,
							backdrop: "static",
							size: "md",
							resolve: {
								executionGroupIds: function () {
									var executionGroupIds = [];
									executionGroupIds.push($scope.executionGroupId)
									return executionGroupIds;
								}
							}
						}).result.then(function (selectedItem) {
							$scope.$broadcast("axeDataTableRun", { query: lastRunQuery });
						}, function () {
							//dismiss
						});
					};

					$scope.axeDataTableAjaxRequest = function (dataTablesParameterModel) {
						lastDataTablesParameterModel = dataTablesParameterModel;
					};

					$scope.run = function (query) {
						lastRunQuery = query;
						$scope.$broadcast("axeDataTableRun", { query: query });
					};

					$scope.selected = function (rows) {
						$scope.selectedRows = rows;
						if ($scope.selectedRows !== null && $scope.selectedRows.length > 0) {
							$scope.executionId = rows[0].id;
							$scope.state.actionEnable = true;
							$scope.state.queueEnable = true;
						} else {
							$scope.state.actionEnable = false;
							$scope.state.queueEnable = false;
						}
					};

					$scope.keydown = function (event) {
						if ($scope.selectedRows.length > 0 && !event.ctrlKey && !event.altKey && !event.metaKey) {
							if (event.key === "l") {
								$("#openLogMenuButton").click();
							} else if (event.key === "q") {
								$scope.queue(false);
							} else if (event.key === "h") {
								$scope.openTestHistory(event);
							} else if (event.key === "m") {
								$scope.editMilestone();
							} else if (event.key === "t") {
								$scope.editExecutionTags();
							} else if (event.key === "e") {
								$scope.editEssential();
							} else if (event.key === "i") {
								$scope.editIssue();
							} else if (event.key === "f") {
								$scope.findInTestList();
							} else if (event.key === "s") {
								$scope.copyUrlToClipboard();
							} else if (event.key === "j") {
								$scope.openTestListTestHistory();
							}
						}
					};
					init();
				}
			]
		};
	}
	]);

var executionGroupEditDialogController = [
	"$scope", "$document", "$uibModalInstance", "$http", "executionGroupIds",
	function ($scope, $document, $uibModalInstance, $http, executionGroupIds) {
		$scope.applied = false;
		$scope.saving = false;
		$scope.error = null;
		$scope.executionGroupIds = executionGroupIds;

		var keydownListener = function (e) {
			if (e.isDefaultPrevented()) {
				return e;
			} else if (e.which === 13) {
				if (!$scope.applied) {
					$scope.apply();
				} else {
					$scope.close();
				}
			}
		};

		$scope.apply = function () {
			$scope.saving = true;
			var body = {
				comment: $scope.comment,
				executionGroupIds: executionGroupIds
			};
			$http.put("/axe/api/executiongroup/stop", body)
				.then(
					function success(response) {
						if (response.data.length > 0) {
							$scope.error = "You do not have permission to stop execution group" 
								+ (response.data.length !== 1 ? "s: " : ": ")
								+ response.data.join(", ");
						}
						$scope.applied = true;
						$scope.saving = false;
					},
					function error(response) {
						$scope.error = "Error: " + ((response.data.message && response.status !== 500) ? response.data.message : response.statusText);
						$scope.applied = true;
						$scope.saving = false;
					});
		};

		$scope.cancel = function () {
			$document.off("keydown", keydownListener);
			$uibModalInstance.dismiss("cancel");
		};

		$scope.close = function () {
			$document.off("keydown", keydownListener);
			$uibModalInstance.close();
		};

		$document.on("keydown", keydownListener);
	}
];

angular.module("executionGroupsDataTableModule", ["axeApp", "axeDataTableApp", "ngResource", "ui.bootstrap"]).directive("executionGroupsDataTable", [
		function() {
			return {
				restrict: "E",
				scope: {
					testListId: "=",
					filters: "=",
					rootUrl: "=",
					onFilters: "&",
					onDiff: "&",
					scrollY: "="
					
				},
				templateUrl: "/axe/Scripts/App/ExecutionGroupsDatatable/executionGroupsDataTable.html",
				controller: [
					"$scope", "$location", "$timeout", "$uibModal",
					function ($scope, $location, $timeout, $uibModal) {
						$scope.rootUrl = $scope.rootUrl.replace(/\/$/, "");
						$scope.testListTestUrl = $scope.rootUrl.substring(0, $scope.rootUrl.indexOf("/executions"));
						$scope.filters = $scope.filters;
						
						$scope.dataUrl = "/axe/tests/datatable/executiongroups/" +
							($scope.testListId ? $scope.testListId : 0) +
							"/" +
							($scope.filters.ci ? "true" : "false") +
							"/" +
							($scope.filters.user ? "true" : "false") +
							"/" +
							($scope.filters.mine ? "true" : "false");

						var selectedRows = [];
						var lastRunQuery = {};
						var toggleFilters = function () {
							$scope.onFilters({ filters: $scope.filters });
							axeApp.safeApply($scope);
						};

						$scope.run = function (query) {
							lastRunQuery = query;
							$scope.$broadcast("axeDataTableRun", { query: query });
						};

						$scope.state = {
							diffEnable: false,
							contextEnable: false,
							loading: false
						};

						$scope.selected = function(rows) {
							selectedRows = rows;
							$scope.state.diffEnable = (selectedRows != null && selectedRows.length === 2);
							$scope.state.contextEnable = (selectedRows != null && selectedRows.length > 0);
						};

						$scope.keydown = function (event) {
							if (selectedRows.length > 0 && !event.ctrlKey && !event.altKey && !event.metaKey) {
								if (event.key === "d") {
									$scope.diff();
								}
							}
						};

						$scope.diff = function() {
							if (selectedRows != null && selectedRows.length === 2) {
								var left = selectedRows[0].executionGroupId > selectedRows[1].executionGroupId
									? selectedRows[1].executionGroupId
									: selectedRows[0].executionGroupId;
								var right = selectedRows[0].executionGroupId > selectedRows[1].executionGroupId
									? selectedRows[0].executionGroupId
									: selectedRows[1].executionGroupId;

								$scope.onDiff({ leftExecutionGroupId: left, rightExecutionGroupId: right });
							}
						};

						$scope.stopExecutionGroup = function (x) {
							$uibModal.open({
								animation: false,
								templateUrl: "axe/Scripts/App/ExecutionGroupEditDialog/executionGroupEditDialog.html",
								controller: executionGroupEditDialogController,
								backdrop: "static",
								size: "md",
								resolve: {
									executionGroupIds: getSelectedExecutionGroupIds }
								
							}).result.then(function (selectedItem) {
								$scope.$broadcast("axeDataTableRun", { query: lastRunQuery });
							}, function () {
								//dismiss
							});
						};

						var getSelectedExecutionGroupIds = function () {
							var executionGroupIds = [];
							angular.forEach(selectedRows, function (row) { executionGroupIds.push(row.executionGroupId); });
							return executionGroupIds;
						};

						$scope.axeDataTableButtons = [
							{
								extend: "collection",
								autoClose: true,
								background: true,
								fade: 200,
								titleAttr: "Filter",
								text: "<i class='fa fa-lg fa-filter'></i>",
								buttons: [
									{
										text: "Mine",
										className: $scope.filters.mine ? "active" : "",
										action: function (event, dt, node, config) {
											$scope.filters.mine = !$scope.filters.mine;
											toggleFilters();
											$('div.dt-button-background').click();
										}
									},
									{
										text: "CI",
										className: $scope.filters.ci ? "active" : "",
										action: function (event, dt, node, config) {
											$scope.filters.ci = !$scope.filters.ci;
											toggleFilters();
											$('div.dt-button-background').click();
										}
									}
								],
								className:
									($scope.filters.user || $scope.filters.mine)
										? "active"
										: "" //OR together all filter states to determine if button should show active state because any filter is enabled
							}
						];

						$scope.columns = [
							{
								data: "testListName",
								name: "testListName",
								value: "",
								visible: false,
								render: function(data, type, row, meta) {
									return "<a href='/axe/tests/testlists/" + row.testListId + "/ci'>" + row.testListName + "</a>";
								}
							},
							{
								data: "executionGroupName",
								name: "executionGroupName",
								value: "",
								visible: true,
								render: function (data, type, row, meta) {
									var group = "<a href='" +
										$scope.rootUrl +
										"/group/" +
										row.executionGroupId +
										"'>" +
										(row.executionGroupName || "--ungrouped--") +
										"</a>";

									if (row.debugExecutionGroup) {
										group = "<span uib-tooltip='This group was executed with Debug Execution Stages' tooltip-append-to-body='true'><i class='fa fa-medkit'></i></span>&nbsp;" + group;
									}
									return group;
								}
							},
							{
								data: "scheduler",
								name: "scheduler",
								value: "",
								render: function(data, type, row, meta) {
									return "<a href='" +
										$scope.rootUrl +
										"/group/" +
										row.executionGroupId +
										"'>" +
										(row.scheduler) +
										"</a>";
								}
							},
							{
								data: "authorIdsid",
								name: "authorIdsid",
								value: "",
								visible: true
							},
							{
								data: "passCount",
								name: "passCount",
								value: "",
								visible: true,
								render: function(data, type, row, meta) {
									return "<a class='text-success' href='" +
										$scope.rootUrl +
										"/group/" +
										row.executionGroupId +
										"?executionStatus=Pass'>" +
										row.passCount +
										"</a>";
								}
							},
							{
								data: "warnCount",
								name: "warnCount",
								value: "",
								visible: true,
								render: function (data, type, row, meta) {
									return "<a class='text-warning' href='" +
										$scope.rootUrl +
										"/group/" +
										row.executionGroupId +
										"?executionStatus=Warn'>" +
										row.warnCount +
										"</a>";
								}
							},
							{
								data: "failCount",
								name: "failCount",
								value: "",
								visible: true,
								render: function(data, type, row, meta) {
									return "<a class='text-danger' href='" +
										$scope.rootUrl +
										"/group/" +
										row.executionGroupId +
										"?executionStatus=Fail'>" +
										row.failCount +
										"</a>";
								}
							},
							{
								data: "errorCount",
								name: "errorCount",
								value: "",
								visible: true,
								render: function(data, type, row, meta) {
									return "<a class='text-danger' href='" +
										$scope.rootUrl +
										"/group/" +
										row.executionGroupId +
										"?executionStatus=Error'>" +
										row.errorCount +
										"</a>";
								}
							},
							{
								data: "waivedCount",
								name: "waivedCount",
								value: "",
								visible: true,
								render: function (data, type, row, meta) {
									cellData = "";
									if (row.scheduler == 'SoftwareCi') {
										cellData = "<a href='" +
											$scope.testListTestUrl +
											"?latestTestListTestStatus=&quot;Waived&quot;'>" +
											row.waivedCount +
											"</a>";
									} else {
										cellData = "<a href='" +
											$scope.rootUrl +
											"/group/" +
											row.executionGroupId +
											"?executedTestListTestStatus=&quot;Waived&quot;'>" +
											row.waivedCount +
											"</a>";
									}
									return cellData;
								}
							},
							{
								data: "totalCount",
								name: "totalCount",
								value: "",
								visible: true,
								render: function(data, type, row, meta) {
									return "<a href='" +
										$scope.rootUrl +
										"/group/" +
										row.executionGroupId +
										"'>" +
										row.totalCount +
										"</a>";
								}
							},
							{
								data: "executionGroupStatus",
								name: "executionGroupStatus",
								value: "",
								orderable: false,
								render: function(data, type, row, meta) {
									var cellData = "";
									if (row.executionGroupStatus == "PendingStop" || row.executionGroupStatus == "Stopped") {
										cellData = "<b class='text-danger'>" + row.executionGroupStatus + "</b>";
									} else if (row.runningCount > 0 || row.queuedCount > 0) {
										cellData = "<b class='text-primary'>" +
											"Running: " +
											row.runningCount +
											"<br/>Queued: " +
											row.queuedCount +
											"</b>";
									} else {
										cellData = "Summary Report";
									}
									return "<a href='" +
										$scope.rootUrl +
										"/group/" +
										row.executionGroupId +
										"/summary/executionStageTestArea'>" +
										cellData +
										"</a>";
								}
							},
							{
								data: "progress",
								name: "progress",
								value: "",
								orderable: false,
								visible: true,
								render: function (data, type, row, meta) {
									var tooltip = "Running: " + (row.runningCount + row.queuedCount) + " Pass: " + row.passCount + " Fail: " + row.failCount + " Error: " + row.errorCount;
									return "<a uib-tooltip='" + tooltip + "' tooltip-append-to-body='true' href='" +
										$scope.rootUrl +
										"/group/" +
										row.executionGroupId +
										"/summary/executionStageTestArea'>" +
										"<div class='progress' style='margin-bottom:0;'>" +
										"	<div class='progress-bar progress-bar-success' style='width: " +
										100 * row.passCount / row.totalCount +
										"%'></div>" +
										"	<div class='progress-bar progress-bar-danger' style='width: " +
										100 * row.errorCount / row.totalCount +
										"%'></div>" +
										"	<div class='progress-bar progress-bar-warning' style='width: " +
										100 * row.warnCount / row.totalCount +
										"%'></div>" +
										"	<div class='progress-bar progress-bar-danger' style='width: " +
										100 * row.failCount / row.totalCount +
										"%'></div>" +
										"	<div class='progress-bar progress-bar-info progress-bar-striped active' style='width: " +
										100 * (row.runningCount + row.queuedCount) / row.totalCount +
										"%'></div>" +
										//"	<div class='progress-bar' style='width: " + 100 * row.queuedCount / totalCount + "%'></div>" +
										"</div></a>";
								}
							},
							{
								data: "createdDateTime",
								name: "createdDate",
								value: "",
								render: function(data, type, row, meta) {
									return axeApp.utcToLocal(row.createdDateTime) || "";
								}
							},
							{
								data: "completedDateTime",
								name: "completedDate",
								value: "",
								visible: false,
								render: function(data, type, row, meta) {
									return axeApp.utcToLocal(row.completedDateTime) || "";
								}
							},
							{
								data: "runTime",
								name: "runTime",
								value: ""
							},
							{
								data: "executionGroupStatusComment",
								name: "executionGroupStatusComment",
								value: "",
								visible: false,
								orderable: false
							},
							{
								data: "updateAuthorIdsid",
								name: "updateAuthorIdsid",
								value: "",
								visible: false
							},
							{
								data: "softwareName",
								name: "softwareName",
								value: "",
								visible: false
							},
							{
								data: "softwareVersion",
								name: "softwareVersion",
								value: "",
								visible: true
							},
							{
								data: "platformName",
								name: "platformName",
								value: "",
								visible: false
							},
							{
								data: "platformVersion",
								name: "platformVersion",
								value: "",
								visible: true
							}
						];
					}
				]
			}
		}]
);
angular.module("executionGroupsCompareModule", ["axeApp", "axeDataTableApp", "ngResource", "ui.bootstrap", "testEditDialogModule"]).directive("executionGroupsCompare",
	[function () {
		return {
			restrict: "E",
			scope: {
				leftExecutionGroupId: "=",
				rightExecutionGroupId: "=",
				rootUrl: "=",
				scrollY: "="
			},
			templateUrl: "/axe/Scripts/App/ExecutionGroupsCompare/executionGroupsCompare.html",
			controller: [
				"$scope", "$window", "$resource", "$http", "$location", "$q", "testEditDialog",
				function ($scope, $window, $resource, $http, $location, $q, testEditDialog) {
					$scope.selectedRows = [];
					$scope.selectedLeftExecutionStatus = [];
					$scope.selectedRightExecutionStatus = [];
					$scope.selectedExecutionStages = [];
					$scope.executionStages = [];

					var lastRunQuery = {};
					var lastDataTablesParameterModel = null;

					var init = function () {
						$scope.leftExecutionGroup = $resource("/axe/api/executiongroup/:executionGroupId")
							.get({ executionGroupId: $scope.leftExecutionGroupId });
						$scope.rightExecutionGroup = $resource("/axe/api/executiongroup/:executionGroupId")
							.get({ executionGroupId: $scope.rightExecutionGroupId });

						var leftGroupPromise = $http.get("/axe/execution/" + $scope.leftExecutionGroupId + "/executionplanstages")
							.then(function (response) {
								$scope.leftExecutionGroupPlanStages = response.data;
							});

						var rightGroupPromise = $http.get("/axe/execution/" + $scope.rightExecutionGroupId + "/executionplanstages")
							.then(function (response) {
								$scope.rightExecutionGroupPlanStages = response.data;
							});

						$scope.dataUrl = "axe/execution/datatable/group/" +
							$scope.leftExecutionGroupId +
							"/compare/" +
							$scope.rightExecutionGroupId;

						$q.all([
							leftGroupPromise,
							rightGroupPromise
						]).then(function () {
							initExecutionStages();
						});
					};

					var initExecutionStages = function () {
						var executionStages = [];
						var selectedExecutionStages = [];
						var initSelectedExecutionStageIdList = $scope.columns[2].value.split(",");

						// Combine both left and right execution group stages in case they're potentially different.
						var allExecutionGroupPlanStages = $scope.leftExecutionGroupPlanStages;
						angular.forEach($scope.rightExecutionGroupPlanStages, function (stages, executionPlanName) {
							if (!(executionPlanName in allExecutionGroupPlanStages)) {
								allExecutionGroupPlanStages[executionPlanName] = stages;
							} else {
								var existingStageNames = allExecutionGroupPlanStages[executionPlanName].map(function (stage) {
									return stage.name;
								});

								angular.forEach(stages, function (stage) {
									if (!existingStageNames.includes(stage.name)) {
										allExecutionGroupPlanStages[executionPlanName].push(stage);
									}
								});
							}
						});

						angular.forEach(allExecutionGroupPlanStages, function (stages, executionPlanName) {
							angular.forEach(stages, function (stage) {
								stage.executionPlanName = executionPlanName;
								if (initSelectedExecutionStageIdList.includes(stage.id.toString())) {
									selectedExecutionStages.push(stage);
								}
								executionStages.push(stage);
							});
						});

						$scope.selectedExecutionStages = selectedExecutionStages;
						$scope.executionStages = executionStages;
						$scope.selectedLeftExecutionStatus = $scope.columns[7].value.replace(/\"/g, "").split(",");
						$scope.selectedRightExecutionStatus = $scope.columns[10].value.replace(/\"/g, "").split(",");
					};

					$scope.filterExecutionStages = function (selectedExecutionStages, columnFilter) {
						var executionStageIdSet = {};
						angular.forEach(selectedExecutionStages, function (stage) {
							executionStageIdSet[stage.id] = true;
						});
						columnFilter.value = Object.keys(executionStageIdSet).join(",");
					};

					$scope.filterMultiSelectColumn = function (selectedValues, columnFilter) {
						var valuesSet = {};
						angular.forEach(selectedValues, function (val) {
							valuesSet[val.replace(/^"(.+(?="$))"$/, '$1')] = true; //regex removes leading or trailing quotes from each string
						});
						columnFilter.value = Object.keys(valuesSet).join(",");
						if (columnFilter.value !== "") {
							columnFilter.value = "\"" + columnFilter.value + "\"";
						}
					};

					$scope.axeDataTableAjaxRequest = function (dataTablesParameterModel) {
						lastDataTablesParameterModel = dataTablesParameterModel;
					};

					$scope.findInTestList = function () {
						var testListTestIds = [];

						angular.forEach($scope.selectedRows,
							function (row) {
								testListTestIds.push(row.testListTestId);
							});
						var url = "/axe/tests/testlists/" +
							$scope.selectedRows[0].testListId +
							"/?id=" +
							encodeURIComponent(testListTestIds.join("|"));
						$window.open(url);
					};

					$scope.copyUrlToClipboard  = function () {
						var testListTestIds = [];

						angular.forEach($scope.selectedRows,
							function (row) {
								testListTestIds.push(row.testListTestId);
							});

						var search = $location.search();
						search["testListTestId"] = encodeURIComponent(testListTestIds.join("|"));
						var url = window.location.pathname + "?" + new URLSearchParams(search).toString();

						axeApp.copyToClipboard(window.location.origin + url, document);
						var d = $("#axeDataTableApp").DataTable();
						d.buttons.info("Url Copied to Clipboard", " Copied " + testListTestIds.length + " Rows", 2000);
					};

					$scope.keydown = function (event) {
						if ($scope.selectedRows.length > 0 && !event.ctrlKey && !event.altKey && !event.metaKey) {
							if (event.key === "e") {
								$scope.editEssential();
							} else if (event.key === "f") {
								$scope.findInTestList();
							} else if (event.key === "s") {
								$scope.copyUrlToClipboard();
							}
						}
					};

					$scope.run = function (query) {
						lastRunQuery = query;
						$scope.$broadcast("axeDataTableRun", { query: query });
					};

					$scope.selected = function (rows) {
						$scope.selectedRows = rows;
						if (rows.length > 0) {
							$scope.executionId = rows[0].id;
						}
					};

					$scope.editEssential = function () {
						var items = $scope.selectedRows;
						if (null != items && items.length > 0) {
							var testListTestIds = [];
							angular.forEach(items,
								function (row) {
									testListTestIds.push(row.testListTestId);
								});
							testEditDialog.edit(testListTestIds,
								function () {
									$scope.$broadcast("axeDataTableRun", { query: lastRunQuery });
								});
						}
					};

					$scope.columns = [
						{ data: "testListTestId", name: "testListTestId", value: "", visible: false },
						{
							name: "change",
							value: "",
							visible: true,
							orderable: false,
							render: function (data, type, row, meta) {
								var change = "";
								if (null != row.right && null != row.left) {
									if (row.left.testVersionLabel == row.right.testVersionLabel &&
										row.left.softwareVersionLabel != row.right.softwareVersionLabel) {
										change = "Software: " + row.left.softwareVersionLabel + " <i class='fa fa-arrow-right'> " + row.right.softwareVersionLabel;
									} else if (row.left.testVersionLabel != row.right.testVersionLabel &&
										row.left.softwareVersionLabel == row.right.softwareVersionLabel) {
										change = "Test: " + row.left.testVersionLabel + " <i class='fa fa-arrow-right'> " + row.right.testVersionLabel;
									} else if (row.left.testVersionLabel != row.right.testVersionLabel &&
										row.left.softwareVersionLabel != row.right.softwareVersionLabel) {
										change = "Test + Software";
									}
								} else if (null != row.right && null == row.left) {
									change = "Added";
								} else if (null == right && null != row.left) {
									change = "removed";
								}
								return change;
							}
						},
						{
							data: "executionStageId",
							name: "executionStageId",
							value: "",
							visible: true, render: function (data, type, row, meta) {
								return row.executionStageName;
							},
							dataTableDownloadColumnMappingName: "executionStageName"
						},
						{ name: "testAreaPath", data: "testAreaPath", value: "", visible: true },
						{
							name: "fileName", data: "fileName", value: "", visible: true, render: function (data, type, row, meta) {
								var result = row.fileName;

								if (row.testListTestStatus !== "Active") {
									var icon = "";
									if (row.testListTestStatus === "Waived" || row.testListTestStatus === "MustRunWaived") {
										fileName = "<i class='fa fa-pause-circle text-danger'></i>";
									} else if (row.testListTestStatus === "DoNotRun") {
										fileName = "<i class='fa fa-stop-circle text-danger'></i>";
									} else if (row.testListTestStatus === "MustRun") {
										fileName = "<i class='fa fa-exclamation fa-lg text-primary'></i>";
									} else if (row.testListTestStatus === "MustRunWaived") {
										fileName = "<i class='fa fa-exclamation fa-lg text-primary'> <i class='fa fa-pause-circle text-danger'></i>";
									}
									var comment = (row.statusComment === null ? "" : ": " + row.statusComment.replace("'", "&apos;")) + " [" + row.statusAuthor + "]";
									fileName = fileName = "<span uib-tooltip='" + row.testListTestStatus + comment + "' tooltip-append-to-body='true'>" + icon + "</span>&nbsp;" + fileName;
								}

								if (row.essential) {
									result = "<i class='fa fa-star text-primary' uib-tooltip='Essential' tooltip-append-to-body='true'></i>&nbsp;" + result;
								}
								return result;
							}
						},
						{ name: "testName", data: "testName", value: "", visible: true },
						{ name: "commandLine", data: "commandLine", value: "", visible: true },
						{
							name: "leftExecutionStatus",
							value: "",
							render: function (data, type, row, meta) {
								var result = "";

								if (row.left != null) {
									var aClass = "";
									if (row.left.executionStatus === "Fail") {
										aClass = "text-danger";
									} else if (row.left.executionStatus === "Error") {
										aClass = "text-warning";
									} else if (row.left.executionStatus === "Pass") {
										aClass = "text-success";
									}
									result = "<a href='/axe/tests/testlists/" + row.testListId + "/executions/group/" + $scope.leftExecutionGroupId + "/execution/" +
										row.left.executionId +
										"' class='strong " +
										aClass +
										"'>" +
										row.left.executionStatus +
										"</a>";
								}
								return result;
							}
						},
						{
							name: "leftTestVersionLabel",
							value: "",
							visible: false,
							render: function (data, type, row, meta) {
								return row.left ? row.left.testVersionLabel : "";
							}
						},
						{
							name: "leftSoftwareVersionLabel",
							value: "",
							visible: false,
							render: function (data, type, row, meta) {
								return row.left ? row.left.softwareVersionLabel : "";
							}
						},
						{
							name: "rightExecutionStatus",
							value: "",
							render: function (data, type, row, meta) {
								var result = "";
								if (null != row.right) {
									var aClass = "";
									if (row.right.executionStatus === "Fail") {
										aClass = "text-danger";
									} else if (row.right.executionStatus === "Error") {
										aClass = "text-warning";
									} else if (row.right.executionStatus === "Pass") {
										aClass = "text-success";
									}
									result = "<a href='/axe/tests/testlists/" + row.testListId + "/executions/group/" + $scope.rightExecutionGroupId + "/execution/" +
										row.right.executionId +
										"' class='strong " +
										aClass +
										"'>" +
										row.right.executionStatus +
										"</a>";
								}
								return result;
							}
						},
						{
							name: "rightTestVersionLabel",
							value: "",
							visible: false,
							render: function (data, type, row, meta) {
								return row.right ? row.right.testVersionLabel : "";
							}
						},
						{
							name: "rightSoftwareVersionLabel",
							value: "",
							visible: false,
							render: function (data, type, row, meta) {
								return row.right ? row.right.softwareVersionLabel : "";
							}
						},
						{
							name: "exitMessage",
							value: "",
							render: function (data, type, row, meta) {
								return row.right ? row.right.exitCodeMessage : "";
							}
						},
						{
							name: "exitCode",
							value: "",
							visible: false,
							render: function (data, type, row, meta) {
								return row.right ? row.right.exitCode : "";
							}
						},
						{
							name: "seed",
							value: "",
							visible: false,
							render: function (data, type, row, meta) {
								return row.right ? (row.right.seed || "") : "";
							}
						}
					];

					init();
				}
			]
		};
	}]);

angular.module("executionGroupSummaryModule", ["axeApp", "axeDataTableApp", "ngResource", "ui.bootstrap"])
	.directive("executionGroupSummary", [function () {
		return {
			restrict: "E",
			scope: {
				executionGroupId: "=",
				latestOption: "=",
				rootUrl: "=",
				summaryType: "=",
				testListId: "="
			},
			templateUrl: "/axe/Scripts/App/ExecutionGroupSummary/executionGroupSummary.html",
			controller: ["$scope", "$resource", "$location",
				function ($scope, $resource, $location) {

					$scope.latestOptions = { "testCi": "Test CI", "softwareCi": "Software CI", "combined": "Combined" };
					$scope.latestOption = $scope.latestOption;

					var init = function () {
						$scope.expandColumns = { total: true };
						$scope.initialized = false;
						$scope.expandAll = false;
						$scope.running = false;
						if (!$scope.summaryType) {
							$scope.summaryType = "executionStageTestArea";
						} else {
							updateLegacySummaryName();
						}

						if ($scope.executionGroupId != null) {
							$scope.baseUrl = $scope.rootUrl + $scope.executionGroupId;
							$scope.testListBaseUrl = $scope.rootUrl.substring(0, $scope.rootUrl.indexOf("executions"));
							if ($scope.rootUrl.includes("software")) {
								$scope.testListBaseUrl += "tests";
							}
							$scope.testStatusFilter = "executedTestListTestStatus";

							$scope.data = $resource("/axe/execution/group/:executionGroupId/summary/:summaryType").get(
								{ executionGroupId: $scope.executionGroupId, summaryType: $scope.summaryType },
								function (response) {
									$scope.initialized = true;
									$scope.running = response.totalSummary.runningCount > 0;
									response.milestones.forEach(function (milestone) {
										$scope.expandColumns[milestone] = false;
									});
								},
								function (error) {
									$scope.initialized = true;
									alert("Error loading summary report: " + error.data.message);
								}
							);
						} else {
							//TODO: Figure out urls for linking to executions
							$scope.baseUrl = $scope.rootUrl + "/latestresults/" + $scope.latestOption + "/executions";
							$scope.testStatusFilter = "latestTestListTestStatus";

							$scope.data = $resource("/axe/tests/testlists/:testListId/latest/:latestOption/summary/:summaryType").get(
								{ testListId: $scope.testListId, latestOption: $scope.latestOption, summaryType: $scope.summaryType },
								function (response) {
									$scope.initialized = true;
									$scope.running = response.totalSummary.runningCount > 0;
									response.milestones.forEach(function (milestone) {
										$scope.expandColumns[milestone] = false;
									});
								},
								function (error) {
									$scope.initialized = true;
									alert("Error loading summary report: " + error.data.message);
								}
							);
						}
					};

					$scope.$watch("summaryType", function () {
						if ($scope.executionGroupId != null) {
							$location.path($scope.rootUrl + $scope.executionGroupId + "/summary/" + $scope.summaryType);
						} else {
							$location.path($scope.rootUrl + "/latestresults/" + $scope.latestOption + "/summary/" + $scope.summaryType);
						}
					});

					$scope.$watch("latestOption", function () {
						if ($scope.executionGroupId != null) {
							$location.path($scope.rootUrl + $scope.executionGroupId + "/summary/" + $scope.summaryType);
						} else {
							$location.path($scope.rootUrl + "/latestresults/" + $scope.latestOption + "/summary/" + $scope.summaryType).replace();
						}
					});

					$scope.$watch("expandAll", function (newValue, oldValue) {
						if (newValue !== oldValue) {
							var collapsed = !$scope.expandAll;
							recursiveCollapse($scope.data.totalSummary.children, collapsed);
						}
					});
					
					function recursiveCollapse(summaries, collapse) {
						// This seems to only expand the root level of summaries.
						if (summaries != null) {
							summaries.forEach(function (summary) {
								summary.collapsed = collapse;
								recursiveCollapse(summary.children, collapse);
								recursiveCollapse(summary.childExecutionSummaries, collapse);
							});
						}
					}
					
					function updateLegacySummaryName() {
						// Changed the summary type names in Q1 2021, allow users to keep using the old summary types for now.
						if ($scope.summaryType.toLowerCase() === "executionstage") {
							$scope.summaryType = "testAreaExecutionStage";
						} else if ($scope.summaryType.toLowerCase() === "exitcode") {
							$scope.summaryType = "executionStageExitCode";
						} else if ($scope.summaryType.toLowerCase() === "feature") {
							$scope.summaryType = "executionStageFeature";
						} else if ($scope.summaryType.toLowerCase() === "testarea") {
							$scope.summaryType = "executionStageTestArea";
						}
					}

					init();
				}
			]
		};
	}
	]).directive("executionGroupSummarySection", function () {
		return {
			restrict: "EA",
			templateUrl: "/axe/Scripts/App/ExecutionGroupSummary/executionGroupSummarySection.html",
			scope: {
				columns: "=",
				data: "=",
				depth: "=",
				baseUrl: "=",
				testListBaseUrl: "=",
				testStatusFilter: "=",
				executionGroupId: "=",
				running: "=",
				milestones: "=",
				collapsed: "="
			},
			controller: function($scope) {
				$scope.getMilestoneSummary = function(milestone) {
					return $scope.data.milestoneSummary[Object.keys($scope.data.milestoneSummary).filter(function(m) {
						return m.toLowerCase() === milestone.toLowerCase();
					})[0]];
				}
			}
		};
	}).directive("summaryRecursiveRow", ["$timeout", "$compile", function($timeout, $compile) {
	return {
		restrict: "A",
        templateUrl: "/axe/Scripts/App/ExecutionGroupSummary/summaryRecursiveRowTemplate.html",
        scope: {
            data: "=",
			depth: "=",
			columns: "=",
			groupByDepth: "=",
			baseUrl: "=",
			testListBaseUrl: "=",
			testStatusFilter: "=",
			executionGroupId: "=",
			running: "=",
			milestones: "=",
			collapsed: "=",
			parentCollapsed: "="
        },
		link: function(scope, element, attrs) {
			$timeout(function() {
				element.replaceWith($compile(element.children().html())(scope));
			});
		}
	};
}]);

angular.module("executionGroupSummaryModule")
	.directive("passPercent", [function () {
		return {
			restrict: "E",
			scope: {
				data: "=",
				hrefRun: "@",
				hrefAll: "@"
			},
			template:
				"<div style='white-space: nowrap;'>\
					<a ng-if='data.totalCount'\
						style='color: hsl({{runPassColor}}, 100%, 35%)'\
						href='{{hrefRun}}'>\
						{{(runPassPercent * 100).toFixed(1)}}%\
					</a>\
					<span ng-if='data.totalCount && data.skipCount'\
						style='color: hsl({{overallPassColor}}, 100%, 35%)'>\
						({{(overallPassPercent * 100).toFixed(1)}}%)\
					</span>\
				</div>",
			link: function (scope) {
				scope.$watch(function () { return scope.data; }, function () {
					if (scope.data && scope.data.totalCount) {
						var data = scope.data;
						scope.runPassPercent = data.totalCount === data.skipCount ? 0 : (data.passCount || 0) / (data.totalCount - (data.skipCount || 0));
						scope.overallPassPercent = (data.passCount || 0) / data.totalCount;
						//using an exponential ramp to provide better color gradation for more yellow/orange coloring <80%
						// Hue range of 0..128 fades from pure red to pure green
						// (8^pct - 1) / 7  : this keeps the curve cleanly mapped between 0..1 but gives it an exponential dip in the middle to accentuate red tones earlier
						// Percentage is multiplied by 128 to get range of 0(red) to 128(green). Expression is simpliefied so 128/7(from above line) = 18
						scope.runPassColor = (18 * (Math.pow(8, scope.runPassPercent) - 1)).toString(10);
						scope.overallPassColor = (18 * (Math.pow(8, scope.overallPassPercent) - 1)).toString(10);
					}
				});
			}
		};
	}]);


angular.module("executionGroupSummaryModule")
	.directive("executionGroupDetail", [function () {
		return {
			restrict: "E",
			scope: {
				executionGroupId: "=",
				rootUrl: "="
			}, 
			templateUrl: "/axe/Scripts/App/ExecutionGroupSummary/executionGroupDetail.html",
			controller: ("executionGroupDetailController", ["$scope", "$resource", "$location",
				function ($scope, $resource, $location) {
					$scope.expandAll = true;
					$scope.showDefaults = false;
					$scope.testVersionOptions = [
						{ type:"TestList", value:"Test List Version" },
						{ type: "PinnedOnly", value: "Pin" },
						{ type: "Head", value: "Head" },
						{ type: "SourceExecutionGroupVersion", value: "Use Same Version" },
						{ type: "Label", value: "Version Label" }
					];
					var init = function () {
						$scope.initialized = false;
						
						if ($scope.executionGroupId != null) {
							$scope.baseUrl = $scope.rootUrl + $scope.executionGroupId;
							$scope.testListBaseUrl = $scope.rootUrl.substring(0, $scope.rootUrl.indexOf("executions"));
							if ($scope.rootUrl.includes("software")) {
								$scope.testListBaseUrl += "tests";
							}
							$scope.testStatusFilter = "executedTestListTestStatus";

							$scope.data = $resource("/axe/execution/group/:executionGroupId/details").get(
								{ executionGroupId: $scope.executionGroupId },
								function (response) {
									$scope.initialized = true;
									$scope.testListSettingsUrl = "axe/tests/testlists/" + $scope.data.testListId + "/settings/executionmethods";
									$scope.sourceGroupUrl = $scope.data.sourceGroup != null ?
										"axe/tests/testlists/" + $scope.data.testListId + "/executions/group/" + $scope.data.sourceGroup.id + "/details" : null;
									$scope.optionIndex = Object.keys($scope.testVersionOptions).find(function (option) {
										return $scope.testVersionOptions[option].type == $scope.data.testVersionType;											
									})
									$scope.testVersionOption = $scope.optionIndex != null ?
																$scope.testVersionOptions[$scope.optionIndex].value : null;
								},
								function (error) {
									$scope.initialized = true;
									alert("Error loading execution group details: " + error.data.message);
								}
							);
						}

						$scope.toggleExpandAll = function () {
						
							$scope.data.executionStageAttributes.forEach(function (executionStage) {
								executionStage.expanded = !$scope.expandAll;
							});

							$scope.expandAll = !$scope.expandAll;
						};


						$scope.toggleShowDefaults = function () {
							$scope.showDefaults = !$scope.showDefaults
						};
					};

					
					init();

				}
			]
		)};
	}]);

angular.module("executionGroupSummaryModule")
	.directive("executionGroupCoverage", [function () {
		return {
			restrict: "E",
			scope: {
				executionGroupId: "=",
				rootUrl: "="
			},
			templateUrl: "/axe/Scripts/App/ExecutionGroupSummary/executionGroupCoverage.html",
			controller: ("executionGroupCoverageController", ["$scope", "$resource", "$location",
				function ($scope, $resource, $location) {

					var init = function () {
						$scope.initialized = false;

						if ($scope.executionGroupId != null) {
							$scope.baseUrl = $scope.rootUrl + $scope.executionGroupId;
							$scope.data = $resource("/axe/execution/group/:executionGroupId/coverage").get(
								{ executionGroupId: $scope.executionGroupId },
								function (response) {
									$scope.initialized = true;
								
								},
								function (error) {
									$scope.initialized = true;
									alert("Error loading execution group coverage report: " + error.data.message);
								}
							);
						}

						$scope.isEmpty = function (obj) {
							return Object.keys(obj).length == 2;
						}
					};

				

					init();

				}
			]
			)
		};
	}]);

/////////////////////////////////////////////////////////////////////////////////////////////
// MODULE:   executionDetailModule
/////////////////////////////////////////////////////////////////////////////////////////////
angular.module("executionDetailModule", ["axeApp", "ngResource", "issueDialogModule", "issueInfoModule"]).directive("executionDetail",
	[
		function() {
			return {
				restrict: "E",
				scope: {
					executionId: "="
				},
				templateUrl: "/axe/Scripts/App/ExecutionDetail/executionDetail.html",
				controller: [
					"$scope", "$resource", "$window", "issueDialog", "issueInfo",
					function ($scope, $resource, $window, issueDialog, issueInfo) {
						$scope.initialized = false;
						$scope.path = $window.location.pathname;

						$scope.data = $resource("/axe/execution/:executionId/data").get(
							{ executionId: $scope.executionId },
							function success(response) {
								$scope.data = response;
								$scope.availableOperatingSystemReplays = {
									windows: response.execution.availableSoftwareOperatingSystems.findIndex(function (os) {
										return os.toLowerCase() === 'windows';
									}) !== -1,
									linux: response.execution.availableSoftwareOperatingSystems.findIndex(function (os) {
										return os.toLowerCase() === 'linux';
									}) !== -1
								};
								$scope.initialized = true;
							},
							function error(response) {
								$scope.initialized = true;
								alert("Error loading data for id: " + $scope.executionId);
							});

						$scope.editIssue = function (data) {
							var testListTestIdData = [{
								testListTestId: data.execution.testListTestId,
								executionStageId: data.execution.executionStageId,
								executionId: data.execution.id,
								softwareVersionLabel: data.execution.software.label,
								issues: data.issues
							}];
							issueDialog.edit(testListTestIdData);
						};

						$scope.renderBugIcon = function (issues) {
							if (issues != null && issues.length > 0) {
								return issueInfo.renderBugIcon(issues, "openIssue");
							}
						};

						$scope.openIssue = function (issue) {
							issueInfo.open(
								issue,
								function () {}
							);
						};

						$scope.openExecution = function (event, executionId) {
							event.preventDefault();

							if (executionId != null && executionId != $scope.executionId) {
								$window.open("/axe/execution/" + executionId, "_blank");
							}
						};

						$scope.downloadReplay = function (event, executionId, operatingSystem) {
							event.preventDefault();

							if (executionId != null && $scope.availableOperatingSystemReplays[operatingSystem.toLowerCase()] === true) {
								$window.open("/axe/execution/" + executionId + "/ReplayScript?OS=" + operatingSystem, "_blank");
							}
						};

						$scope.getReplayTooltip = function (operatingSystem) {
							if ($scope.initialized) {
								return $scope.availableOperatingSystemReplays[operatingSystem.toLowerCase()] ? "" : 
									"Replay unavailable for " + operatingSystem + " because there is no Software Version for that OS";
							}
						};

						$scope.getDebugTooltip = function (type) {
							if ($scope.initialized) {
								if (type == 'lastpass'
									&& $scope.data.execution.lastPassDebugExecutionId == null
									&& ($scope.data.execution.mainExecutionId == $scope.executionId
										|| $scope.data.execution.debugExecutionId == null)) {
									return "Last Pass debug execution not available."
								}
							}
						};
					}
				]
			};
		}
	]);
/////////////////////////////////////////////////////////////////////////////////////////////
// MODULE:   localConnectionModule
/////////////////////////////////////////////////////////////////////////////////////////////
var localConnectionModule = angular.module("localConnectionModule", [])
	.factory("localConnection", ["$rootScope", "$window", "$http", "$q", "$interval", function ($rootScope, $window, $http, $q, $interval) {
		var self = this;
		self.connected = false;
		self.updating = false;
		self.latestAxeAppVersion = null;

		self.host = {
			axeLocalWebUrl: null,
			localServiceUrl: $window.localStorage.getItem("AxeLocalServiceUrl"),
			status: "Disconnected"
		};

		$http.get("/axe/api/axeapp/version/latest").then(function (response) {
			// This version is sourced from labels set in Artifactory which are in the format
			// 4.0.0-14-g1278956d4  where the 'g' indicates the version came from git (git describe)
			// The actual commit hash is the part after 'g'. To make comparisons easier, ignore the commit hash
			// since the 'g' is not present in the INFORMATIONAL_VERSION in VersionInfoHelper.
			self.latestAxeAppVersion = response.data.label.substr(0, response.data.label.lastIndexOf('-'));
		});

		var debounce = (function () {
			var filterInputTimer = 0;
			return function (ms, callback) {
				clearTimeout(filterInputTimer);
				filterInputTimer = setTimeout(callback, ms);
			};
		})();

		self.testConnection = function () {
			if (self.host.status === "Disconnected") {
				self.host.status = "Testing";
			}

			var deferred = $q.defer();

			if (undefined !== self.host.localServiceUrl && null !== self.host.localServiceUrl && "/" !== self.host.localServiceUrl.slice(-1)) {
				self.host.localServiceUrl += "/";
			}

			var requestUrl = self.host.localServiceUrl;
			$http.get(self.host.localServiceUrl + "axe/redirect").then(
				function (response) {
					// Multiple async responses possible. Only trust the response if the current url matches the requested url. 
					// Large delay from earlier failed requests can come in after a later change with succesful request which clobbers the correct status.
					if (requestUrl === self.host.localServiceUrl) {
						self.host.axeLocalWebUrl = response.data.hostUrl;
						if (self.latestAxeAppVersion) {
							self.host.updateAvailable = !self.latestAxeAppVersion.startsWith(response.data.version.substr(0, response.data.version.lastIndexOf('-')));
						}

						if (!self.host.updateAvailable) {
							self.updating = false;
						}

						if (!self.updating) {
							self.host.status = "Connected";
							self.connected = true;
						}

						deferred.resolve(self.host.status);
					}
				}, function (error) {
					// Multiple async responses possible. Only trust the response if the current url matches the requested url. 
					// Large delay from earlier failed requests can come in after a later change with succesful request which clobbers the correct status.
					if (requestUrl === self.host.localServiceUrl) {
						self.connected = false;
						self.host.status = "Disconnected";
						deferred.resolve(self.host.status);
					}
				});

			return deferred.promise;
		};

		$rootScope.$watch(function () { return self.host.localServiceUrl; },
			function () {
				debounce(1000, function () {
					$window.localStorage.setItem("AxeLocalServiceUrl", self.host.localServiceUrl);
				});
			});

		$interval(function () {
			self.testConnection();
		}, 10000);

		$rootScope.updateAxeApp = function () {
			if (confirm("Updating will terminate any running jobs. Update now?")) {
				self.connected = false;
				self.updating = true;
				self.host.status = "Updating";
				$http.post(self.host.localServiceUrl + "axe/update").then(
					function () {
					}, function (error) {
						alert(error);
					});
			}
		};

		self.testConnection();

		return self;
	}]);
var module = angular.module("localTestListSelectModule", ["ui.bootstrap"])
	.component("localTestListSelect", {
		templateUrl: "/axe/Scripts/App/Local/TestLists/localTestListSelect.html",
		bindings: {
			model: "=",
			localUrl: "="
		},
		controller: ["$scope", "$http", "$window", function ($scope, $http, $window) {
			var ctrl = this;

			$scope.testListData = {};

			ctrl.$onInit = function () {
				$scope.model = ctrl.model;
				$http.get(ctrl.localUrl + "testlist/names").then(
					function (response) {
						$scope.testListData = response.data;

						var lastTestListId = parseInt($window.localStorage.getItem("axeLocal.localTestListSelect.testListId"));
						if (lastTestListId in $scope.testListData) {
							ctrl.model.id = lastTestListId;
							ctrl.model.name = $scope.testListData[lastTestListId];
						}
					},
					function (error) {
						alert(error.data.exceptionMessage);
					});
			};

			$scope.onChange = function (testListName) {
				ctrl.model.name = testListName;
				ctrl.model.id = undefined;
			};

			$scope.onSelect = function ($item, $model) {
				if (!ctrl.model) {
					ctrl.model = {
						name: $model,
						id: $item.id
					};
				} else {
					ctrl.model.name = $model;
					ctrl.model.id = $item.id;
				}
				$window.localStorage.setItem("axeLocal.localTestListSelect.testListId", ctrl.model.id);
			};

			$scope.getTestLists = function (testListSearchValue) {
				var testListIds = [];
				if (testListSearchValue) {
					var searchValueNormalized = testListSearchValue.toUpperCase();
					testListIds = Object.keys($scope.testListData).filter(function (key) {
						return $scope.testListData[key].toUpperCase().includes(searchValueNormalized);
					});
				} else {
					testListIds = Object.keys($scope.testListData);
				}

				if (testListIds.length === 0) {
					ctrl.model.name = testListSearchValue;
					ctrl.model.id = undefined;
				}

				searchList = testListIds.map(function (key) {
					return { id: key, name: $scope.testListData[key] };
				});

				return searchList;
			};
		}]
	});
angular.module("issuesDataTableModule", ["axeApp", "axeDataTableApp", "ngResource", "ui.bootstrap"])
	.directive("issuesDataTable", [function () {
		return {
			restrict: "E",
			scope: {
				testListId: "=",
				rootUrl: "=",
				scrollY: "="
			},
			templateUrl: "/axe/Scripts/App/Issues/IssuesDatatable/IssuesDataTable.html",
			controller: [
				"$scope", "$rootScope", "$location", "$routeParams", "$window", "$timeout", "$http", "$uibModal",
				function ($scope, $rootScope, $location, $routeParams, $window, $timeout, $http, $uibModal) {
					$scope.selectedRows = null;
					var rootUrl = $scope.rootUrl;

					$scope.dataUrl = "/axe/tests/datatable/issues/" + ($scope.testListId ? $scope.testListId : "");

					if (rootUrl == null || rootUrl == undefined || rootUrl === "") {
						if ($scope.testListId) {
							rootUrl = "/axe/tests/testlists/" + $scope.testListId + "/issues";
						} else {
							rootUrl = "/axe/report/issues";
						}
					} else if (rootUrl[rootUrl.length - 1] !== "/") {
						rootUrl += "/";
					}

					$scope.state = {
						actionEnable: false,
						loading: false
					};

					var init = function () {
						//some pages have to resolve testListId through a $q or $resource. This code is necessary to resolve the promise.
						if (typeof $scope.testListId === "object") {
							$scope.testListId.then(function (testListId) {
								$scope.testListId = testListId;
							});
						}
					};

					$scope.columns = [
						{ data: "id", name: "id", value: "", visible: false },
						{
							data: "hsdId",
							name: "hsdId",
							value: "",
							visible: true,
							render: function (data, type, row, meta) {
								return "<a target=\"_blank\" href='" + row.hsdUrl + "'>" + (row.hsdId ? row.hsdId.toString() : "Create HSD") + "</a>";
							}
						},
						{
							data: "status",
							name: "status",
							value: "",
							visible: true,
							render: function (data, type, row, meta) {
								return "<a target=\"_blank\" href='/axe/issue/" + row.id + "/detail/overview'>" + row.status + "</a>";
							}
						},
						{ data: "title", name: "title", value: "", visible: true },
						{
							data: "testListTestCount",
							name: "testListTestCount",
							value: "",
							visible: true,
							render: function (data, type, row, meta) {
								return "<a target=\"_blank\" href='/axe/issue/" + row.id + "/detail/tests'>" + row.testListTestCount + "</a>";
							}
						},
						{ data: "ownerIdsid", name: "ownerIdsid", value: "", visible: true },
						{ data: "authorIdsid", name: "authorIdsid", value: "", visible: true },
						{
							data: "createdDate",
							name: "createdDate",
							value: "",
							visible: true,
							render: function (data, type, row, meta) {
								return axeApp.utcToLocal(row.createdDate);
							}
						}
					];

					$scope.queryFields = {
						hsdId: { type: "int", label: "HSD" },
						ownerIdsid: { type: "string", label: "Owner" },
						authorIdsid: { type: "string", label: "Author" },
						title: { type: "string", label: "Title" },
						status: { type: "value", validValues: ["Open", "Closed"], label: "Status" },
						createdDate: { type: "date", label: "Created Date" },
						testListTestCount: { type: "int", label: "Test Count" }
					};

					$scope.run = function (query) {
						lastRunQuery = query;
						$scope.$broadcast("axeDataTableRun", { query: query });
					};

					$scope.selected = function (rows) {
						$scope.selectedRows = rows;
						if ($scope.selectedRows !== null && $scope.selectedRows.length > 0) {
							$scope.state.actionEnable = true;
						} else {
							$scope.state.actionEnable = false;
						}
					};
					init();
				}
			]
		};
	}
	]);

angular.module("testListTestLatestExecutionsDataTableModule",
	["axeApp", "axeDataTableApp", "ui.bootstrap", "queueDialogModule", "testEditDialogModule", "issueDialogModule", "issueInfoModule", "latestResultsDialogModule", "testListTestHistoryDialogModule"])
	.directive("testListTestLatestExecutionsDataTable", [function () {
		return {
			restrict: "E",
			scope: {
				testListId: "=",
				latestOption: "=",
				scrollY: "="
			},
			templateUrl: "/axe/Scripts/App/TestListTestLatestExecutionsDataTable/testListTestLatestExecutionsDataTable.html",
			controller: [
				"$scope", "$http", "$location", "$window", "$uibModal", "queueDialog", "testEditDialog", "issueDialog", "latestResultsDialog", "issueInfo", "testListTestHistoryDialog",
				function ($scope,
					$http,
					$location,
					$window,
					$uibModal,
					queueDialog,
					testEditDialog,
					issueDialog,
					latestResultsDialog,
					issueInfo,
					testListTestHistoryDialog
				) {

					var lastRunQuery = {};
					var lastDataTablesParameterModel = null;

					$scope.selectedRows = null;
					$scope.selectedExecutionStages = [];
					$scope.selectedWaiveStatus = [];
					$scope.selectedFeatureStatus = [];

					$scope.latestOptions = { "testCi": "Test CI", "softwareCi": "Software CI", "combined": "Combined", };

					$scope.url = "/axe/tests/datatable/testlists/" + $scope.testListId + "/latest/" + $scope.latestOption;

					$scope.userHasTestListWaiveAccess = false;

					var statusColorStyle = {
						NotRun: "",
						Pass: "green",
						Fail: "red",
						Error: "red",
						Warn: "goldenrod"
					};

					var initExecutionStages = function (testListId) {
						$http.get("/axe/testlist/" + testListId + "/executionplanstages").then(function (response) {
							var executionStages = [];
							var selectedExecutionStages = [];
							var initSelectedExecutionStageIdList = $scope.columns[2].value.split(",");

							angular.forEach(response.data, function (stages, executionPlanName) {
								angular.forEach(stages, function (stage) {
									stage.executionPlanName = executionPlanName;
									if (initSelectedExecutionStageIdList.includes(stage.id.toString())) {
										selectedExecutionStages.push(stage);
									}
									executionStages.push(stage);
								});
							});

							$scope.selectedExecutionStages = selectedExecutionStages;
							$scope.executionStages = executionStages;

							$scope.selectedExecutionStatus = $scope.columns[10].value.replace(/\"/g, "").split(",");
							$scope.selectedFeatureStatus = $scope.columns[31].value.replace(/\"/g, "").split(",");
							$scope.selectedMilestones = $scope.columns[20].value.replace(/^"(.+(?="$))"$/, '$1').split(",");
							$scope.selectedWaiveStatus = $scope.columns[23].value.replace(/^"(.+(?="$))"$/, '$1').split(",");
						});
					};

					var initTestListAccess = function (testListId) {
						$http.get("/axe/api/access/testList/" + testListId + "/user/waive")
							.then(function (response) {
								$scope.userHasTestListWaiveAccess = response.data;
							});
					};

					var init = function () {
						//some pages have to resolve testListId through a $q or $resource. This code is necessary to resolve the promise.
						if (typeof $scope.testListId === "object") {
							$scope.testListId.then(function (testListId) {
								$scope.testListId = testListId;
								initExecutionStages($scope.testListId);
								initTestListAccess($scope.testListId);
							});
						} else if ($scope.testListId != null && $scope.testListId != 0) {
							initExecutionStages($scope.testListId);
							initTestListAccess($scope.testListId);
						}
					};

					$scope.filterExecutionStages = function (selectedExecutionStages, columnFilter) {
						var executionStageIdSet = {};
						angular.forEach(selectedExecutionStages, function (stage) {
							executionStageIdSet[stage.id] = true;
						});
						columnFilter.value = Object.keys(executionStageIdSet).join(",");
					};

					$scope.filterMultiSelectColumn = function (selectedValues, columnFilter) {
						var valuesSet = {};
						angular.forEach(selectedValues, function (val) {
							valuesSet[val.replace(/^"(.+(?="$))"$/, '$1')] = true; //regex removes leading or trailing quotes from each string
						});
						columnFilter.value = Object.keys(valuesSet).join(",");
					};

					$scope.run = function (query) {
						lastRunQuery = query;
						$scope.$broadcast("axeDataTableRun", { query: query });
					};

					$scope.axeDataTableAjaxRequest = function (dataTablesParameterModel) {
						lastDataTablesParameterModel = dataTablesParameterModel;
					};

					$scope.state = {
						queueEnable: false,
						actionEnable: false,
						loading: false
					};

					$scope.$watch("latestOption", function () {
						$location.path("/axe/tests/testlists/" + $scope.testListId + "/latestresults/" + $scope.latestOption + "/executions").replace();
					});

					$scope.columns = [
						{ data: "testListTestId", name: "id", value: "", visible: false },
						{ data: "testListPath", name: "testListPath", value: "", visible: false },
						{
							data: "executionStageId", name: "executionStageId", value: "", visible: true,
							render: function (data, type, row, meta) {
								return row.executionStageName;
							},
							dataTableDownloadColumnMappingName: "executionStageName"
						},
						{ data: "productConfig", name: "productConfig", value: "", visible: false },
						{ data: "testAreaPath", name: "testAreaPath", value: "", visible: true },
						{
							data: "relativePath",
							name: "relativePath",
							value: "",
							visible: false,
							render: function (data, type, row, meta) {
								var relativePath;
								// Orthogonal render type for copy buttons to format data differently than it's displayed in the datatable.
								if (type === "exportRunReg") {
									relativePath = (row.testAreaPath.toLowerCase().startsWith("fulsim") ? " -fid" : " -cid") + " \"" + data + "\"";
								} else {
									relativePath = data;
								}
								return relativePath;
							}
						},
						{
							data: "fileName",
							name: "fileName",
							value: "",
							visible: true,
							render: function (data, type, row, meta) {
								var fileName;
								if (type === "exportRunReg" || type === "exportAxeTestList") {
									fileName = data;
								} else {
									fileName = "<a href='/axe/tests/" +
										row.testCaseId +
										"/detail/overview?version=" +
										row.testCaseVersionId +
										"'><span>" +
										data +
										"</span></a>";

									if (row.issues.length > 0) {
										fileName = issueInfo.renderBugIcon(row.issues, "openIssue") + "&nbsp; " + fileName;
									}

									if (row.latestTestListTestStatus !== "Active") {
										var icon = "";
										if (row.latestTestListTestStatus === "Waived") {
											icon = "<i class='fa fa-pause-circle text-danger'></i>";
										} else if (row.latestTestListTestStatus === "DoNotRun") {
											icon = "<i class='fa fa-stop-circle text-danger'></i>";
										} else if (row.latestTestListTestStatus === "MustRun") {
											icon = "<i class='fa fa-exclamation fa-lg text-primary'></i>";
										} else if (row.latestTestListTestStatus === "MustRunWaived") {
											icon = "<i class='fa fa-exclamation fa-lg text-primary'></i> <i class='fa fa-pause-circle text-danger'></i>";
										}
										var comment = (row.statusComment === null ? "" : ": " + row.statusComment.replace("'", "&apos;")) + " [" + row.statusAuthor + "]";
										fileName = "<span uib-tooltip='" + row.latestTestListTestStatus + comment + "' tooltip-append-to-body='true'>" + icon + "</span>&nbsp;" + fileName;
									}

									if (row.essential) {
										fileName = "<i class='fa fa-star text-primary' uib-tooltip='Essential' tooltip-append-to-body='true'></i>&nbsp;" + fileName;
									}
								}
								return fileName;
							}
						},
						{ data: "name", name: "name", value: "", visible: true },
						{ data: "seed", name: "seed", value: "", visible: false },
						{ data: "commandLine", name: "commandLine", value: "", visible: true },
						{
							data: "executionStatus",
							name: "executionStatus",
							value: "",
							visible: true,
							render: function (data, type, row, meta) {
								var status = "";
								if (row.executionId) {
									status = "<a href='/axe/execution/" +
										(row.executionId) +
										"'><b style='color:" +
										statusColorStyle[row.executionStatus] +
										";'>" +
										row.executionStatus +
										"</b></a> ";
								} else if (row.executionStatus) {
									status = "<b style='color:" +
										statusColorStyle[row.executionStatus] +
										";' uib-tooltip='Execution is archived, unable to link execution details' tooltip-popup-delay='250' tooltip-append-to-body='true'>" +
										row.executionStatus +
										"*<i></b>";
								} else {
									status = "<b style='color:" +
										statusColorStyle[row.executionStatus] +
										";'>NotRun</b>";
								}
								return status;
							}
						},
						{ data: "exitCode", name: "exitCode", value: "", visible: false },
						{ data: "exitCodeMessage", name: "exitCodeMessage", value: "", visible: true },
						{ data: "failureSignatureMessage", name: "failureSignatureMessage", value: "", visible: false },
						{
							data: "softwareVersionLabel",
							name: "softwareVersionLabel",
							value: "",
							visible: false,
							render: function (data, type, row, meta) {
								var version = row.softwareVersionLabel ? row.softwareVersionLabel.toString() : null;
								if (version && row.softwareVersionOverridden) {
									version = version + " <i class='fa fa-info-circle text-primary' uib-tooltip='User official run not using Test List default software version' tooltip-placement='top' tooltip-popup-delay='250' tooltip-append-to-body='true'></i>";
								}
								return version;
							}
						},
						{
							data: "platformVersionLabel",
							name: "platformVersionLabel",
							value: "",
							visible: false,
							render: function (data, type, row, meta) {
								var version = row.platformVersionLabel ? row.platformVersionLabel.toString() : null;
								if (version && row.platformVersionOverridden) {
									version = version + " <i class='fa fa-info-circle text-primary' uib-tooltip='User official run not using Test List default platform version' tooltip-placement='top' tooltip-popup-delay='250' tooltip-append-to-body='true'></i>";
								}
								return version;
							}
						},
						{ data: "testVersionControlNumber", name: "testVersionControlNumber", value: "", visible: false },
						{
							data: "executionDateTime",
							name: "executionDateTime",
							value: "",
							visible: false,
							render: function (data, type, row, meta) {
								return axeApp.utcToLocal(row.executionDateTime) || "";
							}
						},
						{ data: "runTime", name: "runTime", value: "", visible: false },
						{
							data: "executionGroupName",
							name: "executionGroupName",
							value: "",
							visible: false,
							render: function (data, type, row, meta) {
								var link = "";
								if (row.executionGroupId) {
									link = "<a href='/axe/tests/testlists/" + row.testListId + "/executions/group/" + row.executionGroupId + "'><span>" + row.executionGroupName + "</span></a>";
								}
								return link;
							}
						},
						{ data: "milestone", name: "milestone", value: "", visible: false },
						{ data: "executionTags", name: "executionTags", value: "", visible: false, orderable: false },
						{ data: "essential", name: "essential", value: "", visible: false },
						{ data: "latestTestListTestStatus", name: "latestTestListTestStatus", value: "", visible: false },
						{ data: "statusAuthor", name: "statusAuthor", value: "", visible: false },
						{ data: "statusComment", name: "statusComment", value: "", visible: false },
						{ data: "waivedAgeDays", name: "waivedAgeDays", value: "", visible: false },
						{
							data: "issues",
							name: "issues",
							value: "",
							visible: false,
							orderable: false,
							render: function (data, type, row, meta) {
								if (type === "exportSelected") {
									return row.issuesDetails;
								}

								return issueInfo.renderIssueButtons(row.issues, "openIssue");
							},
							createdCell: function (td, cellData, rowData, rowIndex, colIndex) {
								$(td).css('padding', '2px');
							},
							dataTableDownloadColumnMappingName: "issuesDetails"
						},
						{ data: "testOwner", name: "testOwner", value: "", visible: false },
						{ data: "products", name: "products", value: "", visible: false, orderable: false },
						{ data: "features", name: "features", value: "", visible: false, orderable: false },
						{ data: "featureStatus", name: "featureStatus", value: "", visible: false },
						{ data: "targets", name: "targets", value: "", visible: false, orderable: false },
						{ data: "tags", name: "tags", value: "", visible: false, orderable: false }
					];

					$scope.queryFields = {
						commandLine: { type: "string", label: "Command Line" },
						essential: { type: "bool", label: "Essential" },
						executionDateTime: { type: "string", label: "Execution Date" },
						executionGroup: { type: "string", label: "Execution Group" },
						executionStageName: { type: "string", label: "Execution Stage" },
						exitCode: { type: "int", label: "Exit Code" },
						exitCodeMessage: { type: "string", label: "Exit Message" },
						failureSignatureMessage: { type: "string", label: "Failure Signature" },
						features: { type: "string", label: "Features" },
						featureStatus: { type: "value", validValues: ["New", "Legacy"], label: "Feature Status" },
						file: { type: "string", label: "File" },
						hsdId: { type: "int", label: "HSD Id" },
						issueOwner: { type: "string", label: "Issue Owner" },
						issueStatus: { type: "value", label: "Issue Status", validValues: ["Open", "Closed"] },
						issueTitle: { type: "string", label: "Issue Title" },
						milestone: { type: "value", label: "Milestone", validValues: ["0.0", "0.15", "0.25", "0.5", "0.85", "1.0", "N/A", "Unassigned"] },
						name: { type: "string", label: "Name" },
						platformVersionLabel: { type: "string", label: "Platform Version" },
						productConfig: { type: "string", label: "Product Config" },
						executionTags: { type: "string", label: "Product Tag" },
						products: { type: "string", label: "Products" },
						relativePath: { type: "string", label: "Relative Path" },
						executionStatus: { type: "value", validValues: [ "Pass", "Fail", "Error", "Warn", "NotRun" ], label: "Result" },
						runTime: { type: "int", label: "Run Time" },
						seedCount: { type: "int", label: "Seed Count" },
						softwareVersionLabel: { type: "string", label: "Software Version" },
						latestTestListTestStatus: { type: "value", validValues: ["Active", "DoNotRun", "MustRun", "MustRunWaived", "Waived"], label: "Status" },
						statusAuthor: { type: "string", label: "Status Author" },
						statusComment: { type: "string", label: "Status Comment" },
						targets: { type: "string", label: "Targets" },
						testAreaPath: { type: "string", label: "Test Area" },
						testOwner: { type: "string", label: "Test Owner" },
						testListPath: { type: "string", label: "TestList" },
						testVersionControlNumber: { type: "int", label: "Test Version" },
						waivedAgeDays: { type: "int", label: "Waived Days" },
						tags: { type: "string", label: "Yaml Tags" }
					};

					//https://datatables.net/reference/button/copy
					$scope.axeDataTableButtons = [
						{ //Runreg TestList Export
							extend: "copy",
							title: null,
							exportOptions: {
								modifier: { selected: true },
								//IMPORTANT: index to columns [FileName, TestName, RelativePath, TestVersion]
								columns: ["fileName:name", "name:name", "relativePath:name", "testVersionControlNumber:name"],
								orthogonal: "exportRunReg",
								format: {
									header: function () {
										return "";
									},
									// Required output format:
									//<file w/o extension>#<name> -cid <relativePath> -repo_ver <testVersion>
									body: function (data, row, column) {
										// Column ids match the columns array above.
										if (column === 0) { //FileName
											return data.substr(0, data.lastIndexOf(".")) || data;
										} else if (column === 1) { //TestName
											return (null != data && data !== "") ? "#" + data : "";
										} else if (column === 2) { //RelativePath
											// RelativePath is formatted by the column render function
											return data;
										} else if (column === 3) { //TestVersion
											return (null != data && data !== "") ? " -repo_ver " + data : "";
										} else {
											return data;
										}
									}
								}
							},
							titleAttr: "Export RunReg TestList",
							text: "<i class='fa fa-lg fa-list'></i>",
							header: false,
							footer: false,
							fieldSeparator: ""
						},
						{ //Axe TestList Export 
							extend: "copy",
							title: null,
							exportOptions: {
								modifier: { selected: true },
								//IMPORTANT: index to columns [RelativePath, FileName, TestName, Seed, TestVersion]
								columns: ["relativePath:name", "fileName:name", "name:name", "seed:name", "testVersionControlNumber:name"],
								orthogonal: "exportAxeTestList",
								format: {
									header: function () {
										return "";
									},
									// Required output format:
									// <relativePath>/<fileName>#<testName>|<seed>@<testVersion>
									body: function (data, row, column) {
										// Column ids match the columns array above.
										if (column === 0) { //RelativePath
											return data + "/";
										} else if (column === 1) { //FileName
											return data;
										} else if (column === 2) { //TestName
											return (null != data && data !== "") ? "#" + data : "";
										} else if (column === 3) { //Seed
											return (null != data && data !== "") ? "|" + data : "";
										} else if (column === 4) { //TestVersion
											return (null != data && data !== "") ? "@" + data : "";
										} else {
											return data;
										}
									}
								}
							},
							customize: function (input) {
								return "\"" + input.replace(/\r\n/g, "\",\r\n\"") + "\"";
							},
							titleAttr: "Export AxeApp TestList",
							text: "<img src='/axe/Content/Images/AxeLogoA.png' height='18' width='18'></i>",
							header: false,
							footer: false,
							fieldSeparator: ""
						},
						{
							extend: "collection",
							autoClose: true,
							background: true,
							fade: 0,
							titleAttr: "Download TestList",
							text: "<i class='fa fa-lg fa-download'></i>",
							buttons: [
								{
									text: "Send to Local",
									action: function (e, dt, node, config) {
										$scope.state.loading = true;
										queueDialog.open($scope.testListId, null, null, $scope.latestOption, $scope.selectedRows, true, queueActions.LOCAL, lastDataTablesParameterModel);
										$('div.dt-button-background').click();
									}
								},
								{
									text: "Json File",
									action: function (e, dt, node, config) {
										$scope.state.loading = true;
										queueDialog.open($scope.testListId, null, null, $scope.latestOption, $scope.selectedRows, true, queueActions.DOWNLOAD, lastDataTablesParameterModel);
										$('div.dt-button-background').click();
									}
								}
							]
						}
					];

					var getSelectedTestCaseIds = function () {
						var testCaseIds = [];
						angular.forEach($scope.selectedRows, function (row) { testCaseIds.push(row.testCaseId); });
						return testCaseIds;
					};

					$scope.queue = function (selectAll) {
						queueDialog.open($scope.testListId, null, null, $scope.latestOption, $scope.selectedRows, selectAll, queueActions.QUEUE, lastDataTablesParameterModel);
					};

					$scope.editEssential = function () {
						var items = $scope.selectedRows;
						if (null != items && items.length > 0) {
							var testListTestIds = [];
							angular.forEach(items,
								function (row) {
									testListTestIds.push(row.testListTestId);
								});
							testEditDialog.edit(testListTestIds,
								function () {
									$scope.$broadcast("axeDataTableRun", { query: lastRunQuery });
								});
						}
					};

					$scope.editMilestone = function () {
						var items = $scope.selectedRows;
						$scope.product = items[0].product;
						if (null != items && items.length > 0) {
							$uibModal.open({
								animation: false,
								templateUrl: "/axe/Scripts/App/TestCases/Milestones/editDialog.html",
								controller: milestonesEditDialogController,
								backdrop: "static",
								resolve: {
									dataTablesParameterModel: null,
									product: function () { return $scope.product; },
									testAreaId: function () { return null; },
									testCaseIds: getSelectedTestCaseIds
								}
							}).result.then(function (selectedItem) {
								$scope.$broadcast("axeDataTableRun", { query: lastRunQuery });
							}, function () {
								//dismiss
							});
						}
					};

					$scope.editExecutionTags = function () {
						var items = $scope.selectedRows;
						if (items && items.length > 0) {
							$uibModal.open({
								animation: false,
								templateUrl: "/axe/Scripts/App/TestCases/ExecutionTags/editDialog.html",
								controller: executionTagEditDialogController,
								backdrop: "static",
								size: "md",
								resolve: {
									product: function () { return items[0].product; },
									testAreaId: function () { return null; },
									testCaseIds: getSelectedTestCaseIds,
									dataTablesParameterModel: lastDataTablesParameterModel
								}
							}).result.then(function (selectedItem) {
								$scope.$broadcast("axeDataTableRun", { query: lastRunQuery });
							}, function () {
								//dismiss
							});
						}
					};

					$scope.editIssue = function () {
						var items = $scope.selectedRows;
						if (null != items && items.length > 0) {
							var testListTestIdData = [];
							items.each(function (row) {
								testListTestIdData.push({
									testListTestId: row.testListTestId,
									executionStageId: row.executionStageId,
									executionId: row.executionId,
									softwareVersionLabel: row.softwareVersionLabel,
									issues: row.issues
								});
							});

							issueDialog.edit(
								testListTestIdData,
								function () {
									$scope.$broadcast("axeDataTableRun", { query: lastRunQuery });
								});
						}
					};

					$scope.findInTestList = function () {
						var testListTestIds = [];

						angular.forEach($scope.selectedRows,
							function (row) {
								testListTestIds.push(row.testListTestId);
							});
						var url = "/axe/tests/testlists/" +
							$scope.selectedRows[0].testListId +
							"/?id=" +
							encodeURIComponent(testListTestIds.join("|"));
						$window.open(url);
					};

					$scope.copyUrlToClipboard  = function () {
						var testListTestIds = [];

						angular.forEach($scope.selectedRows,
							function (row) {
								testListTestIds.push(row.testListTestId);
							});

						var search = $location.search();
						search["id"] = encodeURIComponent(testListTestIds.join("|"));
						var url = window.location.pathname + "?" + new URLSearchParams(search).toString();
						
						axeApp.copyToClipboard(window.location.origin + url, document);
						var d = $("#axeDataTableApp").DataTable();
						d.buttons.info("Url Copied to Clipboard", " Copied " + testListTestIds.length + " Rows", 2000);
					};

					$scope.clearLatestResults = function () {
						var items = $scope.selectedRows;
						if (null != items && items.length > 0) {
							var testListTestIds = {};
							angular.forEach(items,
								function (row) {
									testListTestIds[row.testListTestId] = null;
								});
							latestResultsDialog.edit(Object.keys(testListTestIds),
								function () {
									$scope.$broadcast("axeDataTableRun", { query: lastRunQuery });
								});
						}
					};

					$scope.selected = function (rows) {
						$scope.selectedRows = rows;
						$scope.state.actionEnable = ($scope.selectedRows != null && $scope.selectedRows.length > 0);
						$scope.state.queueEnable = $scope.state.actionEnable;
					};

					$scope.openTestHistory = function (event) {
						event.preventDefault();
						if ($scope.selectedRows.length < 5 || confirm($scope.selectedRows.length + " rows selected. Are you sure you want to open test history for all of them?")) {
							angular.forEach($scope.selectedRows,
								function (row) {
									$window.open("/axe/tests/" + row.testCaseId + "/detail/executions?testListPath=\"" + encodeURIComponent(row.testListPath) + "\"&executionStageName=\"" + encodeURIComponent(row.executionStageName) + "\"&order=createdDateTime&dir=desc", "_blank");
								});
						}
					};

					$scope.openTestListTestHistory = function () {
						var items = $scope.selectedRows;
						if (null != items && items.length > 0) {
							testListTestHistoryDialog.open(items[0].testListTestId);
						}
					};

					// Called by issue buttons
					$scope.openIssue = function (issue) {
						issueInfo.open(
							issue,
							function () {
								$scope.$broadcast("axeDataTableRun", { query: lastRunQuery });
							}
						);
					};

					$scope.keydown = function (event) {
						if ($scope.selectedRows.length > 0 && !event.ctrlKey && !event.altKey && !event.metaKey) {
							if (event.key === "q") {
								$scope.queue(false);
							} else if (event.key === "l" && $scope.selectedRows[0].executionId) {
								$("#openLogMenuButton").click();
							} else if (event.key === "h") {
								$scope.openTestHistory(event);
							} else if (event.key === "m") {
								$scope.editMilestone();
							} else if (event.key === "t") {
								$scope.editExecutionTags();
							} else if (event.key === "e") {
								$scope.editEssential();
							} else if (event.key === "i") {
								$scope.editIssue();
							} else if (event.key === "f") {
								$scope.findInTestList();
							} else if (event.key === "s") {
								$scope.copyUrlToClipboard();
							} else if (event.key === "j") {
								$scope.openTestListTestHistory();
							}
						}
					};

					init();
				}
			]
		};
	}
	]);

angular.module("testListTestsDataTableModule",
	["axeApp", "axeDataTableApp", "ui.bootstrap", "queueDialogModule", "testEditDialogModule", "issueDialogModule", "latestResultsDialogModule", "issueInfoModule", "testListTestHistoryDialogModule"])
	.directive("testListTestsDataTable", [function () {
		return {
			restrict: "E",
			scope: {
				testListId: "=",
				url: "=",
				scrollY: "="
			},
			templateUrl: "/axe/Scripts/App/TestListTestsDatatable/testListTestsDataTable.html",
			controller: [
				"$scope", "$http", "$window", "$uibModal", "queueDialog", "testEditDialog", "issueDialog", "latestResultsDialog", "issueInfo", "testListTestHistoryDialog",
				function ($scope,
					$http,
					$window,
					$uibModal, 
					queueDialog,
					testEditDialog,
					issueDialog,
					latestResultsDialog,
					issueInfo,
					testListTestHistoryDialog) {

					var lastRunQuery = {};
					var lastDataTablesParameterModel = null;

					$scope.selectedRows = null;
					$scope.selectedExecutionStages = [];
					$scope.selectedWaiveStatus = [];
					$scope.selectedFeatureStatus = [];

					$scope.userHasTestListWaiveAccess = false;

					var initExecutionStages = function (testListId) {
						$http.get("/axe/testlist/" + testListId + "/executionplanstages").then(function (response) {
							var executionStages = [];
							var selectedExecutionStages = [];
							var initSelectedExecutionStageIdList = $scope.columns[2].value.split(",");

							angular.forEach(response.data, function (stages, executionPlanName) {
								angular.forEach(stages, function (stage) {
									if (stage.previousExecutionStageId == null) {
										stage.executionPlanName = executionPlanName;
										if (initSelectedExecutionStageIdList.includes(stage.id.toString())) {
											selectedExecutionStages.push(stage);
										}
										executionStages.push(stage);
									}
								});
							});

							$scope.selectedExecutionStages = selectedExecutionStages;
							$scope.executionStages = executionStages;
							$scope.selectedFeatureStatus = $scope.columns[22].value.replace(/\"/g, "").split(",");
							$scope.selectedMilestones = $scope.columns[11].value.replace(/^"(.+(?="$))"$/, '$1').split(",");
							$scope.selectedWaiveStatus = $scope.columns[14].value.replace(/^"(.+(?="$))"$/, '$1').split(",");
						});
					};

					var initTestListAccess = function (testListId) {
						$http.get("/axe/api/access/testList/" + testListId + "/user/waive")
							.then(function (response) {
								$scope.userHasTestListWaiveAccess = response.data;
							});
					};

					var init = function () {
						//some pages have to resolve testListId through a $q or $resource. This code is necessary to resolve the promise.
						if (typeof $scope.testListId === "object") {
							$scope.testListId.then(function (testListId) {
								$scope.testListId = testListId;
								initExecutionStages($scope.testListId);
								initTestListAccess($scope.testListId);
							});
						} else if ($scope.testListId != null && $scope.testListId != 0) {
							initExecutionStages($scope.testListId);
							initTestListAccess($scope.testListId);
						}
					};

					$scope.filterExecutionStages = function (selectedExecutionStages, columnFilter) {
						var executionStageIdSet = {};
						angular.forEach(selectedExecutionStages, function (stage) {
							executionStageIdSet[stage.id] = true;
						});
						columnFilter.value = Object.keys(executionStageIdSet).join(",");
					};

					$scope.filterMultiSelectColumn = function (selectedValues, columnFilter) {
						var valuesSet = {};
						angular.forEach(selectedValues, function (val) {
							valuesSet[val.replace(/^"(.+(?="$))"$/, '$1')] = true; //regex removes leading or trailing quotes from each string
						});
						columnFilter.value = Object.keys(valuesSet).join(",");
						if (columnFilter.value !== "") {
							columnFilter.value = "\"" + columnFilter.value + "\"";
						}
					};

					$scope.run = function (query) {
						lastRunQuery = query;
						$scope.$broadcast("axeDataTableRun", { query: query });
					};

					$scope.axeDataTableAjaxRequest = function (dataTablesParameterModel) {
						lastDataTablesParameterModel = dataTablesParameterModel;
					};

					$scope.state = {
						queueEnable: false,
						actionEnable: false,
						loading: false
					};

					$scope.columns = [
						{ data: "id", name: "id", value: "", visible: false },
						{ data: "testListPath", name: "testListPath", value: "", visible: false },
						{
							data: "executionStageId", name: "executionStageId", value: "", visible: true,
							render: function (data, type, row, meta) {
								return row.executionStageName;
							},
							dataTableDownloadColumnMappingName: "executionStageName"
						},
						{ data: "productConfig", name: "productConfig", value: "", visible: false },
						{ data: "testAreaPath", name: "testAreaPath", value: "", visible: true },
						{
							data: "relativePath",
							name: "relativePath",
							value: "",
							visible: false,
							render: function (data, type, row, meta) {
								var relativePath;
								// Orthogonal render type for copy buttons to format data differently than it's displayed in the datatable.
								if (type === "exportRunReg") {
									relativePath = (row.testAreaPath.toLowerCase().startsWith("fulsim") ? " -fid" : " -cid") + " \"" + data + "\"";
								} else {
									relativePath = data;
								}
								return relativePath;
							}
						},
						{
							data: "file",
							name: "file",
							value: "",
							visible: true,
							render: function (data, type, row, meta) {
								var fileName;
								if (type === "exportRunReg" || type === "exportAxeTestList") {
									fileName = data;
								} else {
									fileName = "<a href='/axe/tests/" +
										row.testCaseId +
										"/detail/overview?version=" +
										row.testCaseVersionId +
										"'><span>" +
										row.file +
										"</span></a>";

									if (row.issues.length > 0) {
										fileName = issueInfo.renderBugIcon(row.issues, "openIssue") + "&nbsp; " + fileName;
									}

									if (row.latestTestListTestStatus !== "Active") {
										var icon = "";
										if (row.latestTestListTestStatus === "Waived") {
											icon = "<i class='fa fa-pause-circle text-danger'></i>";
										} else if (row.latestTestListTestStatus === "DoNotRun") {
											icon = "<i class='fa fa-stop-circle text-danger'></i>";
										} else if (row.latestTestListTestStatus === "MustRun") {
											icon = "<i class='fa fa-exclamation fa-lg text-primary'></i>";
										} else if (row.latestTestListTestStatus === "MustRunWaived") {
											icon = "<i class='fa fa-exclamation fa-lg text-primary'></i> <i class='fa fa-pause-circle text-danger'></i>";
										}
										var comment = (row.statusComment === null ? "" : ": " + row.statusComment.replace("'", "&apos;")) + " [" + row.statusAuthor + "]";
										fileName = "<span uib-tooltip='" + row.latestTestListTestStatus + comment + "' tooltip-append-to-body='true'>" + icon + "</span>&nbsp;" + fileName;
									}

									if (row.essential) {
										fileName = "<i class='fa fa-star text-primary' uib-tooltip='Essential' tooltip-append-to-body='true'></i>&nbsp;" + fileName;
									}
								}
								return fileName;
							}
						},
						{ data: "name", name: "name", value: "", visible: true },
						{ data: "seed", name: "seed", value: "", visible: true },
						{ data: "commandLine", name: "commandLine", value: "", visible: true },
						{ data: "versionControlNumber", name: "versionControlNumber", value: "", visible: false },
						{ data: "milestone", name: "milestone", value: "", visible: false },
						{ data: "executionTags", name: "executionTags", value: "", visible: false, orderable: false },
						{ data: "essential", name: "essential", value: "", visible: false },
						{ data: "latestTestListTestStatus", name: "latestTestListTestStatus", value: "", visible: false },
						{ data: "statusAuthor", name: "statusAuthor", value: "", visible: false },
						{ data: "statusComment", name: "statusComment", value: "", visible: false },
						{ data: "waivedAgeDays", name: "waivedAgeDays", value: "", visible: false },
						{
							data: "issues",
							name: "issues",
							value: "",
							visible: false,
							orderable: false,
							render: function (data, type, row, meta) {
								if (type === "exportSelected") {
									return row.issuesDetails;
								}

								return issueInfo.renderIssueButtons(row.issues, "openIssue");
							},
							createdCell: function (td, cellData, rowData, rowIndex, colIndex) {
								$(td).css('padding', '2px');
							},
							dataTableDownloadColumnMappingName: "issuesDetails"
						},
						{ data: "testOwner", name: "testOwner", value: "", visible: false },
						{ data: "agent", name: "agent", value: "", visible: false },
						{ data: "features", name: "features", value: "", visible: false, orderable: false },
						{ data: "featureStatus", name: "featureStatus", value: "", visible: false },
						{ data: "products", name: "products", value: "", visible: false, orderable: false },
						{ data: "targets", name: "targets", value: "", visible: false, orderable: false },
						{ data: "tags", name: "tags", value: "", visible: false, orderable: false },
					];

					$scope.queryFields = {
						agent: { type: "string", label: "Agent" },
						commandLine: { type: "string", label: "Command Line" },
						description: { type: "string", label: "Description" },
						essential: { type: "bool", label: "Essential" },
						executionStageName: { type: "string", label: "Execution Stage" },
						executionEnvironmentSiteName: { type: "string", label: "Execution Environment Site" },
						features: { type: "string", label: "Features" },
						featureStatus: { type: "value", validValues: ["New", "Legacy"], label: "Feature Status" },
						file: { type: "string", label: "File" },
						fileGuid: { type: "string", label: "File Guid" },
						hsdId: { type: "int", label: "HSD Id" },
						issueOwner: { type: "string", label: "Issue Owner" },
						issueStatus: { type: "value", label: "Issue Status", validValues: ["Open", "Closed"] },
						issueTitle: { type: "string", label: "Issue Title" },
						milestone: { type: "value", label: "Milestone", validValues: ["0.0", "0.15", "0.25", "0.5", "0.85", "1.0", "N/A", "Unassigned"] },
						name: { type: "string", label: "Name" },
						productConfig: { type: "string", label: "Product Config" },
						executionTags: { type: "string", label: "Product Tag" },
						products: { type: "string", label: "Products" },
						relativePath: { type: "string", label: "Relative Path" },
						seed: { type: "int", label: "Seed" },
						latestTestListTestStatus: { type: "value", validValues: ["Active", "DoNotRun", "MustRun", "MustRunWaived", "Waived"], label: "Status" },
						statusAuthor: { type: "string", label: "Status Author" },
						statusComment: { type: "string", label: "Status Comment" },
						targets: { type: "string", label: "Targets" },
						testAreaPath: { type: "string", label: "Test Area" },
						testGuid: { type: "string", label: "Test Guid" },
						testListPath: { type: "string", label: "TestList" },
						testOwner: { type: "string", label: "Test Owner" },
						versionControlNumber: { type: "int", label: "Version" },
						waivedAgeDays: { type: "int", label: "Waived Days" },
						tags: {type: "string", label: "Yaml Tags"}
					};

					//https://datatables.net/reference/button/copy
					$scope.axeDataTableButtons = [
						{ //Runreg TestList Export
							extend: "copy",
							title: null,
							exportOptions: {
								modifier: { selected: true },
								//IMPORTANT: index to columns [FileName, TestName, RelativePath, TestVersion]
								columns: ["file:name", "name:name", "relativePath:name", "versionControlNumber:name"],
								orthogonal: "exportRunReg",
								format: {
									header: function () {
										return "";
									},
									// Required output format:
									//<file w/o extension>#<name> -cid <relativePath> -repo_ver <testVersion>
									body: function (data, row, column) {
										// Column ids match the columns array above.
										if (column === 0) { //FileName
											return data.substr(0, data.lastIndexOf(".")) || data;
										} else if (column === 1) { //TestName
											return (null != data && data !== "") ? "#" + data : "";
										} else if (column === 2) { //RelativePath
											// RelativePath is formatted by the column render function
											return data;
										} else if (column === 3) { //TestVersion
											return (null != data && data !== "") ? " -repo_ver " + data : "";
										} else {
											return data;
										}
									}
								}
							},
							titleAttr: "Export RunReg TestList",
							text: "<i class='fa fa-lg fa-list'></i>",
							header: false,
							footer: false,
							fieldSeparator: ""
						},
						{ //Axe TestList Export 
							extend: "copy",
							title: null,
							exportOptions: {
								modifier: { selected: true },
								//IMPORTANT: index to columns [RelativePath, FileName, TestName, Seed, TestVersion]
								columns: ["relativePath:name", "file:name", "name:name", "seed:name", "versionControlNumber:name"],
								orthogonal: "exportAxeTestList",
								format: {
									header: function () {
										return "";
									},
									// Required output format:
									// <relativePath>/<fileName>#<testName>|<seed>@<testVersion>
									body: function (data, row, column) {
										// Column ids match the columns array above.
										if (column === 0) { //RelativePath
											return data + "/";
										} else if (column === 1) { //FileName
											return data;
										} else if (column === 2) { //TestName
											return (null != data && data !== "") ? "#" + data : "";
										} else if (column === 3) { //Seed
											return (null != data && data !== "") ? "|" + data : "";
										} else if (column === 4) { //TestVersion
											return (null != data && data !== "") ? "@" + data : "";
										} else {
											return data;
										}

									}
								}
							},
							customize: function (input) {
								return "\"" + input.replace(/\r\n/g, "\",\r\n\"") + "\"";
							},
							titleAttr: "Export AxeApp TestList",
							text: "<img src='/axe/Content/Images/AxeLogoA.png' height='18' width='18'></i>",
							header: false,
							footer: false,
							fieldSeparator: ""
						},
						{
							extend: "collection",
							autoClose: true,
							background: true,
							fade: 0,
							titleAttr: "Download TestList",
							text: "<i class='fa fa-lg fa-download'></i>",
							buttons: [
								{
									text: "Send to Local",
									action: function (e, dt, node, config) {
										$scope.state.loading = true;
										queueDialog.open($scope.testListId, null, null, null, $scope.selectedRows, true, queueActions.LOCAL, lastDataTablesParameterModel);
										$('div.dt-button-background').click();
									}
								},
								{
									text: "Json File",
									action: function (e, dt, node, config) {
										$scope.state.loading = true;
										queueDialog.open($scope.testListId, null, null, null, $scope.selectedRows, true, queueActions.DOWNLOAD, lastDataTablesParameterModel);
										$('div.dt-button-background').click();
									}
								}
							]
						}
					];

					$scope.queue = function (selectAll) {
						queueDialog.open($scope.testListId, null, null, null, $scope.selectedRows, selectAll, queueActions.QUEUE, lastDataTablesParameterModel);
					};

					$scope.editMilestone = function (x) {
						var items = $scope.selectedRows;
						if (null != items && items.length > 0) {
							$uibModal.open({
								animation: false,
								templateUrl: "/axe/Scripts/App/TestCases/Milestones/editDialog.html",
								controller: milestonesEditDialogController,
								backdrop: "static",
								resolve: {
									dataTablesParameterModel: null,
									product: function () { return items[0].product; },
									testAreaId: function () { return null; },
									testCaseIds: function () {
										var testCaseIds = [];
										angular.forEach(items, function (row) {
											testCaseIds.push(row.testCaseId);
										});
										return testCaseIds;
									}
								}
							}).result.then(function (selectedItem) {
								$scope.$broadcast("axeDataTableRun", { query: lastRunQuery });
							}, function () {
								//dismiss
							});
						}
					};

					$scope.editExecutionTags = function () {
						var items = $scope.selectedRows;
						if (items && items.length > 0) {
							$uibModal.open({
								animation: false,
								templateUrl: "/axe/Scripts/App/TestCases/ExecutionTags/editDialog.html",
								controller: executionTagEditDialogController,
								backdrop: "static",
								size: "md",
								resolve: {
									product: function () { return items[0].product; },
									testAreaId: function () { return null; },
									testCaseIds: getSelectedTestCaseIds,
									dataTablesParameterModel: lastDataTablesParameterModel
								}
							}).result.then(function (selectedItem) {
								$scope.$broadcast("axeDataTableRun", { query: lastRunQuery });
							}, function () {
								//dismiss
							});
						}
					};

					var getSelectedTestCaseIds = function () {
						var testCaseIds = [];
						angular.forEach($scope.selectedRows, function (row) { testCaseIds.push(row.testCaseId); });
						return testCaseIds;
					};

					$scope.editEssential = function () {
						var items = $scope.selectedRows;
						if (null != items && items.length > 0) {
							var testListTestIds = [];
							angular.forEach(items,
								function (row) {
									testListTestIds.push(row.id);
								});
							testEditDialog.edit(testListTestIds,
								function () {
									$scope.$broadcast("axeDataTableRun", { query: lastRunQuery });
								});
						}
					};

					$scope.editIssue = function () {
						var items = $scope.selectedRows;
						if (null != items && items.length > 0) {
							var testListTestIdData = [];
							items.each(function (row) {
								testListTestIdData.push({
									testListTestId: row.id,
									executionStageId: row.executionStageId,
									issues: row.issues
								});
							});

							issueDialog.edit(
								testListTestIdData,
								function () {
									$scope.$broadcast("axeDataTableRun", { query: lastRunQuery });
								});
						}
					};

					$scope.openTestHistory = function (event) {
						event.preventDefault();
						if ($scope.selectedRows.length < 5 || confirm($scope.selectedRows.length + " rows selected. Are you sure you want to open test history for all of them?")) {
							angular.forEach($scope.selectedRows,
								function (row) {
									$window.open("/axe/tests/" + row.testCaseId + "/detail/executions?testListPath=\"" + encodeURIComponent(row.testListPath) + "\"&executionStageName=\"" + encodeURIComponent(row.executionStageName) + "\"&order=createdDateTime&dir=desc", "_blank");
								});
						}
					};

					$scope.openTestListTestHistory = function () {
						var items = $scope.selectedRows;
						if (null != items && items.length > 0) {
							testListTestHistoryDialog.open(items[0].id);
						}
					};

					// Called by issue buttons
					$scope.openIssue = function (issue) {
						issueInfo.open(
							issue,
							function () {
								$scope.$broadcast("axeDataTableRun", { query: lastRunQuery });
							}
						);
					};

					$scope.clearLatestResults = function () {
						var items = $scope.selectedRows;
						if (null != items && items.length > 0) {
							var testListTestIds = [];
							angular.forEach(items,
								function (row) {
									testListTestIds.push(row.id);
								});
							latestResultsDialog.edit(testListTestIds,
								function () {
									$scope.$broadcast("axeDataTableRun", { query: lastRunQuery });
								});
						}
					};

					$scope.selected = function (rows) {
						$scope.selectedRows = rows;
						$scope.state.actionEnable = ($scope.selectedRows != null && $scope.selectedRows.length > 0);
						$scope.state.queueEnable = $scope.state.actionEnable;
					};					

					$scope.keydown = function (event) {
						if ($scope.selectedRows.length > 0 && !event.ctrlKey && !event.altKey && !event.metaKey) {
							if (event.key === "q") {
								$scope.queue(false);
							} else if (event.key === "h") {
								$scope.openTestHistory(event);
							} else if (event.key === "m") {
								$scope.editMilestone(false);
							} else if (event.key === "t") {
								$scope.editExecutionTags();
							} else if (event.key === "e") {
								$scope.editEssential();
							} else if (event.key === "i") {
								$scope.editIssue();
							} else if (event.key === "j") {
								$scope.openTestListTestHistory();
							}
						}
					};

					init();
				}
			]
		};
	}
	]);

/////////////////////////////////////////////////////////////////////////////////////////////
// MODULE:   testListApp
/////////////////////////////////////////////////////////////////////////////////////////////
var testListApp = angular.module("testListApp", ["axeApp", "axeTreeApp", "axeDataTableApp", "executionGroupsDataTableModule", "executionsDataTableModule", "executionGroupSummaryModule", "executionGroupsCompareModule", "issuesDataTableModule", "ngRoute", "ngResource", "ui.bootstrap", "queueDialogModule", "testListTestsDataTableModule", "testListTestLatestExecutionsDataTableModule", "executionDetailModule", "executionMethodModule"])
	.config([
		"$routeProvider", "$locationProvider", function($routeProvider, $locationProvider) {
			$routeProvider.
				when("/axe/tests/testlists/:testListId/ci", {
					templateUrl: "/axe/Scripts/App/TestLists/Executions/executionGroupsDataTable.html",
					controller: "executionGroupsDataTableController",
					resolve: { ci: function () { return true; }, user: function () { return false; }, mine: function () { return false; }},
					reloadOnSearch: false //prevent a page reload when the grid filter is changed which modifies the location.search
				}).when("/axe/tests/testlists/:testListId/executions", {
					templateUrl: "/axe/Scripts/App/TestLists/Executions/executionGroupsDataTable.html",
					controller: "executionGroupsDataTableController",
					resolve: { ci: function () { return false; }, user: function () { return true; }, mine: function () { return false; } },
					reloadOnSearch: false //prevent a page reload when the grid filter is changed which modifies the location.search
				}).when("/axe/tests/testlists/:testListId/executions/mine/:ci?", {
					templateUrl: "/axe/Scripts/App/TestLists/Executions/executionGroupsDataTable.html",
					controller: "executionGroupsDataTableController",
					resolve: { ci: function () { return false; }, user: function () { return true; }, mine: function () { return true; } },
					reloadOnSearch: false //prevent a page reload when the grid filter is changed which modifies the location.search
				}).when("/axe/tests/testlists/:testListId/executions/all/:ci?", {
					templateUrl: "/axe/Scripts/App/TestLists/Executions/executionGroupsDataTable.html",
					controller: "executionGroupsDataTableController",
					resolve: {ci: function () { return false; }, user: function () { return true; }, mine: function () { return false; } },
					reloadOnSearch: false //prevent a page reload when the grid filter is changed which modifies the location.search
				}).when("/axe/tests/testlists/:testListId/executions/group/:executionGroupId", {
					templateUrl: "/axe/Scripts/App/TestLists/Executions/executionsDataTable.html",
					controller: "executionsDataTableController",
					reloadOnSearch: false //prevent a page reload when the grid filter is changed which modifies the location.search
				}).when("/axe/tests/testlists/:testListId/executions/group/:executionGroupId/execution/:executionId", {
					templateUrl: "/axe/Scripts/App/TestLists/Executions/executionDetail.html",
					controller: "executionDetailController",
					reloadOnSearch: false //prevent a page reload when the grid filter is changed which modifies the location.search
				}).when("/axe/tests/testlists/:testListId/executions/group/:executionGroupId/summary/:summaryType", {
					templateUrl: "/axe/Scripts/App/TestLists/Executions/executionsSummary.html",
					controller: "executionsSummaryController",
					reloadOnSearch: false //prevent a page reload when the grid filter is changed which modifies the location.search
				}).when("/axe/tests/testlists/:testListId/executions/group/:executionGroupId/summary", {
					templateUrl: "/axe/Scripts/App/TestLists/Executions/executionsSummary.html",
					controller: "executionsSummaryController",
					reloadOnSearch: false //prevent a page reload when the grid filter is changed which modifies the location.search
				}).when("/axe/tests/testlists/:testListId/executions/group/:executionGroupId/details", {
					templateUrl: "/axe/Scripts/App/TestLists/Executions/executionGroupsDetails.html",
					controller: "executionGroupDetailController",
					reloadOnSearch: false //prevent a page reload when the grid filter is changed which modifies the location.search
				}).when("/axe/tests/testlists/:testListId/executions/group/:executionGroupId/coverage", {
					templateUrl: "/axe/Scripts/App/TestLists/Executions/executionGroupCoverage.html",
					controller: "executionGroupCoverageController",
					reloadOnSearch: false //prevent a page reload when the grid filter is changed which modifies the location.search
				}).when("/axe/tests/testlists/:testListId/executions/group/:leftExecutionGroupId/compare/:rightExecutionGroupId", {
					templateUrl: "/axe/Scripts/App/TestLists/Executions/executionGroupsCompare.html",
					controller: "executionGroupsCompareController",
					reloadOnSearch: false //prevent a page reload when the grid filter is changed which modifies the location.search
				}).when("/axe/tests/testlists/:testListId/issues", {
					templateUrl: "/axe/Scripts/App/TestLists/Issues/issuesDataTable.html",
					controller: "issuesDataTableController",
					reloadOnSearch: false //prevent a page reload when the grid filter is changed which modifies the location.search
				}).when("/axe/tests/testlists/:testListId/latestresults/:latestOption/summary/:summaryType", {
					templateUrl: "/axe/Scripts/App/TestLists/Executions/latestExecutionsSummary.html",
					controller: "latestExecutionsSummaryController",
					reloadOnSearch: false //prevent a page reload when the grid filter is changed which modifies the location.search
				}).when("/axe/tests/testlists/:testListId/latestresults/:latestOption/summary", {
					templateUrl: "/axe/Scripts/App/TestLists/Executions/latestExecutionsSummary.html",
					controller: "latestExecutionsSummaryController",
					reloadOnSearch: false //prevent a page reload when the grid filter is changed which modifies the location.search
				}).when("/axe/tests/testlists/:testListId/latestresults/:latestOption/executions", {
					templateUrl: "/axe/Scripts/App/TestLists/Executions/latestExecutionsDataTable.html",
					controller: "latestExecutionsDataTableController",
					reloadOnSearch: false //prevent a page reload when the grid filter is changed which modifies the location.search
				}).when("/axe/tests/testlists/:testListId/latestresults/execution/:executionId", {
					templateUrl: "/axe/Scripts/App/TestLists/Executions/executionDetail.html",
					controller: "executionDetailController",
					reloadOnSearch: false //prevent a page reload when the grid filter is changed which modifies the location.search
				}).when("/axe/tests/testlists/:testListId/settings", {
					templateUrl: "/axe/Scripts/App/TestLists/Settings/settingsBasic.html",
					controller: "settingsBasicController"
				}).when("/axe/tests/testlists/:testListId/settings/softwareversions", {
					templateUrl: "/axe/Scripts/App/TestLists/Settings/settingsSoftware.html",
					controller: "settingsSoftwareController"
				}).when("/axe/tests/testlists/:testListId/settings/executionmethods", {
					templateUrl: "/axe/Scripts/App/TestLists/Settings/settingsExecutionMethods.html",
					controller: "settingsExecutionMethodsController"
				}).when("/axe/tests/testlists/:testListId/settings/executionstages", {
					templateUrl: "/axe/Scripts/App/TestLists/Settings/settingsExecutionStagesRoot.html",
					controller: "settingsExecutionStagesController"
				}).when("/axe/tests/testlists/:testListId/settings/executionplans", {
					templateUrl: "/axe/Scripts/App/TestLists/Settings/settingsExecutionPlans.html",
					controller: "settingsExecutionPlansController"
				}).when("/axe/tests/testlists/:testListId/settings/ci", {
					templateUrl: "/axe/Scripts/App/TestLists/Settings/settingsCi.html",
					controller: "settingsCiController"
				}).when("/axe/tests/testlists/:testListId/settings/permissions", {
					templateUrl: "/axe/Scripts/App/TestLists/Settings/settingsPermissions.html",
					controller: "settingsPermissionsController"
				}).when("/axe/tests/testlists/:testListId/settings/testSync", {
					templateUrl: "/axe/Scripts/App/TestLists/Settings/settingsTestSyncCriteria.html",
					controller: "settingsTestSyncCriteriaController"
				}).when("/axe/tests/testlists/:testListId", {
					templateUrl: "/axe/Scripts/App/TestLists/Tests/testListDataTable.html",
					controller: "testListDataTableController",
					reloadOnSearch: false //prevent a page reload when the grid filter is changed which modifies the location.search
				}).when("/axe/tests/testlists", {
				}).otherwise({
					redirectTo: function (routeParams, url, search) {
						if (url.indexOf("/axe/tests/testlists") <= -1) {
							window.location.replace(url);
							return url;
						}
						return "/axe/tests/testlists";
					}
				});
			$locationProvider.html5Mode({
				enabled: true,
				requireBase: false
			});
		}
	]);

testListApp.controller("testListController", [
	"$scope", "$sce", "$location", "$routeParams", "$resource", "$uibModal", function($scope, $sce, $location, $routeParams, $resource, $uibModal) {
		$scope.initialized = false;
		$scope.testListId = 0;
		$scope.latestOption = $scope.latestOption ? $scope.latestOption : "combined";
		$scope.summaryType = $scope.summaryType ? $scope.summaryType : "executionStageTestArea";
		$scope.axeTreeDndEnable = false;
		$scope.disabledNodesVisible = false;
		$scope.viewMode = "latestSummary";
		$scope.testListStatus = null;
		$scope.title = { subTitle: null };
		$scope.lastExecutionViewMode = "latestSummary";
		$scope.downloadOptions = {};
		$scope.statusToolTip = "";

		var statusResource = $resource("/axe/testlist/:testListId", {}, {update: {method: "GET"}});

		var init = function () {
			var path = $location.$$path;
			if (path.indexOf("/latestresults/execution/") >= 0) {
				$scope.viewMode = "latestExecutionDetail";
			} else if (path.indexOf("/latestresults/") >= 0 && path.indexOf("/executions") >= 0) {
				$scope.viewMode = "latestExecutions";
			} else if (path.indexOf("/latestresults/") >= 0 && path.indexOf("/summary/") >= 0) {
				$scope.viewMode = "latestSummary";
			} else if (path.indexOf("/summary") >= 0) {
				$scope.viewMode = "summary";
			} else if (path.indexOf("/compare") >= 0) {
				$scope.viewMode = "executionGroupCompare";
			} else if (path.indexOf("/details") >= 0) {
				$scope.viewMode = "executionGroupDetail";
			} else if (path.indexOf("/coverage") >= 0) {
				$scope.viewMode = "executionGroupCCoverage";
			} else if (path.indexOf("/execution/") >= 0) {
				$scope.viewMode = "executionDetail";
			} else if (path.indexOf("/executions/group") >= 0) {
				$scope.viewMode = "executionGroup";
			} else if (path.indexOf("/settings") >= 0) {
				$scope.viewMode = "settings";
			} else if (path.indexOf("/executions") >= 0) {
				$scope.viewMode = "user";
				$scope.lastExecutionViewMode = $scope.viewMode;
			} else if (path.indexOf("/ci") >= 0) {
				$scope.viewMode = "ci";
				$scope.lastExecutionViewMode = $scope.viewMode;
			} else if (path.indexOf("/issues") >= 0) {
				$scope.viewMode = "issues";
			} else if (path.match(/testlists\/\d+[^/]?/)) {
				$scope.viewMode = "tests";
			}
			$scope.initialized = true;
		};

		$scope.nodeSelected = function () {
			return $scope.testListId !== 0 && $scope.testListId !== undefined;
		};

		$scope.axeTreeLoadData = function(data) {
			angular.forEach(data, function(node) { node.a_attr = {href: "/axe/tests/testlists/" + node.id} });
			return data;
		};

		$scope.$watch("viewMode", function() {$scope.title.subTitle = null;});
		
		$scope.$on("axeTreeNodeSelected", function (event, args) {
			$scope.testListId = args[0].nodeId;
			$scope.testListPath = args[0].path;

			statusResource.get(
				{testListId: $scope.testListId},
				function (response) {
					$scope.testListStatus = response;

					if (response !== null) {
						if (response.upToDate) {
							$scope.statusToolTip = $sce.trustAsHtml("Sync Status: Last updated at " + axeApp.utcToLocal(response.lastSyncDateTime) + "  <i class='fa fa-check text-success'></i>");
						} else {
							$scope.statusToolTip = $sce.trustAsHtml("Sync Status: Pending Sync with updated criteria <i class='fa fa-refresh text-info'></i>");
						}
					}
				},
				function (error) {
					alert(error);
				});

			if (args[0].clickEvent) {
				$scope.title.subTitle = null;
				if ($scope.viewMode === "latestSummary" || $scope.viewMode === "latestExecutions" || $scope.viewMode === "latestExecutionDetail") {
					$location.search("");	// clearing filters to handle things like executionStageId not existing in other testlists
					$location.path("/axe/tests/testlists/" + $scope.testListId + "/latestresults/" + $scope.latestOption + "/summary/" + $scope.summaryType);
				} else if ($scope.viewMode === "ci" || $scope.viewMode === "") {
					$location.search(""); //clear any datatable column filters when switching from a 'group' to 'execution' datatable on tree click
					$location.path("/axe/tests/testlists/" + $scope.testListId + "/ci");
				} else if ($scope.viewMode === "user") {
					$location.search(""); //clear any datatable column filters when switching from a 'group' to 'execution' datatable on tree click
					$location.path("/axe/tests/testlists/" + $scope.testListId + "/executions");
				} else if ($scope.viewMode === "executionGroup" || $scope.viewMode === "summary" || $scope.viewMode === "executionGroupCompare" || $scope.viewMode === "executionDetail" || $scope.viewMode === "executionGroupDetail" || $scope.viewMode === "executionGroupCoverage") {
					$scope.viewMode = $scope.lastExecutionViewMode; //execution group will not exist in another testlist. switch back to CI vieW
					$location.search(""); 
					if ($scope.viewMode === "ci") {
						$location.path("/axe/tests/testlists/" + $scope.testListId + "/ci");    
					} else if ($scope.viewMode === "user") {
						$location.path("/axe/tests/testlists/" + $scope.testListId + "/executions");
					} 
				} else if ($scope.viewMode === "tests") {
					$location.path("/axe/tests/testlists/" + $scope.testListId);
				} else if ($scope.viewMode === "issues") {
					$location.path("/axe/tests/testlists/" + $scope.testListId + "/issues");
				} else if ($scope.viewMode === "settings") {
					$location.path("/axe/tests/testlists/" + $scope.testListId + "/settings");
				}
			}
			axeApp.safeApply($scope);
		});

		// Since this controller is for the page and not for the ng-view, $routeParams will be empty on initial page load. 
		//   Subscribing to event to properly initialize page controls when url contains state for default load
		$scope.$on("$routeChangeSuccess", function (event, current, previous) {
			$scope.testListId = $routeParams.testListId;
			$scope.executionGroupId = $routeParams.executionGroupId;
			$scope.executionId = $routeParams.executionId;

			if (undefined === current.loadedTemplateUrl) {
				$scope.initialized = false;
			}

			if ($scope.testListId) {
				$scope.$broadcast("axeTreeSelectedNodeIds", { nodeIds: [$scope.testListId] });
			}
			init();
		});
	}
]);

testListApp.controller("newTestListController", [
	"$scope", "$resource", "$window", "$uibModal", function ($scope, $resource, $window, $uibModal) {
		$scope.new = function () {
			var modalInstance = $uibModal.open({
				templateUrl: "/axe/Scripts/App/testlists/newDialog.html",
				scope: $scope
			});

			$scope.cancel = function() {
				modalInstance.close();
			};

			$scope.create = function(name) {
				var updateScope = this;
				updateScope.updating = true;

				var createTestList = $resource("/axe/api/testlist");
				$scope.newTestList = new createTestList();

				$scope.newTestList.$save({ "path": encodeURI(name) }, function () {
					modalInstance.close();
					// route to new test list's settings
					$window.location.href = "/axe/tests/testlists/" + $scope.newTestList.id + "/settings";
				}, function(error) {
					$window.alert(error.data.message);
					updateScope.updating = false;
				});
			};
		};
	}
]);
angular.module("executionMethodModule", [])
	.directive('executionMethodAttribute', function ($http, $q) {
		return {
			require: 'ngModel',
			restrict: 'A',
			link: function (scope, elm, attrs, ctrl) {
				ctrl.$asyncValidators.executionMethodAttribute = function (modelValue, viewValue) {
					var defer = $q.defer();
					if (ctrl.$$scope.attribute.hasValidator) {
						ctrl.$$scope.attribute.validatorMessage = null;

						var data = {
							attributeType: ctrl.$$scope.attribute.type,
							value: ctrl.$$scope.attribute.value
						};

						$http.post("/axe/api/attribute/validate", data)
							.then(function (response) {
								if (response.data.status == "Pass" || response.data.inputString != viewValue) {
									ctrl.$$scope.attribute.validatorMessage = null;
									defer.resolve();
								} else if (response.data.status == "Warning") {
									ctrl.$$scope.attribute.validatorMessage = response.data.validationMessage;
									defer.resolve();
								} else {
									ctrl.$$scope.attribute.validatorMessage = response.data.validationMessage;
									defer.reject();
								}
							});
					} else {
						defer.resolve();
					}

					return defer.promise;
				};
			}
		};
	});
testListApp.directive("axeTestListSettingsNavigation", function () {
	var controller = [
		"$scope", "$location", function ($scope, $location) {
			$scope.navigate = function (destination) {
				$location.path(destination);
			};
		}
	];

	return {
		scope: {
			testListId: "=",
			selected: "="
		},
		controller: controller,
		templateUrl: "/axe/Scripts/App/TestLists/Settings/settingsNavigation.html"
	}
});

testListApp.controller("settingsBasicController", ["$scope", "$resource", function ($scope, $resource) {
	var resource = $resource("/axe/testlist/:testListId/basicsettings", {}, { update: { method: "PUT" } });
	var unsavedMessage = "Changes not saved! Continue leaving the page?";

	$scope.initialized = false;
	$scope.saving = false;

	$scope.settings = resource.get(
		{ testListId: $scope.testListId },
		function () {
			$scope.initialized = true;
		}, function (response) {
			alert(response.statusText);
			$scope.initialized = true;
	});

	$scope.clearLatestResultsModes = [
		{ name: "Disabled", display: "Disabled", description: "Updating tests to Waive or DoNotRun does not reset latest results or test version pins" },
		{ name: "DoNotRun", display: "DoNotRun", description: "Updating tests to DoNotRun will reset latest results and test version pins" },
		{ name: "DoNotRunOrWaive", display: "DoNotRun Or Waive ", description: "Updating tests to DoNotRun or Waive will reset latest results and test version pins" }
	];

	$scope.save = function () {
		$scope.saving = true;
		$scope.settings.$update({ testListId: $scope.testListId }, function () {
			$scope.saving = false;
			$scope.settingsForm.$setPristine();
		}).then(function success() {}, function error(response) {
			alert(response.statusText);
		});
	};

	$scope.$on("$locationChangeStart", function (event, next, current) {
		if ($scope.settingsForm.$dirty) {
			if (!confirm(unsavedMessage)) {
				event.preventDefault();
			}
		}
	});

	window.onbeforeunload = function(event) {
		if ($scope.settingsForm.$dirty) {
			if (typeof event === "undefined") {
				window.event.returnValue = unsavedMessage;
			}
			return unsavedMessage;
		}
	};
}]);
testListApp.controller("settingsCiController", [
	"$scope", "$resource",  function ($scope, $resource) {
		var ciSettingsResource = $resource("/axe/testlist/:testListId/cisettings", {}, { update: { method: "PUT" } });
		var unsavedMessage = "Changes not saved! Continue leaving the page?";

		$scope.initialized = false;
		$scope.saving = false;

		$scope.settings = ciSettingsResource.get({ testListId: $scope.testListId }, function () {
			$scope.initialized = true;
		});

		$scope.save = function() {
			$scope.saving = true;
			$scope.settings.$update({ testListId: $scope.testListId },
				function success() {
					$scope.saving = false;
					$scope.settingsForm.$setPristine();
				},
				function error(response) {
					alert(response.statusText);
					$scope.saving = false;
				});
		};
		$scope.$on("$locationChangeStart", function (event, next, current) {
			if ($scope.settingsForm.$dirty) {
				if (!confirm(unsavedMessage)) {
					event.preventDefault();
				}
			}
		});

		window.onbeforeunload = function (event) {
			if ($scope.settingsForm.$dirty) {
				if (typeof event === "undefined") {
					window.event.returnValue = unsavedMessage;
				}
				return unsavedMessage;
			}
		};
	}
]);

testListApp.controller("settingsExecutionMethodsController", [
	"$scope", "$resource", "$uibModal", "$filter", "$timeout", "$anchorScroll", function ($scope, $resource, $uibModal, $filter, $timeout, $anchorScroll) {
		var resource = $resource("/axe/testlist/:testListId/executionmethods", {}, { update: { method: "PUT" } });
		var unsavedMessage = "Changes not saved! Continue leaving the page?";

		$scope.initialized = false;
		$scope.saving = false;

		$scope.save = function () {
			$scope.saving = true;
			$uibModal.open({
				animation: false,
				templateUrl: "/axe/Scripts/App/Axe/commentDialog.html",
				controller: commentDialogController,
				backdrop: "static",
				resolve: {
					title: function () { return "Change Comments"; },
					comment: function () { return ""; }
				}
			}).result.then(function (comment) {

				$scope.settings.executionMethods.forEach(function (executionMethod) {
					executionMethod.changeComment = comment;
				});

				$scope.settings.$update({ testListId: $scope.testListId }, function success(response) {
					invokeSettingsDialog(response);					
				}, function error(response) {
					alert(response.statusText);
					$scope.saving = false;
				});
			}, function () {
				//dismiss
				$scope.saving = false;
			});
		};

		function invokeSettingsDialog(response) {
			if (response && response.settingsResult) {
				$uibModal.open({
					animation: false,
					templateUrl: "/axe/Scripts/App/TestLists/Settings/settingsDialog.html",
					controller: settingsDialogController,
					backdrop: "static",
					resolve: {
						settingType: function () { return "Execution Methods"; },
						settingsResult: function () { return response.settingsResult; },
					}
				}).result.then(function (settingsResult) {
					if (settingsResult) {
						settingsResult.forEach(function (setting) {
							var index = response.executionMethods.findIndex(function (method) { return method.id === setting.id; });
							if (index != -1) {
								response.executionMethods[index].resolveChange = setting.overwrite == true ? "OverwriteLatest" : "KeepLatest";
							}
						});
						$scope.settings.$update({ testListId: $scope.testListId }, function success(response) {
							invokeSettingsDialog(response);
						}, function error(response) {
							alert(response.statusText);
							$scope.saving = false;
						})
					}
				}, function () {
					//dismiss
					$scope.saving = false;
					$scope.settingsForm.$setPristine();
					$scope.attributeValidationState = {};
					init();
				});
			} else {
				$scope.saving = false;
				init();
				$scope.settingsForm.$setPristine();
				$scope.attributeValidationState = {};
			}
		}

		var init = function () {
			$scope.initialized = false;
			$scope.expandAll = true;
			$scope.settings = resource.get({ testListId: $scope.testListId }, function () {
				angular.forEach($scope.settings.executionMethods, function (method) {
					angular.forEach(method.attributes, function (attribute) {
						attribute.hasValidator = attribute.typeDto.hasValidator;
						attribute.validatorMessage = null;
						angular.forEach($scope.settings.attributeTypes, function (type) {
							if (attribute.typeDto.id === type.id) {
								attribute.typeDto = type;
							}
						});
					});
					method.editable = method.synchronizeFromTestList == null;
				});
				$scope.settings.executionMethods = $filter("orderBy")($scope.settings.executionMethods, "name");
				$scope.initialized = true;
				$timeout(function () {
					$anchorScroll();
				});
			});
		};

		$scope.addExecutionMethod = function () {
			$scope.settings.executionMethods.push({
				name: "",
				editable: true,
				attributes: [{
					type: "",
					value: "",
					typeDto: "",
					hasValidator: false,
					validatorMessage: null
				}],
				deleted: false,
				synchronizeFromTestList: null,
				expanded: true,
				resolveChange: null
			});
		};

		$scope.cloneExecutionMethod = function (index) {
			event.stopPropagation();
			var clone = angular.copy($scope.settings.executionMethods[index]);
			clone.id = 0;
			clone.name = "";
			clone.usedInExecutionStage = false;
			clone.expanded = true;
			clone.editable = true;
			clone.synchronizeFromTestList = null;
			clone.resolveChange = null;
			angular.forEach(clone.attributes, function (attribute) {
				attribute.id = 0;
				angular.forEach($scope.settings.attributeTypes, function (type) {
					if (attribute.typeDto.id === type.id) {
						attribute.typeDto = type;
					}
				});
			});
			$scope.settings.executionMethods.splice(index + 1, 0, clone);
		};

		$scope.removeExecutionMethod = function (index) {
			$scope.settings.executionMethods[index].deleted = true;

			//Id === 0 means the method is new, new method that are being deleted should be removed from the list so they are not sent to the server. 
			// Additionally, this will ensure that Save Changes can be properly enabled.
			if ($scope.settings.executionMethods[index].id === 0) {
				$scope.settings.executionMethods.splice(index, 1);
			}

			$scope.settingsForm.$setDirty();
		};

		$scope.addExitCodeExecutionRemap = function (methodIndex) {
			if (null == $scope.settings.executionMethods[methodIndex].exitCodeExecutionStatusRemap) {
				$scope.settings.executionMethods[methodIndex].exitCodeExecutionStatusRemap = [];
			}
			$scope.settings.executionMethods[methodIndex].exitCodeExecutionStatusRemap.push({ exitCode: 0, status: "Pass", excludeTestCi: true });
			$scope.settingsForm.$setDirty();
		};

		$scope.addExitCodeTestListRemap = function (methodIndex) {
			if (null == $scope.settings.executionMethods[methodIndex].exitCodeTestListStatusRemap) {
				$scope.settings.executionMethods[methodIndex].exitCodeTestListStatusRemap = [];
			}
			$scope.settings.executionMethods[methodIndex].exitCodeTestListStatusRemap.push({ exitCode: 0, status: "Active", excludeTestCi: true });
			$scope.settingsForm.$setDirty();
		};

		$scope.deleteExitCodeExecutionRemap = function (methodIndex, exitCode) {
			$scope.settings.executionMethods[methodIndex].exitCodeExecutionStatusRemap.splice(
				$scope.settings.executionMethods[methodIndex].exitCodeExecutionStatusRemap.indexOf(exitCode),
				1
			);
			$scope.settingsForm.$setDirty();
		};

		$scope.deleteExitCodeTestListRemap = function (methodIndex, exitCode) {
			$scope.settings.executionMethods[methodIndex].exitCodeTestListStatusRemap.splice(
				$scope.settings.executionMethods[methodIndex].exitCodeTestListStatusRemap.indexOf(exitCode),
				1
			);
			$scope.settingsForm.$setDirty();
		};

		$scope.addAttribute = function (parentIndex) {
			$scope.settings.executionMethods[parentIndex].attributes.push({
				type: "",
				value: "",
				typeDto: "",
				hasValidator: false,
				validatorMessage: null
			});
			$scope.settingsForm.$setDirty();
		};

		$scope.removeAttribute = function (parentIndex, index) {
			$scope.settings.executionMethods[parentIndex].attributes.splice(index, 1);
			// ensure that there is never an execution method with no attributes
			if ($scope.settings.executionMethods[parentIndex].attributes.length == 0) {
				$scope.addAttribute(parentIndex);
			}
			$scope.settingsForm.$setDirty();
		};

		$scope.toggleTestListStatusRemapExcludeTestCi = function (exitCodeExecutionStatusRemap) {
			exitCodeExecutionStatusRemap.excludeTestCi = !exitCodeExecutionStatusRemap.excludeTestCi;
			$scope.settingsForm.$setDirty();
		};

		$scope.toggleTestListStatusRemapExcludeTestCi = function (exitCodeTestListStatusRemap) {
			exitCodeTestListStatusRemap.excludeTestCi = !exitCodeTestListStatusRemap.excludeTestCi;
			$scope.settingsForm.$setDirty();
		};

		$scope.toggleExpandAll = function () {
			if ($scope.expandAll) {
				$scope.settings.executionMethods.forEach(function (executionMethod) {
					executionMethod.expanded = false;
				});
			} else {
				$scope.settings.executionMethods.forEach(function (executionMethod) {
					executionMethod.expanded = true;
				});
			}
			$scope.expandAll = !$scope.expandAll;
		};

		$scope.getAvailableAttributeTypes = function (executionMethod, selectedAttribute) {
			var existingAttributeTypes = executionMethod.attributes.map(function(attribute) {
				return attribute.type;
			});

			existingAttributeTypes = existingAttributeTypes.filter(function (attributeType) {
				return attributeType !== selectedAttribute.type;
			});
			if ($scope.settings.attributeTypes) {
				var attributeTypes = $scope.settings.attributeTypes.filter(function (attributeType) {
					return !existingAttributeTypes.includes(attributeType.name);
				});

				return attributeTypes;
			}
		};

		$scope.openSourceExecutionMethod = function (executionMethod) {
			event.stopPropagation();
			window.open("axe/tests/testlists/" + executionMethod.synchronizeFromTestList.testListId + "/settings/executionmethods#method-" + executionMethod.synchronizeFromTestList.sourceId, "_blank");
		};

		$scope.updateAttributeType = function (methodIndex, attributeIndex, attribute) {
			attribute.type = attribute.typeDto.name;
			attribute.hasValidator = attribute.typeDto.hasValidator;
		};

		$scope.$on("$locationChangeStart", function (event, next, current) {
			if ($scope.settingsForm.$dirty) {
				if (!confirm(unsavedMessage)) {
					event.preventDefault();
				}
			}
		});

		window.onbeforeunload = function (event) {
			if ($scope.settingsForm.$dirty) {
				if (typeof event === "undefined") {
					window.event.returnValue = unsavedMessage;
				}
				return unsavedMessage;
			}
		};

		init();
	}
]);

testListApp.controller("settingsExecutionStagesController", [
	"$scope", "$resource", "$uibModal", "$filter", "$timeout", "$anchorScroll", function ($scope, $resource, $uibModal, $filter, $timeout, $anchorScroll) {
		var resource = $resource("/axe/testlist/:testListId/executionstages", {}, { update: { method: "PUT" } });
		var unsavedMessage = "Changes not saved! Continue leaving the page?";

		$scope.initialized = false;
		$scope.saving = false;
		
		$scope.queryFields = {
			Agent: { type: "string", label: "Agent" },
			CommandLine: { type: "string", label: "CommandLine" },
			Complexity: { type: "int", label: "Complexity" },
			ExecutionTags: { type: "string", label: "ProductTag" },
			Feature: { type: "string", label: "Feature" },
			FileName: { type: "string", label: "FileName" },
			Milestone: { type: "value", validValues: ["Unassigned", "0.0", "0.15", "0.25", "0.5", "0.85", "1.0", "N/A"], label: "Milestone" },
			Name: { type: "string", label: "Name" },
			Product: { type: "string", label: "Product" },
			SeedCount: { type: "int", label: "SeedCount" },
			RelativePath: { type: "string", label: "RelativePath" },
			Tag: { type: "string", label: "Tag" },
			Target: { type: "string", label: "Target" },
			TestArea: { type: "string", label: "TestArea" }
		};
		
		$scope.save = function () {
			$scope.saving = true;
			$uibModal.open({
				animation: false,
				templateUrl: "/axe/Scripts/App/Axe/commentDialog.html",
				controller: commentDialogController,
				backdrop: "static",
				resolve: {
					title: function () { return "Change Comments"; },
					comment: function () { return ""; }
				}
			}).result.then(function (comment) {

				$scope.settings.executionStages.forEach(function (executionStage) {
					executionStage.changeComment = comment;
					if (executionStage.seedMultiplier <= 0) {
						executionStage.seedMultiplier = 1;
					}

					if (executionStage.childExecutionStages != null) {
						executionStage.childExecutionStages.forEach(function (childExecutionStage) {
							childExecutionStage.changeComment = comment;
						});
					}
					if (executionStage.debugExecutionStages != null) {
						executionStage.debugExecutionStages.forEach(function (debugExecutionStage) {
							debugExecutionStage.changeComment = comment;
						});
					}
				});

				$scope.settings.$update({ testListId: $scope.testListId }, function success(response) {
					invokeExecStageSettingsDialog(response);
				}, function error(response) {
					alert(response.statusText);
					$scope.saving = false;
				});

			}, function () {
				//dismiss
				$scope.saving = false;
			});
		};

		var init = function () {
			$scope.initialized = false;
			$scope.expandAll = true;
			$scope.settings = resource.get({ testListId: $scope.testListId }, function () {
				$scope.settings.executionStages = $filter("orderBy")($scope.settings.executionStages, "name");
				angular.forEach($scope.settings.executionStages, function (stage) {
					stage.editable = stage.synchronizeFromTestList == null;
					angular.forEach(axeApp.flattenObjectTreeArrays(stage.childExecutionStages, "childExecutionStages"), function (childStage) {
						childStage.editable = childStage.synchronizeFromTestList == null;
					});
					angular.forEach(axeApp.flattenObjectTreeArrays(stage.debugExecutionStages, "childExecutionStages"), function (childStage) {
						childStage.editable = childStage.synchronizeFromTestList == null;
					});
				});
				$scope.initialized = true;
				$timeout(function () {
					$anchorScroll();
				});
			});
		};

		$scope.$on("$locationChangeStart", function (event, next, current) {
			if ($scope.settingsForm.$dirty) {
				if (!confirm(unsavedMessage)) {
					event.preventDefault();
				}
			}
		});

		window.onbeforeunload = function (event) {
			if ($scope.settingsForm.$dirty) {
				if (typeof event === "undefined") {
					window.event.returnValue = unsavedMessage;
				}
				return unsavedMessage;
			}
		};

		function invokeExecStageSettingsDialog(response) {
			if (response && response.settingsResult) {
				$uibModal.open({
					animation: false,
					templateUrl: "/axe/Scripts/App/TestLists/Settings/settingsDialog.html",
					controller: settingsDialogController,
					backdrop: "static",
					resolve: {
						settingType: function () { return "Execution Stages"; },
						settingsResult: function () { return response.settingsResult; },
					}
				}).result.then(function (settingsResult) {
					if (settingsResult) {
						settingsResult.forEach(function (setting) {
							setResolveChange(response.executionStages, setting);
						});
						$scope.settings.$update({ testListId: $scope.testListId }, function success(response) {
							invokeExecStageSettingsDialog(response);
						}, function error(response) {
							alert(response.statusText);
							$scope.saving = false;
						})
					}
				}, function () {
					//dismiss
					$scope.saving = false;
					$scope.settingsForm.$setPristine();
					$scope.attributeValidationState = {};
					init();
				});
			} else {
				$scope.saving = false;
				init();
				$scope.settingsForm.$setPristine();
				$scope.attributeValidationState = {};
			}
		}

		function setResolveChange(executionStages, setting) {			
			for (var i = 0; i < executionStages.length; i++) {
				if (executionStages[i].id == setting.id) {
					executionStages[i].resolveChange = setting.overwrite == true ? "OverwriteLatest" : "KeepLatest";
					break;
				} else {
					if (executionStages[i].childExecutionStages != null) {
						setResolveChange(executionStages[i].childExecutionStages, setting);
					}
					if (executionStages[i].debugExecutionStages != null) {
						setResolveChange(executionStages[i].childExecutionStages, setting);
					}
				}
			}
		}

		init();		
	}
]);


testListApp.directive("executionStage", [
	"$compile", function ($compile) {
		var formCounter = 0;
		var controller = [
			"$scope", "$resource", "$uibModal", function ($scope, $resource, $uibModal) {
				var executionStageHistoryResource = $resource("/axe/testlist/:testListId/executionStage/:executionStageId/history");
				$scope.expandAll = true;
				$scope.childQueryFields = {
					ExecutionStatus: { type: "value", label: "ExecutionStatus", validValues: ["Pass", "Fail", "Error", "Warn"] }
				};
				
				$scope.addExecutionStage = function () {
					$scope.data.push({
						id: 0,
						name: "",
						criteria: {},
						enableEditQuery: true,
						editable: true,
						deleted: false,
						childExecutionStages: [],
						usedInExecutionPlan: false,
						expanded: true,
						seedMode: "Disabled",
						seedMultiplier: 1.0,
						synchronizeFromTestList: null,
						primaryDebugStage: false,
						resolveChange: null
					});
					$scope.settingsForm.$setDirty();
				};

				$scope.addExecutionChildStage = function (stageIndex) {
					if ($scope.debugStage) {
						var childExecutionStage = {
							id: 0,
							name: "",
							criteria: {},
							enableEditQuery: true,
							editable: true,
							deleted: false,
							childExecutionStages: [],
							usedInExecutionPlan: false,
							expanded: true,
							seedMode: "Disabled",
							seedMultiplier: "",
							synchronizeFromTestList: null,
							primaryDebugStage: false,
							resolveChange: null
						}
					} else {
						var childExecutionStage = {
							id: 0,
							name: "",
							criteria: {},
							enableEditQuery: true,
							editable: true,
							deleted: false,
							childExecutionStages: [],
							usedInExecutionPlan: false,
							expanded: true,
							seedMode: "Disabled",
							seedMultiplier: 1.0,
							synchronizeFromTestList: null,
							primaryDebugStage: false,
							resolveChange: null
						};
					}

					$scope.data[stageIndex].childExecutionStages = $scope.data[stageIndex].childExecutionStages || [];
					$scope.data[stageIndex].childExecutionStages.push(childExecutionStage);
					$scope.settingsForm.$setDirty();
				};

				$scope.addExecutionDebugStage = function (stageIndex) {
					var debugExecutionStage = {
						id: 0,
						name: "",
						criteria: {},
						enableEditQuery: true,
						editable: true,
						deleted: false,
						childExecutionStages: [],
						usedInExecutionPlan: false,
						expanded: true,
						seedMode: "Disabled",
						seedMultiplier: "",
						synchronizeFromTestList: null,
						primaryDebugStage: false,
						resolveChange: null
					};

					$scope.data[stageIndex].debugExecutionStages = $scope.data[stageIndex].debugExecutionStages || [];
					$scope.data[stageIndex].debugExecutionStages.push(debugExecutionStage);
					$scope.settingsForm.$setDirty();
				};

				$scope.cloneExecutionStage = function (index) {
					event.stopPropagation();
					$scope.data[index].primaryDebugStage = false;
					var cloneStage = angular.copy($scope.data[index]);
					clearClonedStage(cloneStage);
					$scope.data.splice(index + 1, 0, cloneStage);
					$scope.settingsForm.$setDirty();
				};

				var clearClonedStage = function (stage) {
					stage.id = 0;
					stage.name = "";
					stage.usedInExecutionPlan = false;
					stage.expanded = true;
					stage.editable = true;
					stage.seedMultiplier = "";
					stage.childExecutionStages = stage.childExecutionStages || [];
					stage.debugExecutionStages = stage.debugExecutionStages || [];
					stage.synchronizeFromTestList = null;

					stage.childExecutionStages.forEach(function (childStage) { 
						clearClonedStage(childStage); 
					});

					stage.debugExecutionStages.forEach(function (debugStage) { 
						clearClonedStage(debugStage); 
					});
				};

				$scope.getExecutionStageAttributes = function (executionEnvironmentId) {
					var validAttributes = [];
					if ($scope.settings.executionEnvironments) {
						var executionEnvironment = $scope.settings.executionEnvironments.find(function (environment) { return environment.id === executionEnvironmentId; });

						if (executionEnvironment) {
							validAttributes = $scope.settings.environmentAttributes[Object.keys($scope.settings.environmentAttributes).find(function (attributeCategory) {
								return attributeCategory.toLowerCase() === executionEnvironment.attributeCategory.toLowerCase()
							})];
						}
					}					
					return validAttributes;
				};
				
				$scope.getHeadingTitle = function (stageIndex) {
					var executionStage = $scope.data[stageIndex];
					var title = executionStage.name;
					
					if (executionStage.executionMethod != null && $scope.settings.executionMethods) {
						var methodName = $scope.settings.executionMethods.find(function(method) {
							return method.id === executionStage.executionMethod.id;
						}).name;
						title += " - " + methodName;
					}
					
					return title;
				}
				
				$scope.getHeadingStyle = function () {
					if ($scope.parent != null){
						if ($scope.debugStage == null) {
							return {
								'border-left': 'solid 14px #0071c5'
							};
						} else {
							return {
								'border': 'solid thin goldenrod'
							};
						}
					} else {
						return {};
					}
				};

				$scope.removeExecutionStage = function (index) {
					$scope.data[index].deleted = true;

					//Id === 0 means the stage is new, new executionStage that are being deleted should be removed from the list so they are not sent to the server. 
					// Additionally, this will ensure that Save Changes can be properly enabled.
					if ($scope.data[index].id === 0) {
						$scope.data.splice(index, 1);
					}
					$scope.settingsForm.$setDirty();
				};

				$scope.openExecutionStageHistory = function (executionStageId) {
					event.stopPropagation();
					$scope.executionStageHistory = { initialized: false, data: null };
					$scope.executionStageHistory = executionStageHistoryResource.get({ testListId: $scope.testListId, executionStageId: executionStageId },
						function (response) {
							$scope.executionStageHistory.initialized = true;
							$scope.executionStageHistory.data = response;
						},
						function (error) {
							alert(error);
						});

					var modalInstance = $uibModal.open({
						templateUrl: "/axe/Scripts/App/TestLists/Settings/History/executionStageHistory.html",
						scope: $scope,
						size: "full"
					});

					$scope.close = function () {
						modalInstance.close();
					};
				};

				$scope.openSourceExecutionStage = function (executionStage) {
					event.stopPropagation();
					window.open("axe/tests/testlists/" + executionStage.synchronizeFromTestList.testListId + "/settings/executionstages#stage-" + executionStage.synchronizeFromTestList.sourceId, "_blank");
				};

				$scope.toggleEditQuery = function (executionStage) {
					if (executionStage.editable) {
						executionStage.enableEditQuery = executionStage.enableEditQuery ? false : true;
					}
				};

				$scope.toggleVersionPinEnable = function (executionStage) {
					executionStage.versionPinEnable = !executionStage.versionPinEnable;
					$scope.settingsForm.$setDirty();
				};

				$scope.toggleTestCiEnable = function (executionStage) {
					executionStage.testCiEnable = !executionStage.testCiEnable;
					$scope.settingsForm.$setDirty();
				};

				$scope.toggleExpandAll = function () {
					if ($scope.expandAll) {
						$scope.settings.executionStages.forEach(function (executionStage) {
							executionStage.expanded = false;
						});
					} else {
						$scope.settings.executionStages.forEach(function (executionStage) {
							executionStage.expanded = true;
						});
					}
					$scope.expandAll = !$scope.expandAll;
				};

				$scope.togglePrimaryDebugStage = function (stageIndex, executionStage) {
					event.stopPropagation();
					var primaryExists = false;
					if (!executionStage.primaryDebugStage && $scope.parent.debugExecutionStages) {
						$scope.parent.debugExecutionStages.forEach(function (debugStage) {
							if (debugStage.primaryDebugStage == true) {
								primaryExists = true;
							}
						});
					};

					if (primaryExists == true) {
						alert("Only one debug stage can be set to primary");
					} else {
						executionStage.primaryDebugStage = !executionStage.primaryDebugStage;
					}
					$scope.settingsForm.$setDirty();
				}

			}
		];

		return {
			restrict: "E",
			controller: controller,
			scope: {
				data: "=",
				index: "=",
				parent: "=",
				debug: "=",
				queryFields: "=",
				settingsForm: "=",
				settings: "=",
				testListId: "="
			},
			templateUrl: "/axe/Scripts/App/TestLists/Settings/settingsExecutionStages.html",
			compile: function (element, attrs) {
				return function (scope, element, attrs) {
					formCounter = formCounter + 1;
					scope.formId = formCounter;
					scope.stageIndex = scope.index;
					scope.executionStage = scope.data;
					scope.debugStage = scope.debug;
				};
			}
		};
	}
]);

testListApp.controller("settingsExecutionPlansController", [
	"$scope", "$resource", "$uibModal", "$filter", "$timeout", "$anchorScroll", function ($scope, $resource, $uibModal, $filter, $timeout, $anchorScroll) {
		var resource = $resource("/axe/testlist/:testListId/executionplanssettings", {}, {
			getMethod: { method: "GET" },
			update: {
				url: '/axe/testlist/:testListId/executionplans',
				method: "PUT"
			}
		});
		var executionPlanHistoryResource = $resource("/axe/testlist/:testListId/executionPlan/:executionPlanId/history");
		var unsavedMessage = "Changes not saved! Continue leaving the page?";

		$scope.initialized = false;
		$scope.saving = false;

		$scope.save = function () {
			$scope.saving = true;
			$scope.executionPlans = $scope.settings.executionPlans;
			$uibModal.open({
				animation: false,
				templateUrl: "/axe/Scripts/App/Axe/commentDialog.html",
				controller: commentDialogController,
				backdrop: "static",
				resolve: {
					title: function () { return "Change Comments"; },
					comment: function () { return ""; }
				}
			}).result.then(function (comment) {

				$scope.executionPlans.forEach(function (executionPlan) {
					executionPlan.planStages.forEach(function (executionPlanStage) {
						executionPlanStage.changeComment = comment;
					});
				});

				$scope.settings.$update({ testListId: $scope.testListId }, function success(response) {
					invokeExecPlansSettingsDialog(response);
				}, function error(response) {
					alert(response.statusText);
					$scope.saving = false;
				});

			}, function () {
				$scope.saving = false;
			});
		};

		function invokeExecPlansSettingsDialog(response) {
			if (response && response.settingsResult) {
				$uibModal.open({
					animation: false,
					templateUrl: "/axe/Scripts/App/TestLists/Settings/settingsDialog.html",
					controller: settingsDialogController,
					backdrop: "static",
					resolve: {
						settingType: function () { return "Execution Plans"; },
						settingsResult: function () { return response.settingsResult; },
					}
				}).result.then(function (settingsResult) {
					if (settingsResult) {
						settingsResult.forEach(function (setting) {
							for (var i = 0; i < response.executionPlans.length; i++) {
								var index = response.executionPlans[i].planStages.findIndex(function (plan) { return plan.id === setting.id; });
								if (index != -1) {
									response.executionPlans[i].planStages[index].resolveChange = setting.overwrite == true ? "OverwriteLatest" : "KeepLatest";
								}
							}
						});
						$scope.settings.$update({ testListId: $scope.testListId }, function success(response) {
							invokeExecPlansSettingsDialog(response);
						}, function error(response) {
							alert(response.statusText);
							$scope.saving = false;
						});
					}
				}, function () {
					//dismiss
					$scope.saving = false;
					$scope.settingsForm.$setPristine();
					$scope.attributeValidationState = {};
					init();
				});
			} else {
				$scope.saving = false;
				init();
				$scope.settingsForm.$setPristine();
				$scope.attributeValidationState = {};
			}
		};

		var init = function () {
			$scope.initialized = false;
			$scope.expandAll = true;
			$scope.settings = resource.get({ testListId: $scope.testListId }, function () {
				$scope.settings.executionPlans = $filter("orderBy")($scope.settings.executionPlans, "name");
				angular.forEach($scope.settings.executionPlans, function (plan) {
					plan.editable = plan.synchronizeFromTestList == null;
				});
				$scope.initialized = true;
				$timeout(function () {
					$anchorScroll();
				});
			});
		};

		$scope.addExecutionPlan = function () {
			$scope.settings.executionPlans.push({
				name: "",
				planStages: [{
					enableEditQuery: true,
					dataFilter: {},
					id: 0,
					resolveChange: null
				}],
				deleted: false,
				expanded: true,
				editable: true,
				schedulerType: "Pull",
				synchronizeFromTestList: null
			});
		};

		$scope.cloneExecutionPlan = function (index) {
			event.stopPropagation();
			var clone = angular.copy($scope.settings.executionPlans[index]);
			clone.id = 0;
			clone.name = "";
			clone.expanded = true;
			clone.editable = true;
			clone.synchronizeFromTestList = null;
			angular.forEach(clone.executionStages, function (executionStage) {
				executionStage.id = 0;
			});
			$scope.settings.executionPlans.splice(index + 1, 0, clone);
		};

		$scope.deleteExecutionPlan = function (index) {
			$scope.settings.executionPlans[index].deleted = true;

			//Id === 0 means the planStage is new, new planStage that are being deleted should be removed from the list so they are not sent to the server. 
			// Additionally, this will ensure that Save Changes can be properly enabled.
			if ($scope.settings.executionPlans[index].id === 0) {
				$scope.settings.executionPlans.splice(index, 1);
			}

			$scope.settingsForm.$setDirty();
		};

		$scope.addExecutionPlanStage = function (planIndex) {
			var executionPlanExecutionStage = {
				enableEditQuery: true,
				dataFilter: {},
				id: 0,
				deleted: false,
				resolveChange: null
			};
			$scope.settings.executionPlans[planIndex].planStages.push(executionPlanExecutionStage);
		};

		$scope.openSourceExecutionPlan = function (executionPlan) {
			event.stopPropagation();
			window.open("axe/tests/testlists/" + executionPlan.synchronizeFromTestList.testListId + "/settings/executionplans#plan-" + executionPlan.synchronizeFromTestList.sourceId, "_blank");
		};

		$scope.toggleExpandAll = function () {
			if ($scope.expandAll) {
				$scope.settings.executionPlans.forEach(function (executionPlan) {
					executionPlan.expanded = false;
				});
			} else {
				$scope.settings.executionPlans.forEach(function (executionPlan) {
					executionPlan.expanded = true;
				});
			}
			$scope.expandAll = !$scope.expandAll;
		};

		$scope.$on("$locationChangeStart", function (event, next, current) {
			if ($scope.settingsForm.$dirty) {
				if (!confirm(unsavedMessage)) {
					event.preventDefault();
				}
			}
		});

		window.onbeforeunload = function (event) {
			if ($scope.settingsForm.$dirty) {
				if (typeof event === "undefined") {
					window.event.returnValue = unsavedMessage;
				}
				return unsavedMessage;
			}
		};

		init();
	}
]);

testListApp.directive("executionPlanStage", [
	"$compile", function ($compile) {
		var formCounter = 0;
		var controller = [
			"$scope", "$resource", "$uibModal", function ($scope, $resource, $uibModal) {
				var executionPlanStageHistoryResource = $resource("/axe/testlist/:testListId/executionPlanExecutionStage/:executionStageId/history");

				$scope.queryFields = {
					Essential: { type: "bool", label: "Essential" },
					ExecutionTags: { type: "string", label: "ProductTag" },
					Milestone: { type: "value", validValues: ["Unassigned", "0.0", "0.15", "0.25", "0.5", "0.85", "1.0", "N/A"], label: "Milestone" },
					TestCaseVersion: { type: "int", label: "TestCaseVersion" },
					TestListTestStatus: { type: "value", label: "TestListTestStatus", validValues: ["Active", "DoNotRun", "MustRun", "MustRunWaived", "Removed", "Waived"] }
				};

				$scope.addExecutionPlanStage = function (parent, planStage) {

					planStage = planStage || {};
					parent.planStages = parent.planStages || [];

					planStage.enableEditQuery = true;
					planStage.deleted = false;
					planStage.resolveChange = null;

					parent.planStages.push(planStage);
					$scope.settingsForm.$setDirty();
				};

				$scope.cloneExecutionPlanStage = function () {
					var planStage = angular.copy($scope.parent.planStages[$scope.index]);
					planStage.id = 0;
					planStage.name = "";

					$scope.addExecutionPlanStage($scope.parent, planStage);
					$scope.settingsForm.$setDirty();
				};

				$scope.deleteExecutionPlanStage = function () {
					$scope.parent.planStages[$scope.index].deleted = true;

					//Id === 0 means the planStage is new, new planStage that are being deleted should be removed from the list so they are not sent to the server. 
					// Additionally, this will ensure that Save Changes can be properly enabled.
					if ($scope.parent.planStages[$scope.index].id === 0) {
						$scope.parent.planStages.splice($scope.index, 1);
					}

					$scope.settingsForm.$setDirty();
				};

				$scope.getExecutionPlanExecutionStageOptions = function () {
					var existingExecutionStageIds = $scope.parent.planStages.map(function (planStage) {
						if (planStage.executionStage && !planStage.deleted) {
							return planStage.executionStage.id;
						}
					});

					if ($scope.executionPlanStage.executionStage) {
						existingExecutionStageIds = existingExecutionStageIds.filter(function (stageId) {
							return stageId !== $scope.executionPlanStage.executionStage.id;
						});
					}

					if ($scope.settings && $scope.settings.executionStages) {
						var availableExecutionStages = $scope.settings.executionStages.filter(function (executionStage) {
							return !existingExecutionStageIds.includes(executionStage.id);
						});
						return availableExecutionStages;
					}
				};

				$scope.openExecutionPlanStageHistory = function (executionPlanStageId) {
					$scope.executionPlanStageHistory = { initialized: false, data: null };
					$scope.executionPlanStageHistory = executionPlanStageHistoryResource.get({ testListId: $scope.parent.testListId, executionPlanStageId: executionPlanStageId },
						function (response) {
							$scope.executionPlanStageHistory.initialized = true;
							$scope.executionPlanStageHistory.data = response;
						},
						function (error) {
							alert(error);
						});

					var modalInstance = $uibModal.open({
						templateUrl: "/axe/Scripts/App/TestLists/Settings/History/executionPlanStageHistory.html",
						scope: $scope,
						size: "full"
					});

					$scope.close = function () {
						modalInstance.close();
					};
				};

				$scope.toggleEditQuery = function () {
					if ($scope.editable) {
						$scope.data.enableEditQuery = $scope.data.enableEditQuery ? false : true;
					}
				};

				$scope.toggleSetEssential = function (executionPlanStage) {
					executionPlanStage.executeEssential = !executionPlanStage.executeEssential;
					$scope.settingsForm.$setDirty();
				};
				$scope.toggleTestVersionPinningEnable = function (executionPlanStage) {
					executionPlanStage.executionTestVersionPinEnable = !executionPlanStage.executionTestVersionPinEnable;
					$scope.settingsForm.$setDirty();
				};
			}
		];

		return {
			restrict: "E",
			controller: controller,
			scope: {
				data: "=",
				index: "=",
				parent: "=",
				queryFields: "=",
				settingsForm: "=",
				settings: "=",
				editable: "="
			},
			templateUrl: "/axe/Scripts/App/TestLists/Settings/settingsExecutionPlanStage.html",
			compile: function (element, attrs) {
				return function (scope, element, attrs) {
					formCounter = formCounter + 1;
					scope.formId = formCounter;
					scope.stageIndex = scope.index;
					scope.executionPlanStage = scope.data;
				};
			}
		};
	}
]);

testListApp.controller("settingsSoftwareController", [
	"$scope", "$resource", function ($scope, $resource) {
		var resource = $resource("/axe/testlist/:testListId/softwares");
		var softwareUpdateOptionsResource = $resource("/axe/api/softwareitem/:softwareId/updateoptions");
		var softwareVersionResource = $resource("/axe/software/:softwareId/versions/:private");
		var testListSoftwareResource = $resource("/axe/api/testlist/:testListId/softwares");
		var unsavedMessage = "Changes not saved! Continue leaving the page?";

		$scope.rows = [];
		$scope.settings = {
			softwares: [],
			softwareUpdateOptions: {}
		};
		$scope.initialized = false;
		$scope.saving = false;

		var init = function () {
			resource.get({ testListId: $scope.testListId }, function (response) {
				Object.keys(response.softwareUpdateOptions).forEach(function (softwareId) {
					var softwareName = response.softwares.find(function (software) { return software.id == softwareId }).name;
					response.softwareUpdateOptions[softwareId].forEach(function (updateOption) {
						updateOption.message = getUpdateOptionMessage(softwareName, updateOption);
					});
				});

				$scope.settings = response;
				$scope.rows = response.testListSoftwares
					.sort(function (x, y) { return x.name < y.name; })
					.map(function (testListSoftware) {
						return {
							selected: {
								software: {
									id: testListSoftware.softwareId,
									name: testListSoftware.softwareName
								},
								updateOption: testListSoftware.updateOption,
								softwareVersion: {
									softwareVersionId: testListSoftware.softwareVersionId,
									softwareVersionName: testListSoftware.softwareVersionName,
									authorIdsid: testListSoftware.softwareVersionAuthorIdsid,
									private: testListSoftware.private
								}
							},
							lastSelectedSoftwareId: testListSoftware.softwareId,
							previousTestListSoftware: testListSoftware,
							softwareVersionMessage: getSoftwareVersionMessage(testListSoftware, testListSoftware.updateOption),
							updateOptions: $scope.settings.softwareUpdateOptions[testListSoftware.softwareId],
							softwareVersions: [],
							searchIncludePrivateSoftwareVersions: "false",
						};
					});
				$scope.initialized = true;
			});
		};

		var getUpdateOptionMessage = function (software, updateOption) {
			var message = null;

			if (!updateOption.enableAutoUpdate) {
				message = "Disables updating version automatically";
			} else if (updateOption.sourceSoftwareCiConfigLevel == null) {
				message = "Updates to latest released version";
			} else if (updateOption.sourceSoftwareCiConfigLevel == 1 && updateOption.updateOnSmokeSuccess && software != updateOption.sourceSoftwareCiConfigSoftwareName) {
				message = "Updates " + software + " based on the latest smoke testing from " + updateOption.name;
			} else if (updateOption.sourceSoftwareCiConfigLevel == 1 && updateOption.updateOnSmokeSuccess) {
				message = "Updates to latest build version passing smoke testing"
			} else if (updateOption.sourceSoftwareCiConfigLevel > 0 && software != updateOption.sourceSoftwareCiConfigSoftwareName) {
				message = "Updates " + software + " based on the latest release from " + updateOption.name;
			} else {
				message = "Updates to latest release version from " + updateOption.name;
			}

			return message;
		};

		var getSoftwareVersionMessage = function (testListSoftware, currentUpdateOption) {
			var message = null;
			if (testListSoftware && testListSoftware.overrideAuthorIdsid && currentUpdateOption.enableAutoUpdate && testListSoftware.softwareVersionId != testListSoftware.lastAutoUpdateSoftwareVersionId) {
				message = "Changed by " + testListSoftware.overrideAuthorIdsid + " " + axeApp.getElapsedTime(testListSoftware.overrideDateTime) + " ago";
				if (testListSoftware.lastAutoUpdateSoftwareVersionName) {
					message += "\n Previous default version: " + testListSoftware.lastAutoUpdateSoftwareVersionName;
				}
			}
			return message;
		};

		$scope.add = function () {
			$scope.rows.push({
				selected: {
					software: null,
					updateOption: null,
					softwareVersion: null
				},
				previousTestListSoftware: null,
				updateOptions: [],
				softwareVersions: [],
				searchIncludePrivateSoftwareVersions: "false"
			});
			$scope.settingsForm.$setDirty();
		};

		$scope.remove = function (row) {
			var index = $scope.rows.indexOf(row);
			if (index > -1) {
				$scope.rows.splice(index, 1);
			}
			
			$scope.settingsForm.$setDirty();
		};

		$scope.getSoftwareOptions = function (row) {
			// exclude softwares selected by rows to prevent duplicate softwares
			var selectedSoftwareIds = $scope.rows.filter(function (r) { return r.selected.software != null && r.selected.software.id > 0; })
				.map(function (r) { return r.selected.software.id; });

			var softwares = $scope.settings.softwares.filter(function (software) {
				return !selectedSoftwareIds.includes(software.id);
			});

			// add the current row's selected software back if user doesn't want to change the software in the row
			if (row.selected.software && row.selected.software.id > 0) {
				softwares.push($scope.settings.softwares.find(function (software) { return software.id == row.selected.software.id; }));
			}

			return softwares;
		};

		$scope.selectSoftware = function (selected, row) {
			if (selected.id != row.lastSelectedSoftwareId) {
				row.lastSelectedSoftwareId = selected.id;
				row.selected.updateOption = null;
				row.selected.softwareVersion = null;
				row.previousTestListSoftware = $scope.settings.testListSoftwares.find(function (x) { return x.softwareId == selected.id; });
				row.softwareVersions = null;

				if ($scope.settings.softwareUpdateOptions.hasOwnProperty(selected.id)) {
					row.updateOptions = $scope.settings.softwareUpdateOptions[selected.id];
				} else {
					row.updateOptions = [{
						name: "Loading update options <i class='fa fa-circle-o-notch fa-spin'></i>",
						loading: true
					}];
					softwareUpdateOptionsResource.query({ softwareId: selected.id },
						function (response) {
							response.forEach(function (updateOption) { updateOption.message = getUpdateOptionMessage(selected.name, updateOption); });
							$scope.settings.softwareUpdateOptions[selected.id] = response;
							row.updateOptions = response;
						});
				}
			}
		};

		$scope.selectSoftwareVersion = function (selected, row) {
			// If user is re-selecting the current override software, show the original message again
			// Otherwise show nothing (if the software is not overriden, or a new override is being set)
			if (row.previousTestListSoftware && row.previousTestListSoftware.softwareVersionId == selected.softwareVersionId) {
				row.softwareVersionMessage = getSoftwareVersionMessage(row.previousTestListSoftware, row.selected.updateOption);
			} else {
				row.softwareVersionMessage = null;
			}
		};

		$scope.refreshSearchResults = function (row, search) {
			if (row.selected.software && row.selected.software.id > 0) {
				row.softwareVersions = [{
					loading: true,
					softwareVersionName: "Searching <i class='fa fa-circle-o-notch fa-spin'></i>"
				}];
				row.lastSearchValue = search;
				softwareVersionResource.query(
					{ softwareId: row.selected.software.id, includePrivate: row.searchIncludePrivateSoftwareVersions, filter: search },
					function (response) {
						if (response.length > 0) {
							response.forEach(function (softwareVersion) {
								softwareVersion.softwareVersionName = softwareVersion.label;
							});
							row.softwareVersions = response;
						} else {
							row.softwareVersions = [{
								noResults: true,
								softwareVersionName: "No software versions found"
							}];
						}
					});
			}
		};

		$scope.getSearchResultsDropDownHeight = function (software) {
			return $("#" + software + "_SoftwareVersionDropDown").outerHeight();
		};

		$scope.save = function() {
			$scope.saving = true;

			var testListSoftwares = $scope.rows.map(function (row) {
				var testListSoftware = {
					softwareId: row.selected.software.id,
					updateOption: row.selected.updateOption
				};

				if (row.selected.softwareVersion) {
					testListSoftware.softwareVersionId = row.selected.softwareVersion.softwareVersionId;
				}

				return testListSoftware;
			});

			// note: removed TestListId from software object
			testListSoftwareResource.save({ testListId: $scope.testListId }, testListSoftwares, function success() {
				$scope.saving = false;
				$scope.settingsForm.$setPristine();
			}, function error(response) {
				alert(response.statusText);
				$scope.saving = false;
			});
		};

		$scope.$on("$locationChangeStart", function (event, next, current) {
			if ($scope.settingsForm.$dirty) {
				if (!confirm(unsavedMessage)) {
					event.preventDefault();
				}
			}
		});

		window.onbeforeunload = function (event) {
			if ($scope.settingsForm.$dirty) {
				if (typeof event === "undefined") {
					window.event.returnValue = unsavedMessage;
				}
				return unsavedMessage;
			}
		};

		init();
	}
]);

testListApp.controller("settingsTestSyncCriteriaController", [
	"$scope", "$resource", "$uibModal", function($scope, $resource, $uibModal) {
		var resource = $resource("/axe/testlist/:testListId/syncsettings", {}, { update: { method: "PUT" } });
		var unsavedMessage = "Changes not saved! Continue leaving the page?";

		$scope.initialized = false;
		$scope.saving = false;

		$scope.testCaseFields = {
			CommandLine: { type: "string", label: "CommandLine" },
			Feature: { type: "string", label: "Feature" },
			FileName: { type: "string", label: "FileName" },
			Product: { type: "string", label: "Product" },
			ExecutionTags: { type: "string", label: "ProductTag" },
			RelativePath: { type: "string", label: "RelativePath" },
			Tag: { type: "string", label: "Tag" },
			Target: { type: "string", label: "Target" },
			TestArea: { type: "string", label: "TestArea" },
			VersionControlLabel: { type: "string", label: "VersionControlLabel" }
		};

		$scope.sourceTestListFields = {
			CommandLine: { type: "string", label: "CommandLine" },
			Essential: { type: "bool", label: "Essential" },
			Feature: { type: "string", label: "Feature" },
			FileName: { type: "string", label: "FileName" },
			Product: { type: "string", label: "Product" },
			ExecutionTags: { type: "string", label: "ProductTag" },
			RelativePath: { type: "string", label: "RelativePath" },
			Tag: { type: "string", label: "Tag" },
			Target: { type: "string", label: "Target" },
			TestArea: { type: "string", label: "TestArea" },
			VersionControlLabel: { type: "string", label: "VersionControlLabel" },
			WaiveStatus: { type: "value", validValues: ["Active", "DoNotRun", "MustRun", "MustRunWaived", "Waived"], label: "WaiveStatus" }
		};

		$scope.syncCriteriaMode = [
			{ name: "TestLocation", display: "Test Location", description: "Import tests from a Perforce path" },
			{ name: "CloneTestList", display: "Clone Test List", description: "Clone the Plans, Stages, Methods, and test pins from another Test List" },
			{ name: "FromTestList", display: "From Test List", description: "Import tests which exist in another Test List" },
		];

		$scope.settings = resource.get(
			{ testListId: $scope.testListId },
			function () {
				angular.forEach($scope.settings.testListSyncCriteria, function (syncCriteria) {
					if (syncCriteria.sourceTestList == null) {
						syncCriteria.syncCriteriaMode = "TestLocation";
					} else {
						if (syncCriteria.synchronizeFromTestList) {
							syncCriteria.syncCriteriaMode = "CloneTestList";
						} else {
							syncCriteria.syncCriteriaMode = "FromTestList";
						}

						angular.forEach($scope.settings.testLists, function (testList) {
							if (syncCriteria.sourceTestList.id === testList.id) {
								syncCriteria.sourceTestList = testList;
							}
						});
					}
					syncCriteria.editable = false;
				});

				$scope.initialized = true;
			}, function (response) {
				alert(response.statusText);
				$scope.initialized = true;
			});

		$scope.addSyncCriteria = function () {
			var syncEntry = {
				enableTestCriteriaEdit: true,
				deleted: false
			};
			
			if (null === $scope.settings.testListSyncCriteria) {
				$scope.settings.testListSyncCriteria = [];
			}
			$scope.settings.testListSyncCriteria.push(syncEntry);
			$scope.settingsForm.$setDirty();
		};

		$scope.deleteSyncCriteria = function(criteria) {
			var index = $scope.settings.testListSyncCriteria.indexOf(criteria);
			$scope.settings.testListSyncCriteria[index].deleted = true;
			
			if($scope.settings.testListSyncCriteria[index].id === 0) {
				$scope.settings.testListSyncCriteria.splice(index, 1);
			}
			$scope.settingsForm.$setDirty();
		};

		$scope.save = function () {
			$scope.saving = true;
			$uibModal.open({
				animation: false,
				templateUrl: "/axe/Scripts/App/Axe/commentDialog.html",
				controller: commentDialogController,
				backdrop: "static",
				resolve: {
					title: function () { return "Change Comments" },
					comment: function () { return ""}	
				}
			}).result.then(function (comment) {
			
				$scope.settings.testListSyncCriteria.forEach(function (syncCriteria) {
					syncCriteria.changeComment = comment;
					if (syncCriteria.syncCriteriaMode == "CloneTestList") {
						syncCriteria.synchronizeFromTestList = true;
					} else if (syncCriteria.syncCriteriaMode == "TestLocation") {
						syncCriteria.sourceTestList = null;
					}
				});
		
				$scope.settings.$update({ testListId: $scope.testListId }, function success() {
					$scope.settings.testListSyncCriteria.forEach(function (syncCriteria) {
						syncCriteria.editable = false;
					});

					$scope.saving = false;
					$scope.settingsForm.$setPristine();
				}, function error(response) {
					alert(response.statusText);
					$scope.saving = false;
				});

			}, function () {
				//dismmiss
				$scope.saving = false;
			});
		};

		$scope.showDataCriteria = function (syncCriteria) {
			return ((syncCriteria.syncCriteriaMode == "CloneTestList" || syncCriteria.syncCriteriaMode == "FromTestList") && syncCriteria.sourceTestList != null)
					|| (syncCriteria.syncCriteriaMode == "TestLocation" && syncCriteria.location != null);
		};

		$scope.$on("$locationChangeStart", function (event, next, current) {
			if ($scope.settingsForm.$dirty) {
				if (!confirm(unsavedMessage)) {
					event.preventDefault();
				}
			}
		});

		window.onbeforeunload = function (event) {
			if ($scope.settingsForm.$dirty) {
				if (typeof event === "undefined") {
					window.event.returnValue = unsavedMessage;
				}
				return unsavedMessage;
			}
		};
	}
]);

testListApp.controller("settingsPermissionsController", [
	"$scope", "$resource", function ($scope, $resource) {
		var resource = $resource("/axe/testlist/:testListId/permissions", {}, { update: { method: "PUT" } });
		var unsavedMessage = "Changes not saved! Continue leaving the page?";

		$scope.initialized = false;
		$scope.saving = false;
		$scope.queryFields = {
			TestArea: { type: "string", label: "TestArea"}
		};

		$scope.addGroup = function() {
			$scope.userGroups.push({
				dataFilter: {},
				id: 0,
				name: "TestList" + $scope.testListId + "Waive",
				role: "Waive",
				users: [],
				enableEditQuery: true
			});
			$scope.settingsForm.$setDirty();
		};

		$scope.addUser = function(userGroup) {
			userGroup.users.push(userGroup.newUser);
			userGroup.newUser = "";
			$scope.settingsForm.$setDirty();
		};

		$scope.deleteUser = function (userGroup, user) {
			userGroup.users.splice(userGroup.users.indexOf(user), 1);
			$scope.settingsForm.$setDirty(); $scope.settingsForm.$setDirty();
		};

		$scope.deleteGroup = function (userGroup) {
			$scope.userGroups.splice($scope.userGroups.indexOf(userGroup), 1);
			$scope.settingsForm.$setDirty();
		};

		$scope.save = function() {
			$scope.saving = true;
			resource.update({ testListId: $scope.testListId },
				$scope.userGroups,
				function success() {
					$scope.saving = false;
					$scope.settingsForm.$setPristine();
				},
				function error(response) {
					alert(response.statusText);
					$scope.saving = false;
				});
		};

		$scope.toggleEditQuery = function (group) {
			group.enableEditQuery = group.enableEditQuery ? false : true;
		};

		$scope.userGroups = resource.query({ testListId: $scope.testListId },
			function() {
				$scope.initialized = true;
			});

		$scope.$on("$locationChangeStart", function (event, next, current) {
			if ($scope.settingsForm.$dirty) {
				if (!confirm(unsavedMessage)) {
					event.preventDefault();
				}
			}
		});

		window.onbeforeunload = function (event) {
			if ($scope.settingsForm.$dirty) {
				if (typeof event === "undefined") {
					window.event.returnValue = unsavedMessage;
				}
				return unsavedMessage;
			}
		};
	}
]);



//testListApp.controller("userGroupController",
//	[
//		"$scope", "userGroupFactory",
//		function ($scope, userGroupFactory) {
//			var factory = null;

//			$scope.init = function(userGroupId) {
//				factory = userGroupFactory.getInstance(userGroupId);
//				$scope.users = factory.users;
//				$scope.getUser = factory.getUser;
//				$scope.add = function (userId) {
//					instance.users.push(response.data);
//				}
//				$scope.remove = function (userId) {
					
//				};
//			}
//		}
//	]);
var settingsDialogController = [
	"$scope", "$rootScope", "$uibModalInstance", "$document", "settingType", "settingsResult", function ($scope, $rootScope, $uibModalInstance, $document, settingType, settingsResult) {
		$scope.settingsResult = settingsResult;
		$scope.settingType = settingType;

		var keydownListener = function (e) {
			if (e.isDefaultPrevented()) {
				return e;
			} else if (e.which === 13) {
				$scope.accept();
			}
		};
		$scope.accept = function() {
			$uibModalInstance.close($scope.settingsResult);
		};

		$scope.cancel = function() {
			$document.off("keydown", keydownListener);
			$uibModalInstance.dismiss("cancel");
		};

		$scope.toggleSetting = function (setting) {
			setting.overwrite = !setting.overwrite;			
		};

		$document.on("keydown", keydownListener);
	}
];

queueDialogModule.directive("fileManifestComponent", [
	function () {
		var controller = [
			"$scope", function ($scope) {
				$scope.getFileManifestOptions = function () {
					//return ["Input", "Output", "Archive", "Log", "Debug", "Coverage"];
					return ["Archive", "Coverage", "Debug"];
				};
			}
		];

		return {
			restrict: "E",
			controller: controller,
			scope: {
				model: "=",
				disabled: "=",
				fileManifestCss: "@"
			},
			templateUrl: "/axe/Scripts/App/TestLists/Settings/ExecutionStages/fileManifestComponent.html"
		};
	}
]);
var executionGroupEditDialogController = [
	"$scope", "$document", "$uibModalInstance", "$http", "executionGroupIds",
	function ($scope, $document, $uibModalInstance, $http, executionGroupIds) {
		$scope.applied = false;
		$scope.saving = false;
		$scope.error = null;
		$scope.executionGroupIds = executionGroupIds;

		var keydownListener = function (e) {
			if (e.isDefaultPrevented()) {
				return e;
			} else if (e.which === 13) {
				if (!$scope.applied) {
					$scope.apply();
				} else {
					$scope.close();
				}
			}
		};

		$scope.apply = function () {
			$scope.saving = true;
			var body = {
				comment: $scope.comment,
				executionGroupIds: executionGroupIds
			};
			$http.put("/axe/api/executiongroup/stop", body)
				.then(
					function success(response) {
						if (response.data.length > 0) {
							$scope.error = "You do not have permission to stop execution group" 
								+ (response.data.length !== 1 ? "s: " : ": ")
								+ response.data.join(", ");
						}
						$scope.applied = true;
						$scope.saving = false;
					},
					function error(response) {
						$scope.error = "Error: " + ((response.data.message && response.status !== 500) ? response.data.message : response.statusText);
						$scope.applied = true;
						$scope.saving = false;
					});
		};

		$scope.cancel = function () {
			$document.off("keydown", keydownListener);
			$uibModalInstance.dismiss("cancel");
		};

		$scope.close = function () {
			$document.off("keydown", keydownListener);
			$uibModalInstance.close();
		};

		$document.on("keydown", keydownListener);
	}
];

testListApp.controller("executionGroupsDataTableController",
	[
		"$scope", "$rootScope", "$location", "$routeParams", "ci", "user", "mine",
		function ($scope, $rootScope, $location, $routeParams, ci, user, mine) {
			$scope.testListId = $routeParams.testListId;
			$scope.filters = {
				user: user,
				mine: mine,
				ci: $routeParams.ci === "ci" || ci
			};

			$scope.rootUrl = "/axe/tests/testlists/" + $scope.testListId + "/executions/";

			$scope.onFilters = function (filters) {
				$scope.filters = filters;
				$location.path($scope.rootUrl + ($scope.filters.mine ? "/mine" : "/all") + ($scope.filters.ci ? "/ci" : ""));
			};

			$scope.onDiff = function(leftExecutionGroupId, rightExecutionGroupId) {
				$location.path("/axe/tests/testlists/" +
					$scope.testListId +
					"/executions/group/" +
					leftExecutionGroupId +
					"/compare/" +
					rightExecutionGroupId);
			};
		}
	]);

testListApp.controller("executionGroupsCompareController", ["$scope", "$rootScope", "$routeParams", "$http",
	function ($scope, $rootScope, $routeParams, $http) {
		$scope.leftExecutionGroupId = $routeParams.leftExecutionGroupId;
		$scope.rightExecutionGroupId = $routeParams.rightExecutionGroupId;
		$scope.testListId = $routeParams.testListId;
		$scope.rootUrl = "/axe/tests/testlists/" + $scope.testListId + "/executions/group/";
		
		
		// Since this controller is for the page and not for the ng-view, $routeParams will be empty on initial page load. 
		//   Subscribing to event to properly initialize page controls when url contains state for default load
		$scope.$on("$routeChangeSuccess", function () {
			if ($scope.testListId != null && $scope.testListId !== 0) {
				$rootScope.$broadcast("axeTreeSelectedNodeIds", { nodeIds: [$scope.testListId] });
			}
			$http.get("/axe/api/executiongroup/" + $scope.leftExecutionGroupId + "/name").then(function (response) {
				$scope.executionGroupName = response.data;
				$scope.$parent.title.subTitle = "<a href='" + $scope.rootUrl + $scope.leftExecutionGroupId + "'>" + $scope.executionGroupName + "</a>";
			});
		});
	}
]);

testListApp.controller("executionsDataTableController",
	[
		"$scope", "$rootScope", "$routeParams", "$http",
		function($scope, $rootScope, $routeParams, $http) {
			$scope.testListId = $routeParams.testListId;
			$scope.executionGroupId = $routeParams.executionGroupId;
			$scope.rootUrl = "/axe/tests/testlists/" +
				$scope.testListId +
				"/executions/group/" +
				$scope.executionGroupId +
				"/execution/";

			// Since this controller is for the page and not for the ng-view, $routeParams will be empty on initial page load. 
			//   Subscribing to event to properly initialize page controls when url contains state for default load
			$scope.$on("$routeChangeSuccess",
				function() {
					if ($scope.testListId != null && $scope.testListId !== 0) {
						$rootScope.$broadcast("axeTreeSelectedNodeIds", { nodeIds: [$scope.testListId] });
					}
					$http.get("/axe/api/executiongroup/" + $scope.executionGroupId + "/name").then(function(response) {
						$scope.executionGroupName = response.data;
						$scope.$parent.title.subTitle = "<a href='/axe/tests/testlists/" +
							$scope.testListId +
							"/executions/group/" +
							$scope.executionGroupId +
							"'>" +
							$scope.executionGroupName +
							"</a>";
					});
				});
		}
	]);

testListApp.controller("executionsSummaryController", ["$scope", "$rootScope", "$routeParams", "$http",
	function ($scope, $rootScope, $routeParams, $http) {
		$scope.executionGroupId = $routeParams.executionGroupId;
		$scope.testListId = $routeParams.testListId;
		$scope.summaryType = $routeParams.summaryType;
		$scope.rootUrl = "/axe/tests/testlists/" + $scope.testListId + "/executions/group/";
		$scope.pivot = "executionStageTestArea";

		// Since this controller is for the page and not for the ng-view, $routeParams will be empty on initial page load.
		//   Subscribing to event to properly initialize page controls when url contains state for default load
		$scope.$on("$routeChangeSuccess", function () {
			if ($scope.testListId != null && $scope.testListId !== 0) {
				$rootScope.$broadcast("axeTreeSelectedNodeIds", { nodeIds: [$scope.testListId] });
			}
			$http.get("/axe/api/executiongroup/" + $scope.executionGroupId + "/name").then(function (response) {
				$scope.executionGroupName = response.data;
				if (null != $scope.$parent && null != $scope.$parent.title) {
					$scope.$parent.title.subTitle =
						"<a href='" + $scope.rootUrl + $scope.executionGroupId + "'>" + $scope.executionGroupName + "</a>";
				}
			});
		});
	}
]);

testListApp.controller("executionDetailController", ["$scope",  "$routeParams",
	function ($scope, $routeParams) {
		$scope.executionId = $routeParams.executionId;
	}
]);

testListApp.controller("latestExecutionsDataTableController",
	[
		"$scope", "$rootScope", "$routeParams",
		function($scope, $rootScope, $routeParams) {
			$scope.testListId = $routeParams.testListId;
			$scope.latestOption = $routeParams.latestOption;

			// Since this controller is for the page and not for the ng-view, $routeParams will be empty on initial page load. 
			//   Subscribing to event to properly initialize page controls when url contains state for default load
			$scope.$on("$routeChangeSuccess",
				function() {
					if ($scope.testListId != null && $scope.testListId !== 0) {
						$rootScope.$broadcast("axeTreeSelectedNodeIds", { nodeIds: [$scope.testListId] });
					}
					$scope.$parent.title.subTitle = "Latest Executions";
				});
		}
	]);

testListApp.controller("latestExecutionsSummaryController", ["$scope", "$rootScope", "$routeParams",
	function ($scope, $rootScope, $routeParams) {
		$scope.testListId = $routeParams.testListId;
		$scope.latestOption = $routeParams.latestOption;
		$scope.summaryType = $routeParams.summaryType;
		$scope.rootUrl = "/axe/tests/testlists/" + $scope.testListId;

		// Since this controller is for the page and not for the ng-view, $routeParams will be empty on initial page load.
		//   Subscribing to event to properly initialize page controls when url contains state for default load
		$scope.$on("$routeChangeSuccess", function () {
			if ($scope.testListId != null && $scope.testListId !== 0) {
				$rootScope.$broadcast("axeTreeSelectedNodeIds", { nodeIds: [$scope.testListId] });
			}
			$scope.$parent.title.subTitle = "Latest Summary";
		});
	}
]);

testListApp.controller("issuesDataTableController",
	[
		"$scope", "$rootScope", "$routeParams", "$http",
		function ($scope, $rootScope, $routeParams, $http) {
			$scope.testListId = $routeParams.testListId;
			$scope.rootUrl = "/axe/tests/testlists/" + $scope.testListId + "/issues";
		}
	]);
testListApp.controller("testListDataTableController",
	[
		"$scope", "$routeParams",
		function ($scope, $routeParams) {
			$scope.testListId = $routeParams.testListId;
			$scope.dataUrl = "/axe/tests/datatable/testlists/" + $scope.testListId;
			
			$scope.nodeSelected = function() {
				return $scope.testListId !== 0 && $scope.testListId != null;
			};
		}
	]);
testListApp.controller("executionGroupDetailController", ["$scope", "$rootScope", "$routeParams", "$http",
	function ($scope, $rootScope, $routeParams, $http) {
		$scope.executionGroupId = $routeParams.executionGroupId;
		$scope.rootUrl = "/axe/tests/testlists/" + $scope.testListId + "/executions/group/" + $scope.executionGroupId;

		// Since this controller is for the page and not for the ng-view, $routeParams will be empty on initial page load. 
		//   Subscribing to event to properly initialize page controls when url contains state for default load
		$scope.$on("$routeChangeSuccess", function () {
			if ($scope.testListId != null && $scope.testListId !== 0) {
				$rootScope.$broadcast("axeTreeSelectedNodeIds", { nodeIds: [$scope.testListId] });
			}
			$http.get("/axe/api/executiongroup/" + $scope.executionGroupId + "/name").then(function (response) {
				$scope.executionGroupName = response.data;
				$scope.$parent.title.subTitle = "<a href='/axe/tests/testlists/" +
					$scope.testListId +
					"/executions/group/" +
					$scope.executionGroupId +
					"'>" +
					$scope.executionGroupName +
					"</a>";
			});
		});
	}
]);
var module = angular.module("testListTestHistoryDialogModule", ["axeApp", "ui.bootstrap"])
	.service("testListTestHistoryDialog", ["$uibModal", function ($uibModal) {
		var controller = [
			"$scope", "$document", "$uibModalInstance", "$http", "testListTestId",
			function ($scope, $document, $uibModalInstance, $http, testListTestId) {
				$scope.loading = true;
				var keydownListener = function (e) {
					if (e.isDefaultPrevented()) {
						return e;
					} else if (e.which === 13) {
						$scope.close();
					}
				};

				$scope.close = function () {
					$document.off("keydown", keydownListener);
					$uibModalInstance.close();
				};

				$document.on("keydown", keydownListener);

				$http.get("axe/api/testlist/testlisttest/" + testListTestId + "/history").then(function (result) {
					$scope.histories = result.data;
					$scope.loading = false;
				}, function (error) {
					$scope.loading = false;
					alert(error);
				});
			}
		];

		this.open = function (testListTestId) {
			if (null != testListTestId) {
				$uibModal.open({
					animation: false,
					templateUrl: "/axe/Scripts/App/TestListTestHistoryDialog/TestListTestHistoryDialog.html",
					controller: controller,
					size: "lg",
					backdrop: "static",
					resolve: {
						testListTestId: function () {
							return testListTestId;
						}
					}
				}).result.then(function () { /* close*/ }, function () { /*dismiss */ });
			}
		};
	}]);
